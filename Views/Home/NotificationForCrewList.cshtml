@{
    // View
    View = this;

    // Check action result
    if (notificationForCrewList.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!notificationForCrewList.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
@if (!notificationForCrewList.IsExport()) {
<script>
var currentTable = @Html.Raw(ConvertToJson(notificationForCrewList.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { NotificationForCrew: currentTable } });
var currentPageID = ew.PAGE_ID = "list";
var currentForm;
var @(notificationForCrewList.FormName);
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("@(notificationForCrewList.FormName)")
        .setPageId("list")
        .setSubmitWithFetch(@(notificationForCrewList.UseAjaxActions ? "true" : "false"))
        .setFormKeyCountName("@(notificationForCrewList.FormKeyCountName)")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
ew.PREVIEW_SELECTOR = ".ew-preview-btn";
ew.PREVIEW_MODAL_CLASS = "modal modal-fullscreen-sm-down";
ew.PREVIEW_ROW = true;
ew.PREVIEW_SINGLE_ROW = false;
ew.PREVIEW || ew.ready("head", ew.PATH_BASE + "js/preview.min.js?v=20.1.0", "preview");
</script>
<script>
window.Tabulator || loadjs([
    ew.PATH_BASE + "js/tabulator.min.js?v=20.1.5",
    ew.PATH_BASE + "css/@CssFile("tabulator_bootstrap5.css", false)?v=20.1.5"
], "import");
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
}
@if (!notificationForCrewList.IsExport()) {
<div class="btn-toolbar ew-toolbar">
@if (notificationForCrewList.TotalRecords > 0 && notificationForCrewList.ExportOptions.Visible) {
    notificationForCrewList.ExportOptions.Render("body");
}
@if (notificationForCrewList.ImportOptions.Visible) {
    notificationForCrewList.ImportOptions.Render("body");
}
</div>
}
@if (!notificationForCrewList.IsModal) {
}
@notificationForCrewList.ShowPageHeader()
@notificationForCrewList.ShowMessages()
<main class="list @(notificationForCrewList.TotalRecords == 0 && !notificationForCrewList.IsAdd ? " ew-no-record" : "")">
<div id="ew-list">
@if (notificationForCrewList.TotalRecords > 0 || !Empty(notificationForCrewList.CurrentAction)) {
<div class="ew-multi-column-grid p-0 overlay-wrapper">
@{ notificationForCrewList.LayoutOptions.Render("body"); }
@await Html.PartialAsync("NotificationForCrew" + TitleCase(notificationForCrewList.MultiColumnLayout))
</div><!-- /.ew-multi-column-grid -->
} else { // Show other options
<div class="ew-list-other-options">
@notificationForCrewList.OtherOptions.ForEach(opt => opt.ButtonClass = "").RenderBody()
</div>
}
</div>
</main>
@notificationForCrewList.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
@if (!notificationForCrewList.IsExport()) {
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("NotificationForCrew");
});
</script>
<script>
loadjs.ready("load", function() {
    // Startup script
    // Startup script
    // Write your table-specific startup script here
    // document.write("page loaded");
    $('div.ew-layout-option').remove();

    // Get the current URL
    const currentUrlObject = new URL(window.location.href);
    // Create a new URLSearchParams object based on the current URL's search parameters
    const urlQueryParams = new URLSearchParams(currentUrlObject.search);

    // gmandayu: notification need to read.
    const selectedLanguage = ew.vars['languages']['languages'].filter(obj => obj.selected === true)[0];
    const markAsReadButtons = document.querySelectorAll('.mark-as-read-button');
    const parentUrl = ew.PATH_BASE;
    const getUnreadNotificationUrl = `${parentUrl}api/Notification/unread-notification`;
    // const getEmployeeStatusUrl = `${parentUrl}api/Registration/get-employee-status`;

    // !Get MTCrewID.
    // function buildSelectCrewIDQuery() {
    //     let query = `SELECT MTCrew.ID FROM MTCrew JOIN MTUser ON MTCrew.MTUserID = MTUser.ID WHERE MTUser.ID = ${currentUserId}`;

    //     return query;
    // }

    // const selectQuery = buildSelectCrewIDQuery();

    // console.log(selectQuery);
    function loadPage() {
        const getReadLabels = document.getElementsByClassName("form-check-label");
        for (let i = 0; i < getReadLabels.length; i++) {
            getReadLabels[i].innerText = selectedLanguage.id === 'en-US' ? "Mark as Read" : "Tandai sudah Dibaca";
            getReadLabels[i].style.cursor = "pointer";
        }
        const getTest = document.getElementsByClassName("form-check-input");
        for (let i = 0; i < getTest.length; i++) {
            const getMarkId = document.getElementById("x_MarkAsRead_" + (i + 1));
            if (getMarkId && getMarkId.checked) {
                const readStatus = getMarkId.nextElementSibling;
                if (readStatus) {
                    readStatus.innerText = selectedLanguage.id === 'en-US' ? "Read" : "Dibaca";
                }
            }
        }
        $.ajax({
            url: getUnreadNotificationUrl,
            method: 'GET',
            success: function(response) {
                const notificationIcon = document.querySelector('.nav-icon.fa-bell');
                if(response.success)
                {
                    notificationIcon.classList.add('animate');
                }
                else 
                {
                    notificationIcon.classList.remove('animate');
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                console.error('Kesalahan saat memuat notifikasi:', errorThrown);
            }
        });
        // $.ajax({
        //     url: getEmployeeStatusUrl,
        //     method: 'GET',
        //     success: function(response) { 
        //         const employeeStatus = response.data;
        //         if (employeeStatus === 'Candidate - Accepted') {
        //             $('[data-name="mi_Registration"] p').text(selectedLanguage.id === 'en-US' ? 'Personal Data' : 'Data Pribadi');
        //         }
        //     },
        //     error: function (xhr, textStatus, errorThrown) {
        //         console.error('Kesalahan saat memuat status karyawan kru: ', errorThrown);
        //     }
        // });
    }
    const notificationMarkAsReadApi = 'notification-mark-as-read';
    markAsReadButtons.forEach(button => {
        button.addEventListener('click', function() {
            if (this.disabled) {
                return;
            }
            const colElement = button.closest('.col');
            const dataKey = colElement.dataset.key;
            const url = `${parentUrl}api/Notification/${notificationMarkAsReadApi}?notificationId=${dataKey}`;
            console.log(url);
            $.ajax({
                url: url,
                method: 'POST',
                success: function(response) {
                    button.disabled = true;
                    location.reload();
                },
                error: function(xhr, textStatus, errorThrown) {
                    console.error(`Terjadi kesalahan saat memperbarui nilai MarkAsRead untuk pesan dengan ID ${dataKey}.`, errorThrown);
                }
            });
        });
    });
    $(document).ready(function() {
        loadPage();
    });
    const errorMessage = urlQueryParams.get('errorMessage');
    if (errorMessage !== null) {
        const decodedErrorMessage = decodeURIComponent(errorMessage);
        ew.showToast(decodedErrorMessage);
        urlQueryParams.delete('errorMessage');
        currentUrlObject.search = urlQueryParams.toString();
        history.pushState(null, '', currentUrlObject);
    }
});
</script>
}
