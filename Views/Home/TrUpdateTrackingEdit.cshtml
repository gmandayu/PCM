@{
    // View
    View = this;

    // Check action result
    if (trUpdateTrackingEdit.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!trUpdateTrackingEdit.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@trUpdateTrackingEdit.ShowPageHeader()
@trUpdateTrackingEdit.ShowMessages()
<main class="edit">
<form name="fTRUpdateTrackingedit" id="fTRUpdateTrackingedit" class="@(trUpdateTrackingEdit.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
<script>
var currentTable = @Html.Raw(ConvertToJson(trUpdateTrackingEdit.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { TRUpdateTracking: currentTable } });
var currentPageID = ew.PAGE_ID = "edit";
var currentForm;
var fTRUpdateTrackingedit;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fTRUpdateTrackingedit")
        .setPageId("edit")

        // Add fields
        .setFields([

            ["ID", [fields.ID.visible && fields.ID.required ? ew.Validators.required(fields.ID.caption) : null], fields.ID.isInvalid],
            ["MTCrewID", [fields.MTCrewID.visible && fields.MTCrewID.required ? ew.Validators.required(fields.MTCrewID.caption) : null, ew.Validators.integer], fields.MTCrewID.isInvalid],
            ["TabName", [fields.TabName.visible && fields.TabName.required ? ew.Validators.required(fields.TabName.caption) : null], fields.TabName.isInvalid],
            ["ColumnName", [fields.ColumnName.visible && fields.ColumnName.required ? ew.Validators.required(fields.ColumnName.caption) : null], fields.ColumnName.isInvalid],
            ["ChangeType", [fields.ChangeType.visible && fields.ChangeType.required ? ew.Validators.required(fields.ChangeType.caption) : null], fields.ChangeType.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="update">
<input type="hidden" name="modal" value="@ConvertToInt(trUpdateTrackingEdit.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(trUpdateTrackingEdit.OldKeyName)" value="@Html.Raw(trUpdateTrackingEdit.OldKey)">
<div class="ew-edit-div"><!-- page* -->
@if (trUpdateTrackingEdit.ID.Visible) { // trUpdateTrackingEdit.ID.Visible (begin)
    <div id="r_ID" @Html.Raw(trUpdateTrackingEdit.ID.RowAttributes)>
        <label id="elh_TRUpdateTracking_ID" class="@(trUpdateTrackingEdit.LeftColumnClass)">@Html.Raw(trUpdateTrackingEdit.ID.Caption)@Html.Raw(trUpdateTrackingEdit.ID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trUpdateTrackingEdit.RightColumnClass)"><div @Html.Raw(trUpdateTrackingEdit.ID.CellAttributes)>
<span id="el_TRUpdateTracking_ID">
<span @Html.Raw(trUpdateTrackingEdit.ID.ViewAttributes)>
<input type="text" readonly class="form-control-plaintext" value="@Html.Raw(RemoveHtml(ConvertToString(trUpdateTrackingEdit.ID.EditValue)))"></span>
<input type="hidden" data-table="TRUpdateTracking" data-field="x_ID" data-hidden="1" name="x_ID" id="x_ID" value="@Html.Raw(HtmlEncode(trUpdateTrackingEdit.ID.CurrentValue))">
</span>
</div></div>
    </div>
} @* trUpdateTrackingEdit.ID.Visible (end) *@
@if (trUpdateTrackingEdit.MTCrewID.Visible) { // trUpdateTrackingEdit.MTCrewID.Visible (begin)
    <div id="r_MTCrewID" @Html.Raw(trUpdateTrackingEdit.MTCrewID.RowAttributes)>
        <label id="elh_TRUpdateTracking_MTCrewID" for="x_MTCrewID" class="@(trUpdateTrackingEdit.LeftColumnClass)">@Html.Raw(trUpdateTrackingEdit.MTCrewID.Caption)@Html.Raw(trUpdateTrackingEdit.MTCrewID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trUpdateTrackingEdit.RightColumnClass)"><div @Html.Raw(trUpdateTrackingEdit.MTCrewID.CellAttributes)>
<span id="el_TRUpdateTracking_MTCrewID">
<input type="@(trUpdateTrackingEdit.MTCrewID.InputTextType)" name="x_MTCrewID" id="x_MTCrewID" data-table="TRUpdateTracking" data-field="x_MTCrewID" value="@Html.Raw(trUpdateTrackingEdit.MTCrewID.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(trUpdateTrackingEdit.MTCrewID.PlaceHolder))" data-format-pattern="@(trUpdateTrackingEdit.MTCrewID.FormatPattern)"@Html.Raw(trUpdateTrackingEdit.MTCrewID.EditAttributes) aria-describedby="x_MTCrewID_help">
@Html.Raw(trUpdateTrackingEdit.MTCrewID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trUpdateTrackingEdit.MTCrewID.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* trUpdateTrackingEdit.MTCrewID.Visible (end) *@
@if (trUpdateTrackingEdit.TabName.Visible) { // trUpdateTrackingEdit.TabName.Visible (begin)
    <div id="r_TabName" @Html.Raw(trUpdateTrackingEdit.TabName.RowAttributes)>
        <label id="elh_TRUpdateTracking_TabName" for="x_TabName" class="@(trUpdateTrackingEdit.LeftColumnClass)">@Html.Raw(trUpdateTrackingEdit.TabName.Caption)@Html.Raw(trUpdateTrackingEdit.TabName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trUpdateTrackingEdit.RightColumnClass)"><div @Html.Raw(trUpdateTrackingEdit.TabName.CellAttributes)>
<span id="el_TRUpdateTracking_TabName">
<input type="@(trUpdateTrackingEdit.TabName.InputTextType)" name="x_TabName" id="x_TabName" data-table="TRUpdateTracking" data-field="x_TabName" value="@Html.Raw(trUpdateTrackingEdit.TabName.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(trUpdateTrackingEdit.TabName.PlaceHolder))" data-format-pattern="@(trUpdateTrackingEdit.TabName.FormatPattern)"@Html.Raw(trUpdateTrackingEdit.TabName.EditAttributes) aria-describedby="x_TabName_help">
@Html.Raw(trUpdateTrackingEdit.TabName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trUpdateTrackingEdit.TabName.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* trUpdateTrackingEdit.TabName.Visible (end) *@
@if (trUpdateTrackingEdit.ColumnName.Visible) { // trUpdateTrackingEdit.ColumnName.Visible (begin)
    <div id="r_ColumnName" @Html.Raw(trUpdateTrackingEdit.ColumnName.RowAttributes)>
        <label id="elh_TRUpdateTracking_ColumnName" for="x_ColumnName" class="@(trUpdateTrackingEdit.LeftColumnClass)">@Html.Raw(trUpdateTrackingEdit.ColumnName.Caption)@Html.Raw(trUpdateTrackingEdit.ColumnName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trUpdateTrackingEdit.RightColumnClass)"><div @Html.Raw(trUpdateTrackingEdit.ColumnName.CellAttributes)>
<span id="el_TRUpdateTracking_ColumnName">
<input type="@(trUpdateTrackingEdit.ColumnName.InputTextType)" name="x_ColumnName" id="x_ColumnName" data-table="TRUpdateTracking" data-field="x_ColumnName" value="@Html.Raw(trUpdateTrackingEdit.ColumnName.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(trUpdateTrackingEdit.ColumnName.PlaceHolder))" data-format-pattern="@(trUpdateTrackingEdit.ColumnName.FormatPattern)"@Html.Raw(trUpdateTrackingEdit.ColumnName.EditAttributes) aria-describedby="x_ColumnName_help">
@Html.Raw(trUpdateTrackingEdit.ColumnName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trUpdateTrackingEdit.ColumnName.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* trUpdateTrackingEdit.ColumnName.Visible (end) *@
@if (trUpdateTrackingEdit.ChangeType.Visible) { // trUpdateTrackingEdit.ChangeType.Visible (begin)
    <div id="r_ChangeType" @Html.Raw(trUpdateTrackingEdit.ChangeType.RowAttributes)>
        <label id="elh_TRUpdateTracking_ChangeType" for="x_ChangeType" class="@(trUpdateTrackingEdit.LeftColumnClass)">@Html.Raw(trUpdateTrackingEdit.ChangeType.Caption)@Html.Raw(trUpdateTrackingEdit.ChangeType.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trUpdateTrackingEdit.RightColumnClass)"><div @Html.Raw(trUpdateTrackingEdit.ChangeType.CellAttributes)>
<span id="el_TRUpdateTracking_ChangeType">
<input type="@(trUpdateTrackingEdit.ChangeType.InputTextType)" name="x_ChangeType" id="x_ChangeType" data-table="TRUpdateTracking" data-field="x_ChangeType" value="@Html.Raw(trUpdateTrackingEdit.ChangeType.EditValue)" size="30" maxlength="25" placeholder="@Html.Raw(HtmlEncode(trUpdateTrackingEdit.ChangeType.PlaceHolder))" data-format-pattern="@(trUpdateTrackingEdit.ChangeType.FormatPattern)"@Html.Raw(trUpdateTrackingEdit.ChangeType.EditAttributes) aria-describedby="x_ChangeType_help">
@Html.Raw(trUpdateTrackingEdit.ChangeType.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trUpdateTrackingEdit.ChangeType.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* trUpdateTrackingEdit.ChangeType.Visible (end) *@
</div><!-- /page* -->
@{ trUpdateTrackingEdit.CloseRecordset(); }
@Html.Raw(trUpdateTrackingEdit.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(trUpdateTrackingEdit.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fTRUpdateTrackingedit">@Html.Raw(Language.Phrase("SaveBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fTRUpdateTrackingedit" data-href="@AppPath(trUpdateTrackingEdit.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(trUpdateTrackingEdit.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
</main>
@trUpdateTrackingEdit.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("TRUpdateTracking");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
