@{
    // View
    View = this;

    // Check action result
    if (crewMedicalHistoryForAdminViewModeAdd.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!crewMedicalHistoryForAdminViewModeAdd.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(crewMedicalHistoryForAdminViewModeAdd.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { CrewMedicalHistoryForAdminViewMode: currentTable } });
var currentPageID = ew.PAGE_ID = "add";
var currentForm;
var fCrewMedicalHistoryForAdminViewModeadd;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fCrewMedicalHistoryForAdminViewModeadd")
        .setPageId("add")

        // Add fields
        .setFields([

            ["MTCrewID", [fields.MTCrewID.visible && fields.MTCrewID.required ? ew.Validators.required(fields.MTCrewID.caption) : null], fields.MTCrewID.isInvalid],
            ["_Type", [fields._Type.visible && fields._Type.required ? ew.Validators.required(fields._Type.caption) : null], fields._Type.isInvalid],
            ["VesselName", [fields.VesselName.visible && fields.VesselName.required ? ew.Validators.required(fields.VesselName.caption) : null], fields.VesselName.isInvalid],
            ["DateOccurence", [fields.DateOccurence.visible && fields.DateOccurence.required ? ew.Validators.required(fields.DateOccurence.caption) : null, ew.Validators.datetime(fields.DateOccurence.clientFormatPattern)], fields.DateOccurence.isInvalid],
            ["PlaceOccurence", [fields.PlaceOccurence.visible && fields.PlaceOccurence.required ? ew.Validators.required(fields.PlaceOccurence.caption) : null], fields.PlaceOccurence.isInvalid],
            ["PeriodOfDisability", [fields.PeriodOfDisability.visible && fields.PeriodOfDisability.required ? ew.Validators.required(fields.PeriodOfDisability.caption) : null], fields.PeriodOfDisability.isInvalid],
            ["PresentCondition", [fields.PresentCondition.visible && fields.PresentCondition.required ? ew.Validators.required(fields.PresentCondition.caption) : null], fields.PresentCondition.isInvalid],
            ["Treatment", [fields.Treatment.visible && fields.Treatment.required ? ew.Validators.required(fields.Treatment.caption) : null], fields.Treatment.isInvalid],
            ["Details", [fields.Details.visible && fields.Details.required ? ew.Validators.required(fields.Details.caption) : null], fields.Details.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "_Type": @Html.Raw(crewMedicalHistoryForAdminViewModeAdd._Type.ToClientList(crewMedicalHistoryForAdminViewModeAdd)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@crewMedicalHistoryForAdminViewModeAdd.ShowPageHeader()
@crewMedicalHistoryForAdminViewModeAdd.ShowMessages()
<form name="fCrewMedicalHistoryForAdminViewModeadd" id="fCrewMedicalHistoryForAdminViewModeadd" class="@(crewMedicalHistoryForAdminViewModeAdd.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="insert">
<input type="hidden" name="modal" value="@ConvertToInt(crewMedicalHistoryForAdminViewModeAdd.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(crewMedicalHistoryForAdminViewModeAdd.OldKeyName)" value="@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.OldKey)">
<div class="ew-add-div d-none"><!-- page* -->
@if (crewMedicalHistoryForAdminViewModeAdd.MTCrewID.Visible) { // crewMedicalHistoryForAdminViewModeAdd.MTCrewID.Visible (begin)
    <div id="r_MTCrewID" @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.MTCrewID.RowAttributes)>
        <label id="elh_CrewMedicalHistoryForAdminViewMode_MTCrewID" for="x_MTCrewID" class="@(crewMedicalHistoryForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalHistoryForAdminViewMode_MTCrewID">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.MTCrewID.Caption)@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.MTCrewID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalHistoryForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.MTCrewID.CellAttributes)>
<template id="tpx_CrewMedicalHistoryForAdminViewMode_MTCrewID"><span id="el_CrewMedicalHistoryForAdminViewMode_MTCrewID">
<input type="@(crewMedicalHistoryForAdminViewModeAdd.MTCrewID.InputTextType)" name="x_MTCrewID" id="x_MTCrewID" data-table="CrewMedicalHistoryForAdminViewMode" data-field="x_MTCrewID" value="@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.MTCrewID.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(crewMedicalHistoryForAdminViewModeAdd.MTCrewID.PlaceHolder))" data-format-pattern="@(crewMedicalHistoryForAdminViewModeAdd.MTCrewID.FormatPattern)"@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.MTCrewID.EditAttributes) aria-describedby="x_MTCrewID_help">
@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.MTCrewID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.MTCrewID.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewMedicalHistoryForAdminViewModeAdd.MTCrewID.Visible (end) *@
@if (crewMedicalHistoryForAdminViewModeAdd._Type.Visible) { // crewMedicalHistoryForAdminViewModeAdd._Type.Visible (begin)
    <div id="r__Type" @Html.Raw(crewMedicalHistoryForAdminViewModeAdd._Type.RowAttributes)>
        <label id="elh_CrewMedicalHistoryForAdminViewMode__Type" for="x__Type" class="@(crewMedicalHistoryForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalHistoryForAdminViewMode__Type">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd._Type.Caption)@Html.Raw(crewMedicalHistoryForAdminViewModeAdd._Type.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalHistoryForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalHistoryForAdminViewModeAdd._Type.CellAttributes)>
<template id="tpx_CrewMedicalHistoryForAdminViewMode__Type"><span id="el_CrewMedicalHistoryForAdminViewMode__Type">
    <select
        id="x__Type"
        name="x__Type"
        class="form-select ew-select@(crewMedicalHistoryForAdminViewModeAdd._Type.IsInvalidClass)"
        data-select2-id="fCrewMedicalHistoryForAdminViewModeadd_x__Type"
        data-table="CrewMedicalHistoryForAdminViewMode"
        data-field="x__Type"
        data-value-separator="@(crewMedicalHistoryForAdminViewModeAdd._Type.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewMedicalHistoryForAdminViewModeAdd._Type.PlaceHolder))"
        @Html.Raw(crewMedicalHistoryForAdminViewModeAdd._Type.EditAttributes)>
        @(crewMedicalHistoryForAdminViewModeAdd._Type.SelectOptionListHtml("x__Type"))
    </select>
    @Html.Raw(crewMedicalHistoryForAdminViewModeAdd._Type.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd._Type.GetErrorMessage())</div>
<script>
loadjs.ready("fCrewMedicalHistoryForAdminViewModeadd", function() {
    var options = { name: "x__Type", selectId: "fCrewMedicalHistoryForAdminViewModeadd_x__Type" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewMedicalHistoryForAdminViewModeadd.lists._Type?.lookupOptions.length) {
        options.data = { id: "x__Type", form: "fCrewMedicalHistoryForAdminViewModeadd" };
    } else {
        options.ajax = { id: "x__Type", form: "fCrewMedicalHistoryForAdminViewModeadd", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewMedicalHistoryForAdminViewMode.fields._Type.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewMedicalHistoryForAdminViewModeAdd._Type.Visible (end) *@
@if (crewMedicalHistoryForAdminViewModeAdd.VesselName.Visible) { // crewMedicalHistoryForAdminViewModeAdd.VesselName.Visible (begin)
    <div id="r_VesselName" @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.VesselName.RowAttributes)>
        <label id="elh_CrewMedicalHistoryForAdminViewMode_VesselName" for="x_VesselName" class="@(crewMedicalHistoryForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalHistoryForAdminViewMode_VesselName">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.VesselName.Caption)@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.VesselName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalHistoryForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.VesselName.CellAttributes)>
<template id="tpx_CrewMedicalHistoryForAdminViewMode_VesselName"><span id="el_CrewMedicalHistoryForAdminViewMode_VesselName">
<input type="@(crewMedicalHistoryForAdminViewModeAdd.VesselName.InputTextType)" name="x_VesselName" id="x_VesselName" data-table="CrewMedicalHistoryForAdminViewMode" data-field="x_VesselName" value="@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.VesselName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewMedicalHistoryForAdminViewModeAdd.VesselName.PlaceHolder))" data-format-pattern="@(crewMedicalHistoryForAdminViewModeAdd.VesselName.FormatPattern)"@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.VesselName.EditAttributes) aria-describedby="x_VesselName_help">
@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.VesselName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.VesselName.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewMedicalHistoryForAdminViewModeAdd.VesselName.Visible (end) *@
@if (crewMedicalHistoryForAdminViewModeAdd.DateOccurence.Visible) { // crewMedicalHistoryForAdminViewModeAdd.DateOccurence.Visible (begin)
    <div id="r_DateOccurence" @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.DateOccurence.RowAttributes)>
        <label id="elh_CrewMedicalHistoryForAdminViewMode_DateOccurence" for="x_DateOccurence" class="@(crewMedicalHistoryForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalHistoryForAdminViewMode_DateOccurence">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.DateOccurence.Caption)@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.DateOccurence.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalHistoryForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.DateOccurence.CellAttributes)>
<template id="tpx_CrewMedicalHistoryForAdminViewMode_DateOccurence"><span id="el_CrewMedicalHistoryForAdminViewMode_DateOccurence">
<input type="@(crewMedicalHistoryForAdminViewModeAdd.DateOccurence.InputTextType)" name="x_DateOccurence" id="x_DateOccurence" data-table="CrewMedicalHistoryForAdminViewMode" data-field="x_DateOccurence" value="@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.DateOccurence.EditValue)" placeholder="@Html.Raw(HtmlEncode(crewMedicalHistoryForAdminViewModeAdd.DateOccurence.PlaceHolder))" data-format-pattern="@(crewMedicalHistoryForAdminViewModeAdd.DateOccurence.FormatPattern)"@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.DateOccurence.EditAttributes) aria-describedby="x_DateOccurence_help">
@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.DateOccurence.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.DateOccurence.GetErrorMessage())</div>
@if (!crewMedicalHistoryForAdminViewModeAdd.DateOccurence.ReadOnly && !crewMedicalHistoryForAdminViewModeAdd.DateOccurence.Disabled && !crewMedicalHistoryForAdminViewModeAdd.DateOccurence.EditAttrs.Is("readonly") && !crewMedicalHistoryForAdminViewModeAdd.DateOccurence.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fCrewMedicalHistoryForAdminViewModeadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fCrewMedicalHistoryForAdminViewModeadd", "x_DateOccurence", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span></template>
</div></div>
    </div>
} @* crewMedicalHistoryForAdminViewModeAdd.DateOccurence.Visible (end) *@
@if (crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.Visible) { // crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.Visible (begin)
    <div id="r_PlaceOccurence" @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.RowAttributes)>
        <label id="elh_CrewMedicalHistoryForAdminViewMode_PlaceOccurence" for="x_PlaceOccurence" class="@(crewMedicalHistoryForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalHistoryForAdminViewMode_PlaceOccurence">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.Caption)@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalHistoryForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.CellAttributes)>
<template id="tpx_CrewMedicalHistoryForAdminViewMode_PlaceOccurence"><span id="el_CrewMedicalHistoryForAdminViewMode_PlaceOccurence">
<input type="@(crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.InputTextType)" name="x_PlaceOccurence" id="x_PlaceOccurence" data-table="CrewMedicalHistoryForAdminViewMode" data-field="x_PlaceOccurence" value="@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.PlaceHolder))" data-format-pattern="@(crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.FormatPattern)"@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.EditAttributes) aria-describedby="x_PlaceOccurence_help">
@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.Visible (end) *@
@if (crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.Visible) { // crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.Visible (begin)
    <div id="r_PeriodOfDisability" @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.RowAttributes)>
        <label id="elh_CrewMedicalHistoryForAdminViewMode_PeriodOfDisability" for="x_PeriodOfDisability" class="@(crewMedicalHistoryForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalHistoryForAdminViewMode_PeriodOfDisability">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.Caption)@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalHistoryForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.CellAttributes)>
<template id="tpx_CrewMedicalHistoryForAdminViewMode_PeriodOfDisability"><span id="el_CrewMedicalHistoryForAdminViewMode_PeriodOfDisability">
<input type="@(crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.InputTextType)" name="x_PeriodOfDisability" id="x_PeriodOfDisability" data-table="CrewMedicalHistoryForAdminViewMode" data-field="x_PeriodOfDisability" value="@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.PlaceHolder))" data-format-pattern="@(crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.FormatPattern)"@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.EditAttributes) aria-describedby="x_PeriodOfDisability_help">
@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.Visible (end) *@
@if (crewMedicalHistoryForAdminViewModeAdd.PresentCondition.Visible) { // crewMedicalHistoryForAdminViewModeAdd.PresentCondition.Visible (begin)
    <div id="r_PresentCondition" @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PresentCondition.RowAttributes)>
        <label id="elh_CrewMedicalHistoryForAdminViewMode_PresentCondition" for="x_PresentCondition" class="@(crewMedicalHistoryForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalHistoryForAdminViewMode_PresentCondition">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PresentCondition.Caption)@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PresentCondition.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalHistoryForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PresentCondition.CellAttributes)>
<template id="tpx_CrewMedicalHistoryForAdminViewMode_PresentCondition"><span id="el_CrewMedicalHistoryForAdminViewMode_PresentCondition">
<input type="@(crewMedicalHistoryForAdminViewModeAdd.PresentCondition.InputTextType)" name="x_PresentCondition" id="x_PresentCondition" data-table="CrewMedicalHistoryForAdminViewMode" data-field="x_PresentCondition" value="@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PresentCondition.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewMedicalHistoryForAdminViewModeAdd.PresentCondition.PlaceHolder))" data-format-pattern="@(crewMedicalHistoryForAdminViewModeAdd.PresentCondition.FormatPattern)"@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PresentCondition.EditAttributes) aria-describedby="x_PresentCondition_help">
@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PresentCondition.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PresentCondition.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewMedicalHistoryForAdminViewModeAdd.PresentCondition.Visible (end) *@
@if (crewMedicalHistoryForAdminViewModeAdd.Treatment.Visible) { // crewMedicalHistoryForAdminViewModeAdd.Treatment.Visible (begin)
    <div id="r_Treatment" @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Treatment.RowAttributes)>
        <label id="elh_CrewMedicalHistoryForAdminViewMode_Treatment" for="x_Treatment" class="@(crewMedicalHistoryForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalHistoryForAdminViewMode_Treatment">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Treatment.Caption)@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Treatment.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalHistoryForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Treatment.CellAttributes)>
<template id="tpx_CrewMedicalHistoryForAdminViewMode_Treatment"><span id="el_CrewMedicalHistoryForAdminViewMode_Treatment">
<textarea data-table="CrewMedicalHistoryForAdminViewMode" data-field="x_Treatment" name="x_Treatment" id="x_Treatment" cols="50" rows="4" placeholder="@Html.Raw(HtmlEncode(crewMedicalHistoryForAdminViewModeAdd.Treatment.PlaceHolder))"@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Treatment.EditAttributes) aria-describedby="x_Treatment_help">@(crewMedicalHistoryForAdminViewModeAdd.Treatment.EditValue)</textarea>
@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Treatment.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Treatment.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewMedicalHistoryForAdminViewModeAdd.Treatment.Visible (end) *@
@if (crewMedicalHistoryForAdminViewModeAdd.Details.Visible) { // crewMedicalHistoryForAdminViewModeAdd.Details.Visible (begin)
    <div id="r_Details" @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Details.RowAttributes)>
        <label id="elh_CrewMedicalHistoryForAdminViewMode_Details" for="x_Details" class="@(crewMedicalHistoryForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalHistoryForAdminViewMode_Details">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Details.Caption)@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Details.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalHistoryForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Details.CellAttributes)>
<template id="tpx_CrewMedicalHistoryForAdminViewMode_Details"><span id="el_CrewMedicalHistoryForAdminViewMode_Details">
<textarea data-table="CrewMedicalHistoryForAdminViewMode" data-field="x_Details" name="x_Details" id="x_Details" cols="50" rows="6" placeholder="@Html.Raw(HtmlEncode(crewMedicalHistoryForAdminViewModeAdd.Details.PlaceHolder))"@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Details.EditAttributes) aria-describedby="x_Details_help">@(crewMedicalHistoryForAdminViewModeAdd.Details.EditValue)</textarea>
@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Details.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Details.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewMedicalHistoryForAdminViewModeAdd.Details.Visible (end) *@
</div><!-- /page* -->
<div id="tpd_CrewMedicalHistoryForAdminViewModeadd" class="ew-custom-template"></div>
<template id="tpm_CrewMedicalHistoryForAdminViewModeadd">
<div id="ct_crewMedicalHistoryForAdminViewModeAdd">    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewPersonalDataForAdminViewModeView")">
                @(CurrentLanguage == "en-US" ? "PERSONAL DATA" : "DATA PERSONAL")
            </a>     
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewDocumentForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "DOCUMENTS" : "DOKUMEN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewBankAccountForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "BANK ACCOUNT" : "REKENING BANK")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFamilyForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "FAMILY" : "KELUARGA")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFormalEducationForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "FORMAL EDUCATION" : "PENDIDIKAN FORMAL")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalCertificateForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "MEDICAL CERTIFICATE / TEST" : "SERTIFIKAT / TES MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewCertificateForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "CERTIFICATES AND QUALIFICATIONS" : "SERTIFIKAT DAN KUALIFIKASI")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewExperienceForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "SEA EXPERIENCE" : "PENGALAMAN BERLAYAR")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewAppraisalForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "APPRAISALS" : "PENILAIAN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalHistoryForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "MEDICAL HISTORY" : "RIWAYAT MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewGeneralDataForAdminViewModeView")">
                @(CurrentLanguage == "en-US" ? "GENERAL" : "UMUM")
            </a>
        </li>
    </ul>  
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r__Type" class="mb-2 row">
                <label for="x__Type" class="col-form-label">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd._Type.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalHistoryForAdminViewMode__Type"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_VesselName" class="mb-2 row">
                <label for="x_VesselName" class="col-form-label">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.VesselName.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalHistoryForAdminViewMode_VesselName"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
             <div id="r_DateOccurence" class="mb-2 row">
                <label for="x_DateOccurence" class="col-form-label">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.DateOccurence.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalHistoryForAdminViewMode_DateOccurence"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_PlaceOccurence" class="mb-2 row">
                <label for="x_PlaceOccurence" class="col-form-label">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PlaceOccurence.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalHistoryForAdminViewMode_PlaceOccurence"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_PeriodOfDisability" class="mb-2 row">
                <label for="x_PeriodOfDisability" class="col-form-label">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PeriodOfDisability.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalHistoryForAdminViewMode_PeriodOfDisability"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_PresentCondition" class="mb-2 row">
                <label for="x_PresentCondition" class="col-form-label">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.PresentCondition.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalHistoryForAdminViewMode_PresentCondition"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_Treatment" class="mb-2 row">
                <label for="x_Treatment" class="col-form-label">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Treatment.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalHistoryForAdminViewMode_Treatment"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_Details" class="mb-2 row">
                <label for="x_Details" class="col-form-label">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.Details.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalHistoryForAdminViewMode_Details"></slot></div>
            </div>
        </div>
    </div>
    <div class="row"><!-- buttons .row -->
        <div class="d-flex mb-2"><!-- buttons offset -->
            <button class="btn btn-primary ew-btn ms-auto primary-black-clr gray-bg" id="btn-add-entry">
                @(CurrentLanguage == "en-US" ? "Add Entry" : "Tambah")
            </button>
        </div><!-- /buttons offset -->
    </div>
    <div id="r_MTCrewID" class="mb-3 row">
        <label for="x_MTCrewID" class="col-sm-2 col-form-label">@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.MTCrewID.Caption)</label>
        <div class="col-sm-10"><slot class="ew-slot" name="tpx_CrewMedicalHistoryForAdminViewMode_MTCrewID"></slot></div>
    </div>
    <div id="proceed-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="proceed-modal-dialog-title" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="proceed-modal-dialog-title" class="modal-title">
                        @(CurrentLanguage == "en-US" ? "Warning" : "Peringatan")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p> 
                        @{
                            if (CurrentLanguage == "en-US")
                            {
                                <span>There are error(s) in this tab.</span><br/>
                                <span>If you choose to Proceed, any unsaved data will be lost.</span><br/>
                                <span>Do you want to Proceed?</span>
                            }
                            else
                            {
                                <span>Masih ada error di tab ini.</span><br/>
                                <span>Jika Anda memilih Lanjutkan, data yang belum disimpan akan hilang.</span><br/>
                                <span>Apakah Anda ingin melanjutkan?</span>
                            }
                        }
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger ew-btn" id="btn-proceed" type="button">
                        @(CurrentLanguage == "en-US" ? "Proceed" : "Lanjutkan")
                    </button>
                    <button class="btn btn-default ew-btn" id="btn-proceed-cancel" type="button" data-bs-dismiss="modal">
                        @(CurrentLanguage == "en-US" ? "Cancel" : "Batal")
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div id="loading-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-center mb-0">
                        @(CurrentLanguage == "en-US" ? "Saving..." : "Menyimpan...")
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div id="delete-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="delete-modal-dialog-title" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="delete-modal-dialog-title" class="modal-title">
                        @(CurrentLanguage == "en-US" ? "Confirmation" : "Konfirmasi")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        @(CurrentLanguage == "en-US" ? "Are you sure you want to delete?" : "Anda yakin ingin menghapus?")
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary ew-btn" id="btn-delete" type="button">
                        @(CurrentLanguage == "en-US" ? "Yes" : "Iya")
                    </button>
                    <button class="btn btn-default ew-btn" id="btn-delete-cancel" type="button" data-bs-dismiss="modal">
                        @(CurrentLanguage == "en-US" ? "No" : "Tidak")
                    </button>
                </div>
            </div>
        </div>
    </div></div>
</template>
@{ crewMedicalHistoryForAdminViewModeAdd.CloseRecordset(); }
@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(crewMedicalHistoryForAdminViewModeAdd.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fCrewMedicalHistoryForAdminViewModeadd">@Html.Raw(Language.Phrase("AddBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fCrewMedicalHistoryForAdminViewModeadd" data-href="@AppPath(crewMedicalHistoryForAdminViewModeAdd.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(crewMedicalHistoryForAdminViewModeAdd.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
<script class="ew-apply-template">
loadjs.ready(ew.applyTemplateId, function() {
    var $ = jQuery;
    ew.templateData = { rows: @Html.Raw(ConvertToJson(crewMedicalHistoryForAdminViewModeAdd.Rows)) };
    ew.applyTemplate("tpd_CrewMedicalHistoryForAdminViewModeadd", "tpm_CrewMedicalHistoryForAdminViewModeadd", "CrewMedicalHistoryForAdminViewModeadd", "@(crewMedicalHistoryForAdminViewModeAdd.Export)", "CrewMedicalHistoryForAdminViewMode", ew.templateData.rows[0], @(crewMedicalHistoryForAdminViewModeAdd.IsModal ? "true" : "false"));
    loadjs.done("customtemplate");
});
</script>
@crewMedicalHistoryForAdminViewModeAdd.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("CrewMedicalHistoryForAdminViewMode");
});
</script>
<script>
loadjs.ready("load", function() {
    // Startup script
    // Write your table-specific startup script here
    // document.write("page loaded");

    // Get the current URL
    const currentUrlObject = new URL(window.location.href);
    // get the current URL without Add or Edit for assigning active class in tabs
    const currentUrlWithoutAddEditViewList = currentUrlObject.href.replace(/Add|Edit|View|List/g, "");
    // Create a new URLSearchParams object based on the current URL's search parameters
    const urlQueryParams = new URLSearchParams(currentUrlObject.search);
    // Extract the value of the crewID query parameter
    const currentlyEditedCrewID = urlQueryParams.get('crewID');
    const selectedLanguage = ew.vars['languages']['languages'].filter(obj => obj.selected === true)[0];
    const parentUrl = ew.PATH_BASE;
    const tableName = "CrewMedicalHistoryForAdminViewMode";
    const pageType = "add";
    const pageTypeCapital = "Add";
    const formID = `f${tableName}${pageType}`;
    const addEntryUrl = `${parentUrl}${tableName}${pageTypeCapital}?crewID=${currentlyEditedCrewID}`;
    const listPageUrl = `${parentUrl}${tableName}List?crewID=${currentlyEditedCrewID}`;
    let isChangeTabApproved = false;
    const adminAndEmployeeStatusApi = 'get-admin-and-employee-status';
    $.ajax({
        url: `${parentUrl}api/Registration/${adminAndEmployeeStatusApi}`,
        method: 'GET',
        data: {
            crewID: currentlyEditedCrewID
        },
        success: function(response) {
            if (response.success) {
                // Parse the data in the response
                const isAdmin = response.data.IsAdmin;
                const employeeStatus = response.data.EmployeeStatus;
                if (currentlyEditedCrewID === null) {
                    if (isAdmin) {
                        // redirect to list page with error message: record not found
                        if (employeeStatus === 'Candidate - Draft') {
                            window.location.replace(`${ew.PATH_BASE}RegistrationEdit/-1`);
                        } else if (employeeStatus === 'Candidate - Submitted') {
                            window.location.replace(`${ew.PATH_BASE}VWaitingForPdeReviewView/-1`);
                        }
                    } else {
                        window.location.replace(`${ew.PATH_BASE}index`);
                    }
                }
            } else {
                // Handle the error
                ew.showToast(response.errorMessage);
            }
        },
        error: function(xhr, textStatus, errorThrown) {
            // Handle the error
            ew.showToast(errorThrown);
        }
    });

    //  programatically change the value of MTCrewID
    $('#x_MTCrewID').val(currentlyEditedCrewID);

    // Iterate over each anchor element inside the nav-tabs
    $(".nav-tabs .nav-item a").each(function() {
        const href = $(this).attr("href");
        const hrefWithoutAddEditViewList = href.replace(/Add|Edit|View|List/g, "");
        // Check if the href contains current page's url
        if (currentUrlWithoutAddEditViewList.includes(hrefWithoutAddEditViewList)) {
            // add class and attribute
            $(this).addClass("active");
            $(this).attr("aria-current", "page");
        }
        // Check if the href contains "Edit" or "Add"
        if (href.includes("ViewModeView")) {
            // Add "/" and the currently edited crew ID to the href
            const newHref = href + "/" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        } else if (href.includes("ViewModeList")) {
            // Add "?crewID=" and the currently edited crew ID to the href
            const newHref = href + "?crewID=" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        }
    });

    // start code for auto capitalize first letter of each word
    $('#x_VesselName').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    $('#x_PlaceOccurence').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    // end code for auto capitalize first letter of each word
    const entryButton = $('<button/>', {
        'class': 'btn btn-primary ew-btn ms-auto primary-black-clr gray-bg',
        'id': 'btn-entry',
        'type': 'button',
        'text': (selectedLanguage.id === 'en-US') ? `Add Entry` : `Tambah`
    }).click(function() {
        const validateAddEntryResult = validateAddEntry({ isAllEmptyAllowed: false });
        if (validateAddEntryResult === 'valid') {
            $('#loading-modal-dialog').modal('show');
            const targetUrlRelative = listPageUrl;
            addEntry({ redirectUrlWhenSuccess: targetUrlRelative });
        } else {
            scrollToFirstInvalidInput();
        }
    });
    $('#btn-add-entry').after(entryButton);
    $('#btn-add-entry').remove();
    const customCancelButton = $('<button/>', {
        'class': 'btn btn-danger ew-btn ms-auto primary-red-bg primary-white-clr',
        'id': 'btn-custom-cancel',
        'type': 'button',
        'text': `${ew.language.phrase("CancelBtn")}`,
    }).click(function() {
        if (window[formID].modified) {
            ew.prompt(ew.language.phrase("ConfirmCancel"), result => {
                if (result) {
                    isChangeTabApproved = true;
                    proceedToLink(listPageUrl);
                }
            });
        } else {
            isChangeTabApproved = true;
            proceedToLink(listPageUrl);
        }
    });
    $('#btn-cancel').after(customCancelButton);
    $('#btn-cancel').remove();

    // Target the ol element that has breadcrumb class
    const $breadCrumbOl = $('.breadcrumb').first();

    // Delete the ol element that has breadcrumb class
    $breadCrumbOl.remove();
    $('#btn-action').remove();
    $('.ew-buttons > .col-sm-10').removeClass('col-sm-10').addClass('d-flex mb-3');
    $('.ew-buttons > .offset-sm-2').removeClass('offset-sm-2');
    $('div#r_MTCrewID').hide();
    function toggleInputVisibility(value) {
        if (value === 'Signed Off Due To Medical Reasons') {
            $('#x_VesselName').prop('disabled', false);
            $('#x_DateOccurence').prop('disabled', false);
            $('#x_PlaceOccurence').prop('disabled', false);
            $('#x_PeriodOfDisability').prop('disabled', true);
            $('#x_PeriodOfDisability').val(null);
            $('#x_PresentCondition').prop('disabled', true);
            $('#x_PresentCondition').val(null);
            $('#x_Treatment').prop('disabled', true);
            $('#x_Treatment').val(null);
            $('#x_Details').prop('disabled', false);
        } else if (value === 'Medical Operation') {
            $('#x_VesselName').prop('disabled', true);
            $('#x_VesselName').val(null);
            $('#x_DateOccurence').prop('disabled', false);
            $('#x_PlaceOccurence').prop('disabled', true);
            $('#x_PlaceOccurence').val(null);
            $('#x_PeriodOfDisability').prop('disabled', false);
            $('#x_PresentCondition').prop('disabled', false);
            $('#x_Treatment').prop('disabled', true);
            $('#x_Treatment').val(null);
            $('#x_Details').prop('disabled', false);
        } else if (value === 'Has Illness Or Accident Consulted To Doctor') {
            $('#x_VesselName').prop('disabled', true);
            $('#x_VesselName').val(null);
            $('#x_DateOccurence').prop('disabled', false);
            $('#x_PlaceOccurence').prop('disabled', true);
            $('#x_PlaceOccurence').val(null);
            $('#x_PeriodOfDisability').prop('disabled', true);
            $('#x_PeriodOfDisability').val(null);
            $('#x_PresentCondition').prop('disabled', true);
            $('#x_PresentCondition').val(null);
            $('#x_Treatment').prop('disabled', false);
            $('#x_Details').prop('disabled', false);
        } else if (value === 'Health Or Disability Problem') {
            $('#x_VesselName').prop('disabled', true);
            $('#x_VesselName').val(null);
            $('#x_DateOccurence').prop('disabled', true);
            $('#x_DateOccurence').val(null);
            $('#x_PlaceOccurence').prop('disabled', true);
            $('#x_PlaceOccurence').val(null);
            $('#x_PeriodOfDisability').prop('disabled', true);
            $('#x_PeriodOfDisability').val(null);
            $('#x_PresentCondition').prop('disabled', true);
            $('#x_PresentCondition').val(null);
            $('#x_Treatment').prop('disabled', true);
            $('#x_Treatment').val(null);
            $('#x_Details').prop('disabled', false);
        } else if (value === 'None') {
            $('#x_VesselName').prop('disabled', true);
            $('#x_VesselName').val(null);
            $('#x_DateOccurence').prop('disabled', true);
            $('#x_DateOccurence').val(null);
            $('#x_PlaceOccurence').prop('disabled', true);
            $('#x_PlaceOccurence').val(null);
            $('#x_PeriodOfDisability').prop('disabled', true);
            $('#x_PeriodOfDisability').val(null);
            $('#x_PresentCondition').prop('disabled', true);
            $('#x_PresentCondition').val(null);
            $('#x_Treatment').prop('disabled', true);
            $('#x_Treatment').val(null);
            $('#x_Details').prop('disabled', true);
            $('#x_Details').val(null);
        }
    }
    toggleInputVisibility($('#x__Type').select2('data')[0].id);
    $('#x__Type').on('select2:select', function (e) {
        const value = e.params.data.id;
        toggleInputVisibility(value);
    });

    // AUTO SAVE WHEN MOVING FROM THIS TAB
    $(window).on('beforeunload', function(event) {
        if (!isChangeTabApproved && window[formID].modified) {
            event.preventDefault();
            event.returnValue = '';
            return '';
        }
    });
    $("#btn-proceed").click(function() {
        isChangeTabApproved = true;
        const targetUrlRelative = $(this).attr('target-url-relative');
        $('#approve-modal-dialog').modal('hide');
        proceedToLink(targetUrlRelative);
    });
    $('ul.nav.nav-tabs li.nav-item a.nav-link').on('click', function(event) {
        event.preventDefault();
        const targetUrlRelative = $(this).attr('href');
        if (window[formID].modified) {
            const validateAddEntryResult = validateAddEntry({ isAllEmptyAllowed: true });
            if (validateAddEntryResult === 'valid') {
                $('#loading-modal-dialog').modal('show');
                addEntry({ redirectUrlWhenSuccess: targetUrlRelative });
            } else if (validateAddEntryResult === 'empty') {
                isChangeTabApproved = true;
                proceedToLink(targetUrlRelative);
            } else if (validateAddEntryResult === 'invalid') {
                scrollToFirstInvalidInput();
                $('#btn-proceed').attr('target-url-relative', targetUrlRelative);
                $('#proceed-modal-dialog').modal('show');
            }
        } else {
            isChangeTabApproved = true;
            proceedToLink(targetUrlRelative);
        }
    });
    function proceedToLink(targetUrlRelative) {
        const baseUrl = new URL(window.location.href).origin;
        const targetUrl = new URL(baseUrl + targetUrlRelative);
        window.location.href = targetUrl.href;
    }
    function scrollToFirstInvalidInput() {
        const invalidInput = $("input.is-invalid:first");
        if (invalidInput.length > 0) { // Check if an invalid input is found
            const offset = invalidInput.offset().top; // Calculate the offset of the invalid input element from the top of the page
            const windowHeight = $(window).height(); // Calculate the height of the viewport
            const scrollPosition = offset - (windowHeight / 2); // Calculate the scroll position to center the invalid input element
            $("html, body").animate({ // Animate the scroll to the center position
                scrollTop: scrollPosition
            }, 1000); // Adjust the duration as needed (in milliseconds)
        }
    }
    function addEntry({ redirectUrlWhenSuccess }) {
        isChangeTabApproved = true;
        let formData = $(`form#${formID}`).serialize();
        $('input[type="checkbox"]').each(function() {
            // Jika checkbox tidak dicentang dan tidak ada di hasil serialize(),
            // tambahkan nilai 0 ke hasil serialize()
            if (!this.checked && formData.indexOf(this.name) === -1) {
                formData += '&' + this.name + '=0';
            }
        });
        $.ajax({
            url: addEntryUrl,
            type: 'POST',
            data: formData,
           success: function(res) {
                const $errorDiv = $(res).find('div.ew-error'); // res is a string containing html document
                $('#loading-modal-dialog').modal('hide');
                if ($errorDiv.length > 0) {
                    ew.showToast($errorDiv.text());
                } else {
                    proceedToLink(redirectUrlWhenSuccess);
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                $('#loading-modal-dialog').modal('hide');
                isChangeTabApproved = false;
                ew.showToast(errorThrown);
            }
        });
    }
    function validateAddEntry({ isAllEmptyAllowed }) {
        let formErrorCount = 0;
        let formEmptyCount = 0;
        let isNotEmpty = true;
        function validateRequiredField(fieldName) {
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (fieldValue === '' || fieldValue === null) {
                return false;
            } else {
                return true;
            }
        }
        function validateDateField(fieldName) {
            const errorMessage = (selectedLanguage.id === 'en-US') ? 'Incorrect date (dd MMM yyyy)' : 'Tanggal tidak benar (dd MMM yyyy)';
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            const dateParts = fieldValue.split(' ');
            const day = parseInt(dateParts[0], 10);
            const monthNamesEnglish = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            const monthNamesIndonesian = ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Agu', 'Sep', 'Okt', 'Nov', 'Des'];
            const month = (selectedLanguage.id === 'en-US') ? monthNamesEnglish.indexOf(dateParts[1]) : monthNamesIndonesian.indexOf(dateParts[1]);
            const year = parseInt(dateParts[2], 10);
            let valid = false;
            if (year >= 1900 && year <= 9999 && month >= 0 && day >= 1 && day <= 31) {
                switch (month) {
                    case 1: // February
                        // Check for leap year
                        valid = day <= (((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) ? 29 : 28);
                        break;
                    case 3: // April
                    case 5: // June
                    case 8: // September
                    case 10: // November
                        valid = day <= 30;
                        break;
                    default:
                        valid = true;
                        break;
                }
            }
            if (!valid) {
                window[formID].fields[fieldName].addError({ custom: errorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessage });
                return false;
            } else {
                return true;
            }
        }
        function validateFieldWithRegex(fieldName, errorMessage, regex) {
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (!regex.test(fieldValue)) {  
                window[formID].fields[fieldName].addError({ custom: errorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessage });
                return false;
            } else {
                return true;
            }
        }
        function displayRequiredFieldError(fieldName) {
            const errorMessage = (selectedLanguage.id === 'en-US') ? "Please enter required field" : "Masukkan input yang dibutuhkan";
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldCaption = $(`label[for=${fieldNameWithPrefix}]`).text();
            const errorMessageWithFieldName = `${errorMessage} - ${fieldCaption}`;
            window[formID].fields[fieldName].addError({ custom: errorMessageWithFieldName });
            window[formID].fields[fieldName].updateFeedback();
            window[formID].addError(fieldName, { custom: errorMessageWithFieldName });
        }
        const noDigitsRegex = /^[^0-9]+$/;
        const noDigitsRegexErrorMessage = (selectedLanguage.id === 'en-US') ? "Must not contain digits" : "Tidak boleh mengandung angka";
        isNotEmpty = validateRequiredField("_Type");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            isNotEmpty = validateRequiredField("VesselName");
            if (!isNotEmpty) {
                formEmptyCount += 1;
            }
            isNotEmpty = validateRequiredField("DateOccurence");
            if (!isNotEmpty) {
                formEmptyCount += 1;
            }
            isNotEmpty = validateRequiredField("PlaceOccurence");
            if (!isNotEmpty) {
                formEmptyCount += 1;
            }
            isNotEmpty = validateRequiredField("PeriodOfDisability");
            if (!isNotEmpty) {
                formEmptyCount += 1;
            }
            isNotEmpty = validateRequiredField("PresentCondition");
            if (!isNotEmpty) {
                formEmptyCount += 1;
            }
            isNotEmpty = validateRequiredField("Treatment");
            if (!isNotEmpty) {
                formEmptyCount += 1;
            }
            isNotEmpty = validateRequiredField("Details");
            if (!isNotEmpty) {
                formEmptyCount += 1;
            }
            if (formEmptyCount === 8) {
                return 'empty';
            } else {
                displayRequiredFieldError("_Type");
            }
        } else {
            const typeFieldValue = $("#x__Type").val();
            if (typeFieldValue === 'Signed Off Due To Medical Reasons') {
                isNotEmpty = validateRequiredField("VesselName");
                if (!isNotEmpty) {
                    formErrorCount += 1;
                    displayRequiredFieldError("VesselName");
                }
                isNotEmpty = validateRequiredField("DateOccurence");
                if (!isNotEmpty) {
                    formErrorCount += 1;
                    displayRequiredFieldError("DateOccurence");
                } else {
                    formErrorCount += validateDateField("DateOccurence") ? 0 : 1;
                }
                isNotEmpty = validateRequiredField("PlaceOccurence");
                if (!isNotEmpty) {
                    formErrorCount += 1;
                    displayRequiredFieldError("PlaceOccurence");
                } else {
                    formErrorCount += validateFieldWithRegex("PlaceOccurence",  noDigitsRegexErrorMessage, noDigitsRegex) ? 0 : 1;
                }
                isNotEmpty = validateRequiredField("Details");
                if (!isNotEmpty) {
                    formErrorCount += 1;
                    displayRequiredFieldError("Details");
                }
            } else if (typeFieldValue === 'Medical Operation') {
                isNotEmpty = validateRequiredField("DateOccurence");
                if (!isNotEmpty) {
                    formErrorCount += 1;
                    displayRequiredFieldError("DateOccurence");
                } else {
                    formErrorCount += validateDateField("DateOccurence") ? 0 : 1;
                }
                isNotEmpty = validateRequiredField("PeriodOfDisability");
                if (!isNotEmpty) {
                    formErrorCount += 1;
                    displayRequiredFieldError("PeriodOfDisability");
                }
                isNotEmpty = validateRequiredField("PresentCondition");
                if (!isNotEmpty) {
                    formErrorCount += 1;
                    displayRequiredFieldError("PresentCondition");
                }
                isNotEmpty = validateRequiredField("Details");
                if (!isNotEmpty) {
                    formErrorCount += 1;
                    displayRequiredFieldError("Details");
                }
            } else if (typeFieldValue === 'Has Illness Or Accident Consulted To Doctor') {
                isNotEmpty = validateRequiredField("DateOccurence");
                if (!isNotEmpty) {
                    formErrorCount += 1;
                    displayRequiredFieldError("DateOccurence");
                } else {
                    formErrorCount += validateDateField("DateOccurence") ? 0 : 1;
                }
                isNotEmpty = validateRequiredField("Treatment");
                if (!isNotEmpty) {
                    formErrorCount += 1;
                    displayRequiredFieldError("Treatment");
                }
                isNotEmpty = validateRequiredField("Details");
                if (!isNotEmpty) {
                    formErrorCount += 1;
                    displayRequiredFieldError("Details");
                }
            } else if (typeFieldValue === 'Health Or Disability Problem') {
                isNotEmpty = validateRequiredField("Details");
                if (!isNotEmpty) {
                    formErrorCount += 1;
                    displayRequiredFieldError("Details");
                }
            }
        }
        if (formErrorCount > 0) {
            return 'invalid';
        } else {
            return 'valid';
        }
    }
});
</script>
