@{
    // View
    View = this;

    // Check action result
    if (crewGeneralDataForAdminViewModeView.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!crewGeneralDataForAdminViewModeView.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
@if (!crewGeneralDataForAdminViewModeView.IsExport()) {
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
}
@if (!crewGeneralDataForAdminViewModeView.IsExport()) {
<div class="btn-toolbar ew-toolbar">
    @crewGeneralDataForAdminViewModeView.ExportOptions.RenderBody()
    @crewGeneralDataForAdminViewModeView.OtherOptions.RenderBody()
</div>
}
@crewGeneralDataForAdminViewModeView.ShowPageHeader()
@crewGeneralDataForAdminViewModeView.ShowMessages()
<main class="view">
<form name="fCrewGeneralDataForAdminViewModeview" id="fCrewGeneralDataForAdminViewModeview" class="ew-form ew-view-form overlay-wrapper" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (!crewGeneralDataForAdminViewModeView.IsExport()) {
<script>
var currentTable = @Html.Raw(ConvertToJson(crewGeneralDataForAdminViewModeView.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { CrewGeneralDataForAdminViewMode: currentTable } });
var currentPageID = ew.PAGE_ID = "view";
var currentForm;
var fCrewGeneralDataForAdminViewModeview;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fCrewGeneralDataForAdminViewModeview")
        .setPageId("view")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
}
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="modal" value="@ConvertToInt(crewGeneralDataForAdminViewModeView.IsModal)">
<table class="@(crewGeneralDataForAdminViewModeView.TableClass)">
@if (crewGeneralDataForAdminViewModeView.ForeignVisaHasBeenDenied.Visible) { // crewGeneralDataForAdminViewModeView.ForeignVisaHasBeenDenied.Visible (begin)
    <tr id="r_ForeignVisaHasBeenDenied" @Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaHasBeenDenied.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_ForeignVisaHasBeenDenied"><template id="tpc_CrewGeneralDataForAdminViewMode_ForeignVisaHasBeenDenied">@Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaHasBeenDenied.Caption)</template></span></td>
        <td data-name="ForeignVisaHasBeenDenied" @Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaHasBeenDenied.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_ForeignVisaHasBeenDenied"><span id="el_CrewGeneralDataForAdminViewMode_ForeignVisaHasBeenDenied">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaHasBeenDenied.ViewAttributes)>
<div class="form-check d-inline-block">
    <input type="checkbox" id="x_ForeignVisaHasBeenDenied_@(crewGeneralDataForAdminViewModeView.RowCount)" class="form-check-input" value="@(crewGeneralDataForAdminViewModeView.ForeignVisaHasBeenDenied.GetViewValue())" disabled checked="@(ConvertToBool(crewGeneralDataForAdminViewModeView.ForeignVisaHasBeenDenied.CurrentValue))">
    <label class="form-check-label" for="x_ForeignVisaHasBeenDenied_@(crewGeneralDataForAdminViewModeView.RowCount)"></label>
</div></span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.ForeignVisaHasBeenDenied.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.ForeignVisaDenied_CountryID.Visible) { // crewGeneralDataForAdminViewModeView.ForeignVisaDenied_CountryID.Visible (begin)
    <tr id="r_ForeignVisaDenied_CountryID" @Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaDenied_CountryID.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_ForeignVisaDenied_CountryID"><template id="tpc_CrewGeneralDataForAdminViewMode_ForeignVisaDenied_CountryID">@Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaDenied_CountryID.Caption)</template></span></td>
        <td data-name="ForeignVisaDenied_CountryID" @Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaDenied_CountryID.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_ForeignVisaDenied_CountryID"><span id="el_CrewGeneralDataForAdminViewMode_ForeignVisaDenied_CountryID">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaDenied_CountryID.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaDenied_CountryID.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.ForeignVisaDenied_CountryID.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.ForeignVisaDeniedReason.Visible) { // crewGeneralDataForAdminViewModeView.ForeignVisaDeniedReason.Visible (begin)
    <tr id="r_ForeignVisaDeniedReason" @Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaDeniedReason.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_ForeignVisaDeniedReason"><template id="tpc_CrewGeneralDataForAdminViewMode_ForeignVisaDeniedReason">@Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaDeniedReason.Caption)</template></span></td>
        <td data-name="ForeignVisaDeniedReason" @Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaDeniedReason.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_ForeignVisaDeniedReason"><span id="el_CrewGeneralDataForAdminViewMode_ForeignVisaDeniedReason">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaDeniedReason.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaDeniedReason.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.ForeignVisaDeniedReason.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiry.Visible) { // crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiry.Visible (begin)
    <tr id="r_HasMaritimeAccidentOrCourtOfEnquiry" @Html.Raw(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiry.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_HasMaritimeAccidentOrCourtOfEnquiry"><template id="tpc_CrewGeneralDataForAdminViewMode_HasMaritimeAccidentOrCourtOfEnquiry">@Html.Raw(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiry.Caption)</template></span></td>
        <td data-name="HasMaritimeAccidentOrCourtOfEnquiry" @Html.Raw(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiry.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_HasMaritimeAccidentOrCourtOfEnquiry"><span id="el_CrewGeneralDataForAdminViewMode_HasMaritimeAccidentOrCourtOfEnquiry">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiry.ViewAttributes)>
<div class="form-check d-inline-block">
    <input type="checkbox" id="x_HasMaritimeAccidentOrCourtOfEnquiry_@(crewGeneralDataForAdminViewModeView.RowCount)" class="form-check-input" value="@(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiry.GetViewValue())" disabled checked="@(ConvertToBool(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiry.CurrentValue))">
    <label class="form-check-label" for="x_HasMaritimeAccidentOrCourtOfEnquiry_@(crewGeneralDataForAdminViewModeView.RowCount)"></label>
</div></span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiry.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiryDetails.Visible) { // crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiryDetails.Visible (begin)
    <tr id="r_HasMaritimeAccidentOrCourtOfEnquiryDetails" @Html.Raw(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiryDetails.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_HasMaritimeAccidentOrCourtOfEnquiryDetails"><template id="tpc_CrewGeneralDataForAdminViewMode_HasMaritimeAccidentOrCourtOfEnquiryDetails">@Html.Raw(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiryDetails.Caption)</template></span></td>
        <td data-name="HasMaritimeAccidentOrCourtOfEnquiryDetails" @Html.Raw(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiryDetails.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_HasMaritimeAccidentOrCourtOfEnquiryDetails"><span id="el_CrewGeneralDataForAdminViewMode_HasMaritimeAccidentOrCourtOfEnquiryDetails">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiryDetails.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiryDetails.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiryDetails.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.Reference1CompanyName.Visible) { // crewGeneralDataForAdminViewModeView.Reference1CompanyName.Visible (begin)
    <tr id="r_Reference1CompanyName" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyName.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_Reference1CompanyName"><template id="tpc_CrewGeneralDataForAdminViewMode_Reference1CompanyName">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyName.Caption)</template></span></td>
        <td data-name="Reference1CompanyName" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyName.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_Reference1CompanyName"><span id="el_CrewGeneralDataForAdminViewMode_Reference1CompanyName">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyName.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyName.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.Reference1CompanyName.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.Reference1ContactPersonName.Visible) { // crewGeneralDataForAdminViewModeView.Reference1ContactPersonName.Visible (begin)
    <tr id="r_Reference1ContactPersonName" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1ContactPersonName.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_Reference1ContactPersonName"><template id="tpc_CrewGeneralDataForAdminViewMode_Reference1ContactPersonName">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1ContactPersonName.Caption)</template></span></td>
        <td data-name="Reference1ContactPersonName" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1ContactPersonName.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_Reference1ContactPersonName"><span id="el_CrewGeneralDataForAdminViewMode_Reference1ContactPersonName">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1ContactPersonName.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1ContactPersonName.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.Reference1ContactPersonName.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.Reference1CompanyAddress.Visible) { // crewGeneralDataForAdminViewModeView.Reference1CompanyAddress.Visible (begin)
    <tr id="r_Reference1CompanyAddress" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyAddress.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_Reference1CompanyAddress"><template id="tpc_CrewGeneralDataForAdminViewMode_Reference1CompanyAddress">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyAddress.Caption)</template></span></td>
        <td data-name="Reference1CompanyAddress" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyAddress.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_Reference1CompanyAddress"><span id="el_CrewGeneralDataForAdminViewMode_Reference1CompanyAddress">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyAddress.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyAddress.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.Reference1CompanyAddress.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.Reference1CompanyCountryID.Visible) { // crewGeneralDataForAdminViewModeView.Reference1CompanyCountryID.Visible (begin)
    <tr id="r_Reference1CompanyCountryID" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyCountryID.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_Reference1CompanyCountryID"><template id="tpc_CrewGeneralDataForAdminViewMode_Reference1CompanyCountryID">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyCountryID.Caption)</template></span></td>
        <td data-name="Reference1CompanyCountryID" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyCountryID.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_Reference1CompanyCountryID"><span id="el_CrewGeneralDataForAdminViewMode_Reference1CompanyCountryID">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyCountryID.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyCountryID.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.Reference1CompanyCountryID.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.Reference1CompanyTelephone.Visible) { // crewGeneralDataForAdminViewModeView.Reference1CompanyTelephone.Visible (begin)
    <tr id="r_Reference1CompanyTelephone" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyTelephone.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_Reference1CompanyTelephone"><template id="tpc_CrewGeneralDataForAdminViewMode_Reference1CompanyTelephone">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyTelephone.Caption)</template></span></td>
        <td data-name="Reference1CompanyTelephone" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyTelephone.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_Reference1CompanyTelephone"><span id="el_CrewGeneralDataForAdminViewMode_Reference1CompanyTelephone">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyTelephone.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyTelephone.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.Reference1CompanyTelephone.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.Reference2CompanyName.Visible) { // crewGeneralDataForAdminViewModeView.Reference2CompanyName.Visible (begin)
    <tr id="r_Reference2CompanyName" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyName.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_Reference2CompanyName"><template id="tpc_CrewGeneralDataForAdminViewMode_Reference2CompanyName">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyName.Caption)</template></span></td>
        <td data-name="Reference2CompanyName" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyName.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_Reference2CompanyName"><span id="el_CrewGeneralDataForAdminViewMode_Reference2CompanyName">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyName.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyName.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.Reference2CompanyName.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.Reference2ContactPersonName.Visible) { // crewGeneralDataForAdminViewModeView.Reference2ContactPersonName.Visible (begin)
    <tr id="r_Reference2ContactPersonName" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2ContactPersonName.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_Reference2ContactPersonName"><template id="tpc_CrewGeneralDataForAdminViewMode_Reference2ContactPersonName">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2ContactPersonName.Caption)</template></span></td>
        <td data-name="Reference2ContactPersonName" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2ContactPersonName.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_Reference2ContactPersonName"><span id="el_CrewGeneralDataForAdminViewMode_Reference2ContactPersonName">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2ContactPersonName.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2ContactPersonName.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.Reference2ContactPersonName.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.Reference2CompanyAddress.Visible) { // crewGeneralDataForAdminViewModeView.Reference2CompanyAddress.Visible (begin)
    <tr id="r_Reference2CompanyAddress" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyAddress.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_Reference2CompanyAddress"><template id="tpc_CrewGeneralDataForAdminViewMode_Reference2CompanyAddress">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyAddress.Caption)</template></span></td>
        <td data-name="Reference2CompanyAddress" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyAddress.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_Reference2CompanyAddress"><span id="el_CrewGeneralDataForAdminViewMode_Reference2CompanyAddress">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyAddress.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyAddress.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.Reference2CompanyAddress.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.Reference2CompanyCountryID.Visible) { // crewGeneralDataForAdminViewModeView.Reference2CompanyCountryID.Visible (begin)
    <tr id="r_Reference2CompanyCountryID" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyCountryID.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_Reference2CompanyCountryID"><template id="tpc_CrewGeneralDataForAdminViewMode_Reference2CompanyCountryID">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyCountryID.Caption)</template></span></td>
        <td data-name="Reference2CompanyCountryID" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyCountryID.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_Reference2CompanyCountryID"><span id="el_CrewGeneralDataForAdminViewMode_Reference2CompanyCountryID">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyCountryID.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyCountryID.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.Reference2CompanyCountryID.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.Reference2CompanyTelephone.Visible) { // crewGeneralDataForAdminViewModeView.Reference2CompanyTelephone.Visible (begin)
    <tr id="r_Reference2CompanyTelephone" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyTelephone.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_Reference2CompanyTelephone"><template id="tpc_CrewGeneralDataForAdminViewMode_Reference2CompanyTelephone">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyTelephone.Caption)</template></span></td>
        <td data-name="Reference2CompanyTelephone" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyTelephone.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_Reference2CompanyTelephone"><span id="el_CrewGeneralDataForAdminViewMode_Reference2CompanyTelephone">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyTelephone.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyTelephone.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.Reference2CompanyTelephone.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.EmployeeStatus.Visible) { // crewGeneralDataForAdminViewModeView.EmployeeStatus.Visible (begin)
    <tr id="r_EmployeeStatus" @Html.Raw(crewGeneralDataForAdminViewModeView.EmployeeStatus.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_EmployeeStatus"><template id="tpc_CrewGeneralDataForAdminViewMode_EmployeeStatus">@Html.Raw(crewGeneralDataForAdminViewModeView.EmployeeStatus.Caption)</template></span></td>
        <td data-name="EmployeeStatus" @Html.Raw(crewGeneralDataForAdminViewModeView.EmployeeStatus.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_EmployeeStatus"><span id="el_CrewGeneralDataForAdminViewMode_EmployeeStatus">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.EmployeeStatus.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.EmployeeStatus.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.EmployeeStatus.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.FormSubmittedDateTime.Visible) { // crewGeneralDataForAdminViewModeView.FormSubmittedDateTime.Visible (begin)
    <tr id="r_FormSubmittedDateTime" @Html.Raw(crewGeneralDataForAdminViewModeView.FormSubmittedDateTime.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_FormSubmittedDateTime"><template id="tpc_CrewGeneralDataForAdminViewMode_FormSubmittedDateTime">@Html.Raw(crewGeneralDataForAdminViewModeView.FormSubmittedDateTime.Caption)</template></span></td>
        <td data-name="FormSubmittedDateTime" @Html.Raw(crewGeneralDataForAdminViewModeView.FormSubmittedDateTime.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_FormSubmittedDateTime"><span id="el_CrewGeneralDataForAdminViewMode_FormSubmittedDateTime">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.FormSubmittedDateTime.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.FormSubmittedDateTime.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.FormSubmittedDateTime.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.LastUpdatedByUserID.Visible) { // crewGeneralDataForAdminViewModeView.LastUpdatedByUserID.Visible (begin)
    <tr id="r_LastUpdatedByUserID" @Html.Raw(crewGeneralDataForAdminViewModeView.LastUpdatedByUserID.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_LastUpdatedByUserID"><template id="tpc_CrewGeneralDataForAdminViewMode_LastUpdatedByUserID">@Html.Raw(crewGeneralDataForAdminViewModeView.LastUpdatedByUserID.Caption)</template></span></td>
        <td data-name="LastUpdatedByUserID" @Html.Raw(crewGeneralDataForAdminViewModeView.LastUpdatedByUserID.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_LastUpdatedByUserID"><span id="el_CrewGeneralDataForAdminViewMode_LastUpdatedByUserID">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.LastUpdatedByUserID.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.LastUpdatedByUserID.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.LastUpdatedByUserID.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.LastUpdatedDateTime.Visible) { // crewGeneralDataForAdminViewModeView.LastUpdatedDateTime.Visible (begin)
    <tr id="r_LastUpdatedDateTime" @Html.Raw(crewGeneralDataForAdminViewModeView.LastUpdatedDateTime.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_LastUpdatedDateTime"><template id="tpc_CrewGeneralDataForAdminViewMode_LastUpdatedDateTime">@Html.Raw(crewGeneralDataForAdminViewModeView.LastUpdatedDateTime.Caption)</template></span></td>
        <td data-name="LastUpdatedDateTime" @Html.Raw(crewGeneralDataForAdminViewModeView.LastUpdatedDateTime.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_LastUpdatedDateTime"><span id="el_CrewGeneralDataForAdminViewMode_LastUpdatedDateTime">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.LastUpdatedDateTime.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.LastUpdatedDateTime.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.LastUpdatedDateTime.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.Reference1CompanyTelephoneCode_CountryID.Visible) { // crewGeneralDataForAdminViewModeView.Reference1CompanyTelephoneCode_CountryID.Visible (begin)
    <tr id="r_Reference1CompanyTelephoneCode_CountryID" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyTelephoneCode_CountryID.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_Reference1CompanyTelephoneCode_CountryID"><template id="tpc_CrewGeneralDataForAdminViewMode_Reference1CompanyTelephoneCode_CountryID">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyTelephoneCode_CountryID.Caption)</template></span></td>
        <td data-name="Reference1CompanyTelephoneCode_CountryID" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyTelephoneCode_CountryID.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_Reference1CompanyTelephoneCode_CountryID"><span id="el_CrewGeneralDataForAdminViewMode_Reference1CompanyTelephoneCode_CountryID">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyTelephoneCode_CountryID.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyTelephoneCode_CountryID.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.Reference1CompanyTelephoneCode_CountryID.Visible (end) *@
@if (crewGeneralDataForAdminViewModeView.Reference2CompanyTelephoneCode_CountryID.Visible) { // crewGeneralDataForAdminViewModeView.Reference2CompanyTelephoneCode_CountryID.Visible (begin)
    <tr id="r_Reference2CompanyTelephoneCode_CountryID" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyTelephoneCode_CountryID.RowAttributes)>
        <td class="@(crewGeneralDataForAdminViewModeView.TableLeftColumnClass)"><span id="elh_CrewGeneralDataForAdminViewMode_Reference2CompanyTelephoneCode_CountryID"><template id="tpc_CrewGeneralDataForAdminViewMode_Reference2CompanyTelephoneCode_CountryID">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyTelephoneCode_CountryID.Caption)</template></span></td>
        <td data-name="Reference2CompanyTelephoneCode_CountryID" @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyTelephoneCode_CountryID.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdminViewMode_Reference2CompanyTelephoneCode_CountryID"><span id="el_CrewGeneralDataForAdminViewMode_Reference2CompanyTelephoneCode_CountryID">
<span @Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyTelephoneCode_CountryID.ViewAttributes)>
@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyTelephoneCode_CountryID.GetViewValue())</span>
</span></template></td>
    </tr>
} @* crewGeneralDataForAdminViewModeView.Reference2CompanyTelephoneCode_CountryID.Visible (end) *@
</table>
<div id="tpd_CrewGeneralDataForAdminViewModeview" class="ew-custom-template"></div>
<template id="tpm_CrewGeneralDataForAdminViewModeview">
<div id="ct_crewGeneralDataForAdminViewModeView">    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewPersonalDataForAdminViewModeView")">
                @(CurrentLanguage == "en-US" ? "PERSONAL DATA" : "DATA PERSONAL")
            </a>     
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewDocumentForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "DOCUMENTS" : "DOKUMEN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewBankAccountForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "BANK ACCOUNT" : "REKENING BANK")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFamilyForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "FAMILY" : "KELUARGA")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFormalEducationForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "FORMAL EDUCATION" : "PENDIDIKAN FORMAL")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalCertificateForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "MEDICAL CERTIFICATE / TEST" : "SERTIFIKAT / TES MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewCertificateForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "CERTIFICATES AND QUALIFICATIONS" : "SERTIFIKAT DAN KUALIFIKASI")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewExperienceForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "SEA EXPERIENCE" : "PENGALAMAN BERLAYAR")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewAppraisalForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "APPRAISALS" : "PENILAIAN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalHistoryForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "MEDICAL HISTORY" : "RIWAYAT MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewGeneralDataForAdminViewModeView")">
                @(CurrentLanguage == "en-US" ? "GENERAL" : "UMUM")
            </a>
        </li>
    </ul>  
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_ForeignVisaHasBeenDenied" class="mb-2 row">
                <label for="x_ForeignVisaHasBeenDenied" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaHasBeenDenied.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdminViewMode_ForeignVisaHasBeenDenied"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_HasMaritimeAccidentOrCourtOfEnquiry" class="mb-2 row">
                <label for="x_HasMaritimeAccidentOrCourtOfEnquiry" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiry.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdminViewMode_HasMaritimeAccidentOrCourtOfEnquiry"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_ForeignVisaDenied_CountryID" class="mb-2 row">
                <label for="x_ForeignVisaDenied_CountryID" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaDenied_CountryID.Caption)</label>
                <div>
                    @{
                        if (string.IsNullOrEmpty(crewGeneralDataForAdminViewModeView.ForeignVisaDenied_CountryID.GetViewValue()))
                        {
                            @Html.Raw("&nbsp;");
                        }
                        else
                        {
                            <slot class="ew-slot" name="tpx_CrewGeneralDataForAdminViewMode_ForeignVisaDenied_CountryID"></slot>
                        }
                    }
                </div>
            </div>
            <div id="r_ForeignVisaDeniedReason" class="mb-2 row">
                <label for="x_ForeignVisaDeniedReason" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.ForeignVisaDeniedReason.Caption)</label>
                <div>
                    @{
                        if (string.IsNullOrEmpty(crewGeneralDataForAdminViewModeView.ForeignVisaDeniedReason.GetViewValue()))
                        {
                            @Html.Raw("&nbsp;");
                        }
                        else
                        {
                            <slot class="ew-slot" name="tpx_CrewGeneralDataForAdminViewMode_ForeignVisaDeniedReason"></slot>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_HasMaritimeAccidentOrCourtOfEnquiryDetails" class="mb-2 row">
                <label for="x_HasMaritimeAccidentOrCourtOfEnquiryDetails" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiryDetails.Caption)</label>
                <div>
                    @{
                        if (string.IsNullOrEmpty(crewGeneralDataForAdminViewModeView.HasMaritimeAccidentOrCourtOfEnquiryDetails.GetViewValue()))
                        {
                            @Html.Raw("&nbsp;");
                        }
                        else
                        {
                            <slot class="ew-slot" name="tpx_CrewGeneralDataForAdminViewMode_HasMaritimeAccidentOrCourtOfEnquiryDetails"></slot>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <h6 class="fw-bold">
                @(CurrentLanguage == "en-US" ? "Reference 1" : "Referensi 1")
            </h6>
            <div id="r_Reference1CompanyName" class="mb-2 row">
                <label for="x_Reference1CompanyName" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyName.Caption)</label>
                <div>
                    @{
                        if (string.IsNullOrEmpty(crewGeneralDataForAdminViewModeView.Reference1CompanyName.GetViewValue()))
                        {
                            @Html.Raw("&nbsp;");
                        }
                        else
                        {
                            <slot class="ew-slot" name="tpx_CrewGeneralDataForAdminViewMode_Reference1CompanyName"></slot>
                        }
                    }
                </div>
            </div>
            <div id="r_Reference1ContactPersonName" class="mb-2 row">
                <label for="x_Reference1ContactPersonName" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1ContactPersonName.Caption)</label>
                <div>
                    @{
                        if (string.IsNullOrEmpty(crewGeneralDataForAdminViewModeView.Reference1ContactPersonName.GetViewValue()))
                        {
                            @Html.Raw("&nbsp;");
                        }
                        else
                        {
                            <slot class="ew-slot" name="tpx_CrewGeneralDataForAdminViewMode_Reference1ContactPersonName"></slot>
                        }
                    }
                </div>
            </div>
            <div id="r_Reference1CompanyCountryID" class="mb-2 row">
                <label for="x_Reference1CompanyCountryID" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyCountryID.Caption)</label>
                <div>
                    @{
                        if (string.IsNullOrEmpty(crewGeneralDataForAdminViewModeView.Reference1CompanyCountryID.GetViewValue()))
                        {
                            @Html.Raw("&nbsp;");
                        }
                        else
                        {
                            <slot class="ew-slot" name="tpx_CrewGeneralDataForAdminViewMode_Reference1CompanyCountryID"></slot>
                        }
                    }
                </div>
            </div>
            <div id="r_Reference1CompanyTelephone" class="mb-2 row">
                <label for="x_Reference1CompanyTelephone" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyTelephone.Caption)</label>
                <div>
                    @{
                        var reference1CompanyTelephoneCodeWithCountryName = crewGeneralDataForAdminViewModeView.Reference1CompanyTelephoneCode_CountryID.GetViewValue();
                        if (string.IsNullOrEmpty(reference1CompanyTelephoneCodeWithCountryName))
                        {
                            @Html.Raw("&nbsp;");
                        }
                        else
                        {
                            string companyTelephoneCodePattern = @"^\+\d{1,3}";
                            Regex companyTelephoneCodeRegex = new Regex(companyTelephoneCodePattern);
                            Match reference1CompanyTelephoneCodeMatch = companyTelephoneCodeRegex.Match(reference1CompanyTelephoneCodeWithCountryName);
                            if (reference1CompanyTelephoneCodeMatch.Success)
                            {
                                string reference1CompanyTelephoneCodeOnly = reference1CompanyTelephoneCodeMatch.Value;
                                var reference1CompanyTelephoneNumber = crewGeneralDataForAdminViewModeView.Reference1CompanyTelephone.GetViewValue();
                                var reference1CompanyTelephone = "(" + reference1CompanyTelephoneCodeOnly + ")" + reference1CompanyTelephoneNumber;
                                @Html.Raw(reference1CompanyTelephone);
                            }
                            else
                            {
                                @Html.Raw("&nbsp;");
                            }
                        }
                    }
                </div>
            </div>
            <div id="r_Reference1CompanyAddress" class="mb-2 row">
                <label for="x_Reference1CompanyAddress" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference1CompanyAddress.Caption)</label>
                <div>
                    @{
                        if (string.IsNullOrEmpty(crewGeneralDataForAdminViewModeView.Reference1CompanyAddress.GetViewValue()))
                        {
                            @Html.Raw("&nbsp;");
                        }
                        else
                        {
                            <slot class="ew-slot" name="tpx_CrewGeneralDataForAdminViewMode_Reference1CompanyAddress"></slot>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <h6 class="fw-bold">
                @(CurrentLanguage == "en-US" ? "Reference 2" : "Referensi 2")
            </h6>
            <div id="r_Reference2CompanyName" class="mb-2 row">
                <label for="x_Reference2CompanyName" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyName.Caption)</label>
                <div>
                    @{
                        if (string.IsNullOrEmpty(crewGeneralDataForAdminViewModeView.Reference2CompanyName.GetViewValue()))
                        {
                            @Html.Raw("&nbsp;");
                        }
                        else
                        {
                            <slot class="ew-slot" name="tpx_CrewGeneralDataForAdminViewMode_Reference2CompanyName"></slot>
                        }
                    }
                </div>
            </div>
            <div id="r_Reference2ContactPersonName" class="mb-2 row">
                <label for="x_Reference2ContactPersonName" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2ContactPersonName.Caption)</label>
                <div>
                    @{
                        if (string.IsNullOrEmpty(crewGeneralDataForAdminViewModeView.Reference2ContactPersonName.GetViewValue()))
                        {
                            @Html.Raw("&nbsp;");
                        }
                        else
                        {
                            <slot class="ew-slot" name="tpx_CrewGeneralDataForAdminViewMode_Reference2ContactPersonName"></slot>
                        }
                    }
                </div>
            </div>
            <div id="r_Reference2CompanyCountryID" class="mb-2 row">
                <label for="x_Reference2CompanyCountryID" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyCountryID.Caption)</label>
                <div>
                    @{
                        if (string.IsNullOrEmpty(crewGeneralDataForAdminViewModeView.Reference2CompanyCountryID.GetViewValue()))
                        {
                            @Html.Raw("&nbsp;");
                        }
                        else
                        {
                            <slot class="ew-slot" name="tpx_CrewGeneralDataForAdminViewMode_Reference2CompanyCountryID"></slot>
                        }
                    }
                </div>
            </div>
            <div id="r_Reference2CompanyTelephone" class="mb-2 row">
                <label for="x_Reference2CompanyTelephone" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyTelephone.Caption)</label>
                <div>
                    @{
                        var reference2CompanyTelephoneCodeWithCountryName = crewGeneralDataForAdminViewModeView.Reference2CompanyTelephoneCode_CountryID.GetViewValue();
                        if (string.IsNullOrEmpty(reference2CompanyTelephoneCodeWithCountryName))
                        {
                            @Html.Raw("&nbsp;");
                        }
                        else
                        {
                            string companyTelephoneCodePattern = @"^\+\d{1,3}";
                            Regex companyTelephoneCodeRegex = new Regex(companyTelephoneCodePattern);
                            Match reference2CompanyTelephoneCodeMatch = companyTelephoneCodeRegex.Match(reference2CompanyTelephoneCodeWithCountryName);
                            if (reference2CompanyTelephoneCodeMatch.Success)
                            {
                                string reference2CompanyTelephoneCodeOnly = reference2CompanyTelephoneCodeMatch.Value;
                                var reference2CompanyTelephoneNumber = crewGeneralDataForAdminViewModeView.Reference2CompanyTelephone.GetViewValue();
                                var reference2CompanyTelephone = "(" + reference2CompanyTelephoneCodeOnly + ")" + reference2CompanyTelephoneNumber;
                                @Html.Raw(reference2CompanyTelephone);
                            }
                            else
                            {
                                @Html.Raw("&nbsp;");
                            }
                        }
                    }
                </div>
            </div>
            <div id="r_Reference2CompanyAddress" class="mb-2 row">
                <label for="x_Reference2CompanyAddress" class="col-form-label">@Html.Raw(crewGeneralDataForAdminViewModeView.Reference2CompanyAddress.Caption)</label>
                <div>
                    @{
                        if (string.IsNullOrEmpty(crewGeneralDataForAdminViewModeView.Reference2CompanyAddress.GetViewValue()))
                        {
                            @Html.Raw("&nbsp;");
                        }
                        else
                        {
                            <slot class="ew-slot" name="tpx_CrewGeneralDataForAdminViewMode_Reference2CompanyAddress"></slot>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
<div id="schedule-modal-dialog" aria-hidden="true" aria-modal="true" class="modal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="schedule-modal-dialog-title" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="schedule-modal-dialog-title" class="modal-title">
                    @(CurrentLanguage == "en-US" ? "Create Document Check Schedule" : "Tambah Jadwal Cek Dokumen")
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="add-schedule" class="ew-form ew-add-form" autocomplete="off">
                    <div id="r_DocumentCheckDateTime" class="row">
                        <label for="x_DocumentCheckDateTime" class="col-sm-4 col-form-label ew-label">
                            @(CurrentLanguage == "en-US" ? "Document Check Date Time" : "Tanggal Dan Jam Cek Dokumen")
                        </label>
                        <div class="col-sm-8">
                            <div>
                                <span id="el_DocumentCheckDateTime">
                                    <div class="input-group" id="datetimepicker_DocumentCheckDateTime" data-target-input="nearest" data-td-target-toggle="nearest">
                                        <input
                                            type="text"
                                            name="x_DocumentCheckDateTime"
                                            id="x_DocumentCheckDateTime"
                                            value=""
                                            placeholder="Document Check Date Time"
                                            data-format-pattern="yyyy-MM-dd HH:mm:sszzz"
                                            class="form-control tempus-dominus-input"
                                            data-target="#datetimepicker_DocumentCheckDateTime"
                                        />
                                    </div>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div id="r_DocumentCheckNotes" class="row">
                        <label for="x_DocumentCheckNotes" class="col-sm-4 col-form-label ew-label">
                            @(CurrentLanguage == "en-US" ? "Notes" : "Catatan")
                        </label>
                        <div class="col-sm-8">
                            <div>
                                <span id="el_DocumentCheckNotes">
                                    <textarea
                                        name="x_DocumentCheckNotes"
                                        id="x_DocumentCheckNotes"
                                        cols="50"
                                        rows="4"
                                        maxlength="255"
                                        placeholder=@(CurrentLanguage == "en-US" ? "Notes" : "Catatan")
                                        class="form-control"
                                    ></textarea>
                                </span>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary ew-btn" id="btn-add-schedule" type="button">
                    @(CurrentLanguage == "en-US" ? "Create Document Check Schedule" : "Tambah Jadwal Cek Dokumen")
                </button>
                <button class="btn btn-default ew-btn" id="btn-cancel-schedule" type="button" data-bs-dismiss="modal">
                    @(CurrentLanguage == "en-US" ? "Cancel" : "Batal")
                </button>
            </div>
        </div>
    </div>
</div>
<!-- REVISE MODAL DIALOG. FIXME! -->
<div id="revise-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="ew-modal-dialog-title" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="ew-modal-dialog-title" class="modal-title">
                    @(CurrentLanguage == "en-US" ? "Revise Crew Candidate" : "Tinjau Ulang Kandidat Kru")
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="revise-form" class="ew-form ew-add-form" autocomplete="off">
                    <div id="r_RevisedReason" class="row">
                        <label for="x_RevisedReason" class="col-sm-4 col-form-label ew-label">
                            @(CurrentLanguage == "en-US" ? "Revised Reason" : "Alasan Tinjau Ulang")
                        </label>
                        <div class="col-sm-8">
                            <div>
                                <span id="el_RevisedReason">
                                    <textarea
                                        name="x_RevisedReason"
                                        id="x_RevisedReason"
                                        cols="50"
                                        rows="4"
                                        maxlength="255"
                                        placeholder="Revised Reason"
                                        class="form-control"
                                    ></textarea>
                                </span>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-danger ew-btn" id="btn-revise" type="button">
                    @(CurrentLanguage == "en-US" ? "Revise" : "Tinjau Ulang")
                </button>
                <button class="btn btn-default ew-btn" id="btn-cancel" type="button" data-bs-dismiss="modal">
                    @(CurrentLanguage == "en-US" ? "Cancel" : "Batal")
                </button>
            </div>
        </div>
    </div>
</div>
<div id="reject-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="ew-modal-dialog-title" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="ew-modal-dialog-title" class="modal-title">
                    @(CurrentLanguage == "en-US" ? "Reject Crew Candidate" : "Tolak Kandidat Kru")
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="reject-form" class="ew-form ew-add-form" autocomplete="off">
                    <div id="r_RejectedReason" class="row">
                        <label for="x_RejectedReason" class="col-sm-4 col-form-label ew-label">
                            @(CurrentLanguage == "en-US" ? "Rejected Reason" : "Alasan Ditolak")
                        </label>
                        <div class="col-sm-8">
                            <div>
                                <span id="el_RejectedReason">
                                    <textarea
                                        name="x_RejectedReason"
                                        id="x_RejectedReason"
                                        cols="50"
                                        rows="4"
                                        maxlength="255"
                                        placeholder="Rejected Reason"
                                        class="form-control"
                                    ></textarea>
                                </span>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-danger ew-btn" id="btn-reject" type="button">
                    @(CurrentLanguage == "en-US" ? "Reject Crew Candidate" : "Tolak Kandidat Kru")
                </button>
                <button class="btn btn-default ew-btn" id="btn-cancel" type="button" data-bs-dismiss="modal">
                    @(CurrentLanguage == "en-US" ? "Cancel" : "Batal")
                </button>
            </div>
        </div>
    </div>
</div>
<div id="loading-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-md">
        <div class="modal-content">
            <div class="modal-body">
                <p class="text-center mb-0">
                    @(CurrentLanguage == "en-US" ? "Processing..." : "Sedang memproses...")
                </p>
            </div>
        </div>
    </div>
</div>
</div>
</template>
@{ crewGeneralDataForAdminViewModeView.CloseRecordset(); }
</form>
<script class="ew-apply-template">
loadjs.ready(ew.applyTemplateId, function() {
    var $ = jQuery;
    ew.templateData = { rows: @Html.Raw(ConvertToJson(crewGeneralDataForAdminViewModeView.Rows)) };
    ew.applyTemplate("tpd_CrewGeneralDataForAdminViewModeview", "tpm_CrewGeneralDataForAdminViewModeview", "CrewGeneralDataForAdminViewModeview", "@(crewGeneralDataForAdminViewModeView.Export)", "CrewGeneralDataForAdminViewMode", ew.templateData.rows[0], @(crewGeneralDataForAdminViewModeView.IsModal ? "true" : "false"));
    loadjs.done("customtemplate");
});
</script>
</main>
@crewGeneralDataForAdminViewModeView.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
@if (!crewGeneralDataForAdminViewModeView.IsExport()) {
<script>
loadjs.ready("load", function() {
    // Startup script
    // Write your table-specific startup script here
    // document.write("page loaded");
    const currentUrlObject = new URL(window.location.href);
    const urlQueryParams = new URLSearchParams(currentUrlObject.search);
    // get currently edited crew id from current url
    const currentlyEditedCrewID = parseInt(currentUrlObject.pathname.split('/').pop()); 
    const currentUrlWithoutEditView = currentUrlObject.href.replace(/Edit|View/g, "");

    // Iterate over each anchor element inside the nav-tabs
    $(".nav-tabs .nav-item a").each(function() {
        const href = $(this).attr("href");
        const hrefWithoutEditView = href.replace(/Edit|View/g, "");
        // Check if the href contains current page's url
        if (currentUrlWithoutEditView.includes(hrefWithoutEditView)) {
            // add class and attribute
            $(this).addClass("active");
            $(this).attr("aria-current", "page");
        }
        // Check if the current page is a one to many table page or not
        if (href.includes("ViewModeList")) {
            const newHref = href + "?crewID=" + currentlyEditedCrewID; // Add "?crewID=" and the currently edited crew ID to the href
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        } else if (href.includes("ViewModeView")) {
            const newHref = href + "/" + currentlyEditedCrewID; // Add "/" and the currently edited crew ID to the href
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        }
    });

    // Target the ol element that has breadcrumb class
    const $breadCrumbOl = $('.breadcrumb').first();

    // Delete the ol element that has breadcrumb class
    $breadCrumbOl.remove();
    $('div.btn-toolbar.ew-toolbar').remove();
    const selectedLanguage = ew.vars['languages']['languages'].filter(obj => obj.selected === true)[0];
    const parentUrl = ew.PATH_BASE;
    const adminAndEmployeeStatusApi = 'get-admin-and-employee-status';
    $.ajax({
        url: `${parentUrl}api/Registration/${adminAndEmployeeStatusApi}`,
        method: 'GET',
        data: {
            crewID: currentlyEditedCrewID
        },
        success: function(response) {
            if (response.success) {
                // Parse the data in the response
                const isAdmin = response.data.IsAdmin;
                const employeeStatus = response.data.EmployeeStatus;
                if (employeeStatus === 'Candidate - Draft') {
                    const editButton = $("<a></a>", { 
                        text: (selectedLanguage.id === 'en-US') ? "Edit" : "Ubah",
                        class: "btn btn-default ew-btn me-auto primary-black-clr gray-bg", 
                        id: "btn-edit",
                        name: "btn-edit",
                        href: `${parentUrl}CrewGeneralDataForAdminViewModeEdit/${currentlyEditedCrewID}`,
                    });
                    const backButton = $("<a></a>", { 
                        text: (selectedLanguage.id === 'en-US') ? "Back" : "Kembali",
                        class: "btn btn-default ew-btn primary-red-bg primary-white-clr", 
                        id: "btn-back",
                        name: "btn-back",
                        href: `${parentUrl}RegistrationList`,
                    });
                    const flexDiv = $("<div class='d-flex mb-3'></div>");
                    flexDiv.append(editButton);
                    if (isAdmin) {
                        flexDiv.append(backButton);
                    }
                    const buttonsDiv = $("<div class='row ew-buttons'></div>");
                    buttonsDiv.append(flexDiv);
                    $('form#fCrewGeneralDataForAdminViewModeview').append(buttonsDiv);
                    const errorMessage = urlQueryParams.get('errorMessage');
                    if (errorMessage !== null) {
                        const decodedErrorMessage = decodeURIComponent(errorMessage);
                        ew.showToast(decodedErrorMessage);
                        urlQueryParams.delete('errorMessage');
                        currentUrlObject.search = urlQueryParams.toString();
                        history.pushState(null, '', currentUrlObject);
                    }
                } else if (employeeStatus === 'Candidate - Agency Reviewed') {
                    const invokeScheduleModalButton = $('<button/>', {
                        'class': 'btn btn-default ew-btn primary-green-bg primary-white-clr',
                        'name': 'btn-invoke-schedule-modal',
                        'id': 'btn-invoke-schedule-modal',
                        'type': 'button',
                        'text': (selectedLanguage.id === 'en-US') ? 'Accept' : 'Terima'
                    });
                    const invokeReviseModalButton = $('<button/>', {
                        'class': 'btn btn-primary ew-btn ms-3 primary-white-clr',
                        'name': 'btn-invoke-revise-modal',
                        'id': 'btn-invoke-revise-modal',
                        'type': 'button', 
                        'text': (selectedLanguage.id === 'en-US') ? 'Revise' : 'Tinjau'
                    });
                    const invokeRejectModalButton = $('<button/>', {
                        'class': 'btn btn-danger ew-btn ms-3 me-auto primary-white-clr',
                        'name': 'btn-invoke-reject-modal',
                        'id': 'btn-invoke-reject-modal',
                        'type': 'button',
                        'text': (selectedLanguage.id === 'en-US') ? 'Reject' : 'Tolak'
                    });
                    const backButton = $("<a></a>", { 
                        text: (selectedLanguage.id === 'en-US') ? "Back" : "Kembali",
                        class: "btn btn-default ew-btn primary-black-clr gray-bg", 
                        id: "btn-back",
                        name: "btn-back",
                        href: `${parentUrl}VWaitingForPdeReviewList`,
                    });
                    const flexDiv = $("<div class='d-flex mb-3'></div>");
                    if (isAdmin) {
                        flexDiv.append(invokeScheduleModalButton);
                        flexDiv.append(invokeReviseModalButton);
                        flexDiv.append(invokeRejectModalButton);
                        flexDiv.append(backButton);
                    }
                    const buttonsDiv = $("<div class='row ew-buttons'></div>");
                    buttonsDiv.append(flexDiv);
                    $('form#fCrewGeneralDataForAdminViewModeview').append(buttonsDiv);
                    if (isAdmin) {
                        $('#btn-invoke-schedule-modal').click(function() {
                            $('#schedule-modal-dialog').modal('show');
                        });
                        $('#btn-invoke-revise-modal').click(function() {
                            $('#revise-modal-dialog').modal('show');
                        });
                        $('#btn-invoke-reject-modal').click(function() {
                            $('#reject-modal-dialog').modal('show');
                        });
                        $('#schedule-modal-dialog').on('hidden.bs.modal', function() {
                            // $('#x_DocumentCheckDateTime').val(null);
                        });
                        $('#revise-modal-dialog').on('hidden.bs.modal', function() {
                            $('#x_RevisedReason').val(null);
                        });
                        $('#reject-modal-dialog').on('hidden.bs.modal', function() {
                            $('#x_RejectedReason').val(null);
                        });

                        // initialize date time picker
                        const format = "dd MMM yyyy HH:mm:00zzz";
                        const options = {
                            localization: {
                                locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                                hourCycle: format.match(/H/) ? "h24" : "h12",
                                format,
                                ...ew.language.phrase("datetimepicker")
                            },
                            display: {
                                icons: {
                                    previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                                    next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                                },
                                components: {
                                    hours: !!format.match(/h/i),
                                    minutes: !!format.match(/m/),
                                    seconds: !!format.match(/s/i)
                                },
                                theme: ew.isDark() ? "dark" : "auto"
                            },
                            defaultDate: new Date(new Date().setHours(8, 0, 0)).toISOString(),
                        };
                        ew.createDateTimePicker("add-schedule", "x_DocumentCheckDateTime", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
                        $('#x_DocumentCheckDateTime').val(replaceTimezoneOffset($('#x_DocumentCheckDateTime').val(), formatTimezoneOffset(new Date().getTimezoneOffset())));

                        // Listen for input changes
                        $('#x_DocumentCheckDateTime').on('change.td', function() {
                            const timezoneOffset = new Date().getTimezoneOffset();
                            const formattedTimezoneOffset = formatTimezoneOffset(timezoneOffset);
                            const currentValue = $(this).val();
                            const newValue = replaceTimezoneOffset(currentValue, formattedTimezoneOffset);
                            $(this).val(newValue);
                        });

                        // Format timezone offset as needed
                        function formatTimezoneOffset(offset) {
                            const hours = Math.floor(Math.abs(offset) / 60);
                            const minutes = Math.abs(offset) % 60;
                            const sign = offset < 0 ? '+' : '-';
                            const formattedOffset = sign + addLeadingZero(hours) + ':' + addLeadingZero(minutes);
                            return ' GMT ' + formattedOffset;
                        }

                        // Helper function to add leading zero to single-digit numbers
                        function addLeadingZero(num) {
                            return num < 10 ? '0' + num : num;
                        }

                        // Replace "zzz" with the formatted timezone offset
                        function replaceTimezoneOffset(str, offset) {
                            return str.replace('zzz', offset);
                        }
                        function validateDateTime(dateTimeString) {
                            const errorMessage = (selectedLanguage.id === 'en-US') ? `Incorrect date (dd MMM yyyy HH:mm:ss GMT +/-HH:mm)` : `Tanggal tidak benar (dd MMM yyyy HH:mm:ss GMT +/-HH:mm)`;
                            const dateTimeRegex = /^\d{1,2} [A-Za-z]{3} \d{4} \d{1,2}:\d{2}:\d{2} GMT [+-]\d{1,2}:\d{2}$/;
                            if (!dateTimeRegex.test(dateTimeString)) {
                                ew.showToast(errorMessage);
                                return false;
                            }
                            const dateTimeParts = dateTimeString.split(' ');
                            const day = parseInt(dateTimeParts[0], 10);
                            const monthNamesEnglish = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                            const monthNamesIndonesian = ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Agu', 'Sep', 'Okt', 'Nov', 'Des'];
                            const month = (selectedLanguage.id === 'en-US') ? monthNamesEnglish.indexOf(dateTimeParts[1]) : monthNamesIndonesian.indexOf(dateTimeParts[1]);
                            const year = parseInt(dateTimeParts[2], 10);
                            let valid = false;
                            if (year >= 1900 && year <= 9999 && month >= 0 && day >= 1 && day <= 31) {
                                if (month === 1) {
                                    valid = day <= (((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) ? 29 : 28);
                                } else if (month === 3 || month === 5 || month === 8 || month === 10) {
                                    valid = day <= 30;
                                } else {
                                    valid = true;
                                }
                            }
                            const timeParts = dateTimeParts[3].split(':');
                            const hour = parseInt(timeParts[0], 10);
                            const minute = parseInt(timeParts[1], 10);
                            const second = parseInt(timeParts[2], 10);
                            if (valid) {
                                valid = (hour >= 0) && (hour <= 23) && (minute >= 0) && (minute <= 59) && (second >= 0) && (second <= 59);
                                if (valid) {
                                    const timeOffsetWithSign = dateTimeParts[5];
                                    const timeOffset = timeOffsetWithSign.substring(1);
                                    const timeOffsetParts = timeOffset.split(':');
                                    const timeOffsetHour = parseInt(timeOffsetParts[0], 10);
                                    const timeOffsetMinute = parseInt(timeOffsetParts[1], 10);
                                    valid = (timeOffsetHour >= 0) && (timeOffsetHour <= 23) && (timeOffsetMinute >= 0) && (timeOffsetMinute <= 59);
                                }
                            }
                            if (!valid) {
                                ew.showToast(errorMessage);
                            }
                            return valid;
                        }
                        const addDocumentCheckDateTimeApiUrl = "add-document-check-date-time";
                        $("#btn-add-schedule").click(function() {
                            const documentCheckDateTimeValue = $('#x_DocumentCheckDateTime').val();
                            const documentCheckDateTimeCaption = $(`label[for="x_DocumentCheckDateTime"]`).text();
                            if (documentCheckDateTimeValue == '') {
                                if (selectedLanguage.id === 'en-US') {
                                    ew.showToast(`Please enter required field - ${documentCheckDateTimeCaption}`);
                                } else {
                                    ew.showToast(`Masukkan input yang dibutuhkan - ${documentCheckDateTimeCaption}`);
                                }
                            } else {
                                if (validateDateTime(documentCheckDateTimeValue)) {
                                    $('#schedule-modal-dialog').modal('hide');
                                    $('#loading-modal-dialog').modal('show');
                                    const arrDataKey = [currentlyEditedCrewID];
                                    const notesValue = $('#x_DocumentCheckNotes').val();
                                    const notes = (notesValue !== '') ? notesValue : '';
                                    const documentCheckDateTimeRequest = {
                                        scheduleDateTime: documentCheckDateTimeValue.replace(' GMT ', ''),
                                        notes: notes,
                                        crewIDArray: JSON.stringify(arrDataKey),
                                    };
                                    $.ajax({
                                        method: "POST",
                                        url: `${parentUrl}api/Registration/${addDocumentCheckDateTimeApiUrl}`,
                                        data: JSON.stringify(documentCheckDateTimeRequest),
                                        contentType: "application/json",
                                        success: function(response) {
                                            if (response.success) {
                                                let successMessage = '';
                                                if (selectedLanguage.id === 'en-US') {
                                                    successMessage = `Add ${documentCheckDateTimeCaption} Successful`;
                                                } else {
                                                    successMessage = `Menambahkan ${documentCheckDateTimeCaption} Berhasil`;
                                                }
                                                const baseUrl = new URL(window.location.href).origin;
                                                const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}VWaitingForPdeReviewList`);
                                                const encodedSuccessMessage = encodeURIComponent(successMessage);
                                                const params = new URLSearchParams(targetUrl.search);
                                                params.set('successMessage', encodedSuccessMessage);
                                                targetUrl.search = params.toString();
                                                $('#loading-modal-dialog').modal('hide');
                                                window.location.href = targetUrl.href;
                                            } else {
                                                $('#loading-modal-dialog').modal('hide');
                                                const errorMessage = response.errorMessage;
                                                ew.showToast(errorMessage);
                                            }
                                        },
                                        error: function(xhr, textStatus, errorThrown) {
                                            $('#loading-modal-dialog').modal('hide');
                                            ew.showToast(errorThrown);
                                        }
                                    });
                                }
                            }
                        });
                        const rejectMultipleCrewApiUrl = "reject-multiple-crew";
                        $("#btn-reject").click(function() {
                            const rejectedReasonValue = $('#x_RejectedReason').val();
                            const rejectedReasonCaption = $(`label[for="x_RejectedReason"]`).text();
                            if (rejectedReasonValue == '') {
                                if (selectedLanguage.id === 'en-US') {
                                    ew.showToast(`Please enter required field - ${rejectedReasonCaption}`);
                                } else {
                                    ew.showToast(`Masukkan input yang dibutuhkan - ${rejectedReasonCaption}`);
                                }
                            } else {
                                $('#reject-modal-dialog').modal('hide');
                                $('#loading-modal-dialog').modal('show');
                                const arrDataKey = [currentlyEditedCrewID];
                                const rejectMultipleRequest = {
                                    rejectReason: rejectedReasonValue,
                                    crewIDArray: JSON.stringify(arrDataKey),
                                };
                                $.ajax({
                                    method: "POST",
                                    url: `${parentUrl}api/Registration/${rejectMultipleCrewApiUrl}`,
                                    data: JSON.stringify(rejectMultipleRequest),
                                    contentType: "application/json",
                                    success: function(response) {
                                        if (response.success) {
                                            let successMessage = '';
                                            if (selectedLanguage.id === 'en-US') {
                                                successMessage = `Add ${rejectedReasonCaption} Successful`;
                                            } else {
                                                successMessage = `Menambahkan ${rejectedReasonCaption} Berhasil`;
                                            }
                                            const baseUrl = new URL(window.location.href).origin;
                                            const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}VWaitingForPdeReviewList`);
                                            const encodedSuccessMessage = encodeURIComponent(successMessage);
                                            const params = new URLSearchParams(targetUrl.search);
                                            params.set('successMessage', encodedSuccessMessage);
                                            targetUrl.search = params.toString();
                                            $('#loading-modal-dialog').modal('hide');
                                            window.location.href = targetUrl.href;
                                        } else {
                                            $('#loading-modal-dialog').modal('hide');
                                            const errorMessage = response.errorMessage;
                                            ew.showToast(errorMessage);
                                        }
                                    },
                                    error: function(xhr, textStatus, errorThrown) {
                                        $('#loading-modal-dialog').modal('hide');
                                        ew.showToast(errorThrown);
                                    }
                                });
                            }
                        });
                        const reviseMultipleCrewApiUrl = "revise-multiple-crew";
                        $("#btn-revise").click(function() {
                            const revisedReasonValue = $('#x_RevisedReason').val();
                            const revisedReasonCaption = $(`label[for="x_RevisedReason"]`).text();
                            if(revisedReasonValue.trim() === '') {
                                if(selectedLanguage.id === 'en-US') {
                                    ew.showToast(`Please enter required field - ${revisedReasonCaption}`);
                                } else {
                                    ew.showToast(`Masukkan input yang dibutuhkan - ${revisedReasonCaption}`);
                                }
                            } else {
                                $('#revise-modal-dialog').modal('hide');
                                $('#loading-modal-dialog').modal('show');
                                const arrDataKey = [currentlyEditedCrewID];
                                const revisedMultipleCrewRequest = {
                                    revisedReason: revisedReasonValue,
                                    crewIDArray: JSON.stringify(arrDataKey)
                                };
                                $.ajax({
                                    method: "POST",
                                    url: `${parentUrl}api/Registration/${reviseMultipleCrewApiUrl}`,
                                    data: JSON.stringify(revisedMultipleCrewRequest),
                                    contentType: "application/json",
                                    success: function(response) {
                                        if(response.success) {
                                            let successMessage = '';
                                            if(selectedLanguage.id === 'en-US') {
                                                successMessage = `Add ${revisedReasonCaption} Successful`;
                                            } else {
                                                successMessage = `Menambahkan ${revisedReasonCaption} Berhasil`;
                                            }
                                            const baseUrl = new URL(window.location.href).origin;
                                            const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}VWaitingForPdeReviewList`);
                                            const encodedSuccessMessage = encodeURIComponent(successMessage);
                                            const params = new URLSearchParams(targetUrl.search);
                                            params.set('successMessage', encodedSuccessMessage);
                                            targetUrl.search = params.toString();
                                            $('#loading-modal-dialog').modal('hide');
                                            window.location.href = targetUrl.href;
                                        } else {
                                            $('#loading-modal-dialog').modal('hide');
                                            const errorMessage = response.errorMessage;
                                            ew.showToast(errorMessage);
                                        }  
                                    },
                                    error: function(xhr, textStatus, errorThrown) {
                                        $('#loading-modal-dialog').modal('hide');
                                        ew.showToast(errorThrown);
                                    }
                                });
                            }
                        });
                    }
                } else if (employeeStatus === 'Candidate - Submitted') {
                    const acceptByAgencyButton = $('<button/>', {
                        'class': 'btn btn-default ew-btn primary-green-bg primary-white-clr',
                        'name': 'btn-accept-by-agency',
                        'id': 'btn-accept-by-agency',
                        'type': 'button',
                        'text': (selectedLanguage.id === 'en-US') ? 'Accept' : 'Terima'
                    });
                    const invokeReviseModalButton = $('<button/>', {
                        'class': 'btn btn-primary ew-btn ms-3 primary-white-clr',
                        'name': 'btn-invoke-revise-modal',
                        'id': 'btn-invoke-revise-modal',
                        'type': 'button', 
                        'text': (selectedLanguage.id === 'en-US') ? 'Revise' : 'Tinjau'
                    });
                    const invokeRejectModalButton = $('<button/>', {
                        'class': 'btn btn-danger ew-btn ms-3 me-auto primary-white-clr',
                        'name': 'btn-invoke-reject-modal',
                        'id': 'btn-invoke-reject-modal',
                        'type': 'button',
                        'text': (selectedLanguage.id === 'en-US') ? 'Reject' : 'Tolak'
                    });
                    const backButton = $("<a></a>", { 
                        text: (selectedLanguage.id === 'en-US') ? "Back" : "Kembali",
                        class: "btn btn-default ew-btn primary-black-clr gray-bg", 
                        id: "btn-back",
                        name: "btn-back",
                        href: `${parentUrl}VWaitingForPdeReviewList`,
                    });
                    const flexDiv = $("<div class='d-flex mb-3'></div>");
                    if (isAdmin) {
                        flexDiv.append(acceptByAgencyButton);
                        flexDiv.append(invokeReviseModalButton);
                        flexDiv.append(invokeRejectModalButton);
                        flexDiv.append(backButton);
                    }
                    const buttonsDiv = $("<div class='row ew-buttons'></div>");
                    buttonsDiv.append(flexDiv);
                    $('form#fCrewGeneralDataForAdminViewModeview').append(buttonsDiv);
                    if (isAdmin) {
                        $('#btn-accept-by-agency').click(function() {
                            const confirmationMessage = (selectedLanguage.id === 'en-US') ? "Are you sure you want to accept the selected crew(s)?" : "Apakah Anda yakin untuk menerima kru yang telah dipilih?";
                            ew.prompt(confirmationMessage, result => {
                                if (result) {
                                    const acceptByAgencyUrl = "accept-by-agency";
                                    $('#loading-modal-dialog').modal('show');
                                    const arrDataKey = [currentlyEditedCrewID];
                                    const acceptByAgencyRequest = {
                                        crewIDArray: JSON.stringify(arrDataKey),
                                    };
                                    $.ajax({
                                        method: "POST",
                                        url: `${parentUrl}api/Registration/${acceptByAgencyUrl}`,
                                        data: JSON.stringify(acceptByAgencyRequest),
                                        contentType: "application/json",
                                        success: function(response) {
                                            if (response.success) {
                                                let successMessage = '';
                                                if (selectedLanguage.id === 'en-US') {
                                                    successMessage = `Accept Crew Successful`;
                                                } else {
                                                    successMessage = `Berhasil Menerima Kru`;
                                                }
                                                const baseUrl = new URL(window.location.href).origin;
                                                const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}WaitingForAgencyReviewList`);
                                                const encodedSuccessMessage = encodeURIComponent(successMessage);
                                                const params = new URLSearchParams(targetUrl.search);
                                                params.set('successMessage', encodedSuccessMessage);
                                                targetUrl.search = params.toString();
                                                $('#loading-modal-dialog').modal('hide');
                                                window.location.href = targetUrl.href;
                                            } else {
                                                $('#loading-modal-dialog').modal('hide');
                                                const errorMessage = response.errorMessage;
                                                ew.showToast(errorMessage);
                                            }
                                        },
                                        error: function(xhr, textStatus, errorThrown) {
                                            $('#loading-modal-dialog').modal('hide');
                                            ew.showToast(errorThrown);
                                        }
                                    });
                                }
                            });
                        });
                        $('#btn-invoke-revise-modal').click(function() {
                            $('#revise-modal-dialog').modal('show');
                        });
                        $('#btn-invoke-reject-modal').click(function() {
                            $('#reject-modal-dialog').modal('show');
                        });
                        $('#revise-modal-dialog').on('hidden.bs.modal', function() {
                            $('#x_RevisedReason').val(null);
                        });
                        $('#reject-modal-dialog').on('hidden.bs.modal', function() {
                            $('#x_RejectedReason').val(null);
                        });
                        const rejectMultipleCrewApiUrl = "reject-multiple-crew";
                        $("#btn-reject").click(function() {
                            const rejectedReasonValue = $('#x_RejectedReason').val();
                            const rejectedReasonCaption = $(`label[for="x_RejectedReason"]`).text();
                            if (rejectedReasonValue == '') {
                                if (selectedLanguage.id === 'en-US') {
                                    ew.showToast(`Please enter required field - ${rejectedReasonCaption}`);
                                } else {
                                    ew.showToast(`Masukkan input yang dibutuhkan - ${rejectedReasonCaption}`);
                                }
                            } else {
                                $('#reject-modal-dialog').modal('hide');
                                $('#loading-modal-dialog').modal('show');
                                const arrDataKey = [currentlyEditedCrewID];
                                const rejectMultipleRequest = {
                                    rejectReason: rejectedReasonValue,
                                    crewIDArray: JSON.stringify(arrDataKey),
                                };
                                $.ajax({
                                    method: "POST",
                                    url: `${parentUrl}api/Registration/${rejectMultipleCrewApiUrl}`,
                                    data: JSON.stringify(rejectMultipleRequest),
                                    contentType: "application/json",
                                    success: function(response) {
                                        if (response.success) {
                                            let successMessage = '';
                                            if (selectedLanguage.id === 'en-US') {
                                                successMessage = `Add ${rejectedReasonCaption} Successful`;
                                            } else {
                                                successMessage = `Menambahkan ${rejectedReasonCaption} Berhasil`;
                                            }
                                            const baseUrl = new URL(window.location.href).origin;
                                            const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}VWaitingForPdeReviewList`);
                                            const encodedSuccessMessage = encodeURIComponent(successMessage);
                                            const params = new URLSearchParams(targetUrl.search);
                                            params.set('successMessage', encodedSuccessMessage);
                                            targetUrl.search = params.toString();
                                            $('#loading-modal-dialog').modal('hide');
                                            window.location.href = targetUrl.href;
                                        } else {
                                            $('#loading-modal-dialog').modal('hide');
                                            const errorMessage = response.errorMessage;
                                            ew.showToast(errorMessage);
                                        }
                                    },
                                    error: function(xhr, textStatus, errorThrown) {
                                        $('#loading-modal-dialog').modal('hide');
                                        ew.showToast(errorThrown);
                                    }
                                });
                            }
                        });
                        const reviseMultipleCrewApiUrl = "revise-multiple-crew";
                        $("#btn-revise").click(function() {
                            const revisedReasonValue = $('#x_RevisedReason').val();
                            const revisedReasonCaption = $(`label[for="x_RevisedReason"]`).text();
                            if(revisedReasonValue.trim() === '') {
                                if(selectedLanguage.id === 'en-US') {
                                    ew.showToast(`Please enter required field - ${revisedReasonCaption}`);
                                } else {
                                    ew.showToast(`Masukkan input yang dibutuhkan - ${revisedReasonCaption}`);
                                }
                            } else {
                                $('#revise-modal-dialog').modal('hide');
                                $('#loading-modal-dialog').modal('show');
                                const arrDataKey = [currentlyEditedCrewID];
                                const revisedMultipleCrewRequest = {
                                    revisedReason: revisedReasonValue,
                                    crewIDArray: JSON.stringify(arrDataKey)
                                };
                                $.ajax({
                                    method: "POST",
                                    url: `${parentUrl}api/Registration/${reviseMultipleCrewApiUrl}`,
                                    data: JSON.stringify(revisedMultipleCrewRequest),
                                    contentType: "application/json",
                                    success: function(response) {
                                        if(response.success) {
                                            let successMessage = '';
                                            if(selectedLanguage.id === 'en-US') {
                                                successMessage = `Add ${revisedReasonCaption} Successful`;
                                            } else {
                                                successMessage = `Menambahkan ${revisedReasonCaption} Berhasil`;
                                            }
                                            const baseUrl = new URL(window.location.href).origin;
                                            const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}VWaitingForPdeReviewList`);
                                            const encodedSuccessMessage = encodeURIComponent(successMessage);
                                            const params = new URLSearchParams(targetUrl.search);
                                            params.set('successMessage', encodedSuccessMessage);
                                            targetUrl.search = params.toString();
                                            $('#loading-modal-dialog').modal('hide');
                                            window.location.href = targetUrl.href;
                                        } else {
                                            $('#loading-modal-dialog').modal('hide');
                                            const errorMessage = response.errorMessage;
                                            ew.showToast(errorMessage);
                                        }  
                                    },
                                    error: function(xhr, textStatus, errorThrown) {
                                        $('#loading-modal-dialog').modal('hide');
                                        ew.showToast(errorThrown);
                                    }
                                });
                            }
                        });
                    }
                }
            } else {
                // Handle the error
                ew.showToast(response.errorMessage);
            }
        },
        error: function(xhr, textStatus, errorThrown) {
            // Handle the error
            ew.showToast(errorThrown);
        }
    });

    // gmandayu: notification need to read.
    const getUnreadNotificationUrl = `${parentUrl}api/Notification/unread-notification`;
    function loadPage() {
        $.ajax({
            url: getUnreadNotificationUrl,
            method: 'GET',
            success: function(response) {
                const notificationIcon = document.querySelector('.nav-icon.fa-bell');
                if(response.success)
                {
                    notificationIcon.classList.add('animate');
                }
                else 
                {
                    notificationIcon.classList.remove('animate');
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                console.error('Kesalahan saat memuat notifikasi:', errorThrown);
            }
        });
    }
    $(document).ready(function() {
        loadPage();
    });
});
</script>
}
