@{
    // View
    View = this;

    // Check action result
    if (crewGeneralDataForAdminEdit.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!crewGeneralDataForAdminEdit.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@crewGeneralDataForAdminEdit.ShowPageHeader()
@crewGeneralDataForAdminEdit.ShowMessages()
<main class="edit">
<form name="fCrewGeneralDataForAdminedit" id="fCrewGeneralDataForAdminedit" class="@(crewGeneralDataForAdminEdit.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
<script>
var currentTable = @Html.Raw(ConvertToJson(crewGeneralDataForAdminEdit.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { CrewGeneralDataForAdmin: currentTable } });
var currentPageID = ew.PAGE_ID = "edit";
var currentForm;
var fCrewGeneralDataForAdminedit;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fCrewGeneralDataForAdminedit")
        .setPageId("edit")

        // Add fields
        .setFields([

            ["ForeignVisaHasBeenDenied", [fields.ForeignVisaHasBeenDenied.visible && fields.ForeignVisaHasBeenDenied.required ? ew.Validators.required(fields.ForeignVisaHasBeenDenied.caption) : null], fields.ForeignVisaHasBeenDenied.isInvalid],
            ["ForeignVisaDenied_CountryID", [fields.ForeignVisaDenied_CountryID.visible && fields.ForeignVisaDenied_CountryID.required ? ew.Validators.required(fields.ForeignVisaDenied_CountryID.caption) : null], fields.ForeignVisaDenied_CountryID.isInvalid],
            ["ForeignVisaDeniedReason", [fields.ForeignVisaDeniedReason.visible && fields.ForeignVisaDeniedReason.required ? ew.Validators.required(fields.ForeignVisaDeniedReason.caption) : null], fields.ForeignVisaDeniedReason.isInvalid],
            ["HasMaritimeAccidentOrCourtOfEnquiry", [fields.HasMaritimeAccidentOrCourtOfEnquiry.visible && fields.HasMaritimeAccidentOrCourtOfEnquiry.required ? ew.Validators.required(fields.HasMaritimeAccidentOrCourtOfEnquiry.caption) : null], fields.HasMaritimeAccidentOrCourtOfEnquiry.isInvalid],
            ["HasMaritimeAccidentOrCourtOfEnquiryDetails", [fields.HasMaritimeAccidentOrCourtOfEnquiryDetails.visible && fields.HasMaritimeAccidentOrCourtOfEnquiryDetails.required ? ew.Validators.required(fields.HasMaritimeAccidentOrCourtOfEnquiryDetails.caption) : null], fields.HasMaritimeAccidentOrCourtOfEnquiryDetails.isInvalid],
            ["Reference1CompanyName", [fields.Reference1CompanyName.visible && fields.Reference1CompanyName.required ? ew.Validators.required(fields.Reference1CompanyName.caption) : null], fields.Reference1CompanyName.isInvalid],
            ["Reference1ContactPersonName", [fields.Reference1ContactPersonName.visible && fields.Reference1ContactPersonName.required ? ew.Validators.required(fields.Reference1ContactPersonName.caption) : null], fields.Reference1ContactPersonName.isInvalid],
            ["Reference1CompanyAddress", [fields.Reference1CompanyAddress.visible && fields.Reference1CompanyAddress.required ? ew.Validators.required(fields.Reference1CompanyAddress.caption) : null], fields.Reference1CompanyAddress.isInvalid],
            ["Reference1CompanyCountryID", [fields.Reference1CompanyCountryID.visible && fields.Reference1CompanyCountryID.required ? ew.Validators.required(fields.Reference1CompanyCountryID.caption) : null], fields.Reference1CompanyCountryID.isInvalid],
            ["Reference1CompanyTelephone", [fields.Reference1CompanyTelephone.visible && fields.Reference1CompanyTelephone.required ? ew.Validators.required(fields.Reference1CompanyTelephone.caption) : null], fields.Reference1CompanyTelephone.isInvalid],
            ["Reference2CompanyName", [fields.Reference2CompanyName.visible && fields.Reference2CompanyName.required ? ew.Validators.required(fields.Reference2CompanyName.caption) : null], fields.Reference2CompanyName.isInvalid],
            ["Reference2ContactPersonName", [fields.Reference2ContactPersonName.visible && fields.Reference2ContactPersonName.required ? ew.Validators.required(fields.Reference2ContactPersonName.caption) : null], fields.Reference2ContactPersonName.isInvalid],
            ["Reference2CompanyAddress", [fields.Reference2CompanyAddress.visible && fields.Reference2CompanyAddress.required ? ew.Validators.required(fields.Reference2CompanyAddress.caption) : null], fields.Reference2CompanyAddress.isInvalid],
            ["Reference2CompanyCountryID", [fields.Reference2CompanyCountryID.visible && fields.Reference2CompanyCountryID.required ? ew.Validators.required(fields.Reference2CompanyCountryID.caption) : null], fields.Reference2CompanyCountryID.isInvalid],
            ["Reference2CompanyTelephone", [fields.Reference2CompanyTelephone.visible && fields.Reference2CompanyTelephone.required ? ew.Validators.required(fields.Reference2CompanyTelephone.caption) : null], fields.Reference2CompanyTelephone.isInvalid],
            ["Reference1CompanyTelephoneCode_CountryID", [fields.Reference1CompanyTelephoneCode_CountryID.visible && fields.Reference1CompanyTelephoneCode_CountryID.required ? ew.Validators.required(fields.Reference1CompanyTelephoneCode_CountryID.caption) : null], fields.Reference1CompanyTelephoneCode_CountryID.isInvalid],
            ["Reference2CompanyTelephoneCode_CountryID", [fields.Reference2CompanyTelephoneCode_CountryID.visible && fields.Reference2CompanyTelephoneCode_CountryID.required ? ew.Validators.required(fields.Reference2CompanyTelephoneCode_CountryID.caption) : null], fields.Reference2CompanyTelephoneCode_CountryID.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "ForeignVisaHasBeenDenied": @Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.ToClientList(crewGeneralDataForAdminEdit)),
            "ForeignVisaDenied_CountryID": @Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.ToClientList(crewGeneralDataForAdminEdit)),
            "HasMaritimeAccidentOrCourtOfEnquiry": @Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.ToClientList(crewGeneralDataForAdminEdit)),
            "Reference1CompanyCountryID": @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.ToClientList(crewGeneralDataForAdminEdit)),
            "Reference2CompanyCountryID": @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.ToClientList(crewGeneralDataForAdminEdit)),
            "Reference1CompanyTelephoneCode_CountryID": @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.ToClientList(crewGeneralDataForAdminEdit)),
            "Reference2CompanyTelephoneCode_CountryID": @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.ToClientList(crewGeneralDataForAdminEdit)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="update">
<input type="hidden" name="modal" value="@ConvertToInt(crewGeneralDataForAdminEdit.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(crewGeneralDataForAdminEdit.OldKeyName)" value="@Html.Raw(crewGeneralDataForAdminEdit.OldKey)">
<div class="ew-edit-div d-none"><!-- page* -->
@if (crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.Visible) { // crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.Visible (begin)
    <div id="r_ForeignVisaHasBeenDenied" @Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_ForeignVisaHasBeenDenied" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_ForeignVisaHasBeenDenied">@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.Caption)@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_ForeignVisaHasBeenDenied"><span id="el_CrewGeneralDataForAdmin_ForeignVisaHasBeenDenied">
<div class="form-check d-inline-block">
    <input type="checkbox" class="form-check-input@(crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.IsInvalidClass)" data-table="CrewGeneralDataForAdmin" data-field="x_ForeignVisaHasBeenDenied" data-boolean name="x_ForeignVisaHasBeenDenied" id="x_ForeignVisaHasBeenDenied" value="1" checked="@ConvertToBool(crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.CurrentValue)" @Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.EditAttributes) aria-describedby="x_ForeignVisaHasBeenDenied_help">
    <div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.GetErrorMessage())</div>
</div>
@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.GetCustomMessage)
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.Visible (end) *@
@if (crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.Visible) { // crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.Visible (begin)
    <div id="r_ForeignVisaDenied_CountryID" @Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_ForeignVisaDenied_CountryID" for="x_ForeignVisaDenied_CountryID" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_ForeignVisaDenied_CountryID">@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.Caption)@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_ForeignVisaDenied_CountryID"><span id="el_CrewGeneralDataForAdmin_ForeignVisaDenied_CountryID">
    <select
        id="x_ForeignVisaDenied_CountryID"
        name="x_ForeignVisaDenied_CountryID"
        class="form-select ew-select@(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.IsInvalidClass)"
        data-select2-id="fCrewGeneralDataForAdminedit_x_ForeignVisaDenied_CountryID"
        data-table="CrewGeneralDataForAdmin"
        data-field="x_ForeignVisaDenied_CountryID"
        data-value-separator="@(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.PlaceHolder))"
        @Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.EditAttributes)>
        @(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.SelectOptionListHtml("x_ForeignVisaDenied_CountryID"))
    </select>
    @Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.GetErrorMessage())</div>
@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.Lookup.GetParamTag(crewGeneralDataForAdminEdit, "p_x_ForeignVisaDenied_CountryID"))
<script>
loadjs.ready("fCrewGeneralDataForAdminedit", function() {
    var options = { name: "x_ForeignVisaDenied_CountryID", selectId: "fCrewGeneralDataForAdminedit_x_ForeignVisaDenied_CountryID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewGeneralDataForAdminedit.lists.ForeignVisaDenied_CountryID?.lookupOptions.length) {
        options.data = { id: "x_ForeignVisaDenied_CountryID", form: "fCrewGeneralDataForAdminedit" };
    } else {
        options.ajax = { id: "x_ForeignVisaDenied_CountryID", form: "fCrewGeneralDataForAdminedit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumInputLength = ew.selectMinimumInputLength;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewGeneralDataForAdmin.fields.ForeignVisaDenied_CountryID.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.Visible (end) *@
@if (crewGeneralDataForAdminEdit.ForeignVisaDeniedReason.Visible) { // crewGeneralDataForAdminEdit.ForeignVisaDeniedReason.Visible (begin)
    <div id="r_ForeignVisaDeniedReason" @Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDeniedReason.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_ForeignVisaDeniedReason" for="x_ForeignVisaDeniedReason" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_ForeignVisaDeniedReason">@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDeniedReason.Caption)@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDeniedReason.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDeniedReason.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_ForeignVisaDeniedReason"><span id="el_CrewGeneralDataForAdmin_ForeignVisaDeniedReason">
<textarea data-table="CrewGeneralDataForAdmin" data-field="x_ForeignVisaDeniedReason" name="x_ForeignVisaDeniedReason" id="x_ForeignVisaDeniedReason" cols="50" rows="4" placeholder="@Html.Raw(HtmlEncode(crewGeneralDataForAdminEdit.ForeignVisaDeniedReason.PlaceHolder))"@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDeniedReason.EditAttributes) aria-describedby="x_ForeignVisaDeniedReason_help">@(crewGeneralDataForAdminEdit.ForeignVisaDeniedReason.EditValue)</textarea>
@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDeniedReason.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDeniedReason.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.ForeignVisaDeniedReason.Visible (end) *@
@if (crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.Visible) { // crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.Visible (begin)
    <div id="r_HasMaritimeAccidentOrCourtOfEnquiry" @Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_HasMaritimeAccidentOrCourtOfEnquiry" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_HasMaritimeAccidentOrCourtOfEnquiry">@Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.Caption)@Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_HasMaritimeAccidentOrCourtOfEnquiry"><span id="el_CrewGeneralDataForAdmin_HasMaritimeAccidentOrCourtOfEnquiry">
<div class="form-check d-inline-block">
    <input type="checkbox" class="form-check-input@(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.IsInvalidClass)" data-table="CrewGeneralDataForAdmin" data-field="x_HasMaritimeAccidentOrCourtOfEnquiry" data-boolean name="x_HasMaritimeAccidentOrCourtOfEnquiry" id="x_HasMaritimeAccidentOrCourtOfEnquiry" value="1" checked="@ConvertToBool(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.CurrentValue)" @Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.EditAttributes) aria-describedby="x_HasMaritimeAccidentOrCourtOfEnquiry_help">
    <div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.GetErrorMessage())</div>
</div>
@Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.GetCustomMessage)
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.Visible (end) *@
@if (crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiryDetails.Visible) { // crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiryDetails.Visible (begin)
    <div id="r_HasMaritimeAccidentOrCourtOfEnquiryDetails" @Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiryDetails.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_HasMaritimeAccidentOrCourtOfEnquiryDetails" for="x_HasMaritimeAccidentOrCourtOfEnquiryDetails" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_HasMaritimeAccidentOrCourtOfEnquiryDetails">@Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiryDetails.Caption)@Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiryDetails.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiryDetails.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_HasMaritimeAccidentOrCourtOfEnquiryDetails"><span id="el_CrewGeneralDataForAdmin_HasMaritimeAccidentOrCourtOfEnquiryDetails">
<textarea data-table="CrewGeneralDataForAdmin" data-field="x_HasMaritimeAccidentOrCourtOfEnquiryDetails" name="x_HasMaritimeAccidentOrCourtOfEnquiryDetails" id="x_HasMaritimeAccidentOrCourtOfEnquiryDetails" cols="50" rows="4" placeholder="@Html.Raw(HtmlEncode(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiryDetails.PlaceHolder))"@Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiryDetails.EditAttributes) aria-describedby="x_HasMaritimeAccidentOrCourtOfEnquiryDetails_help">@(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiryDetails.EditValue)</textarea>
@Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiryDetails.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiryDetails.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiryDetails.Visible (end) *@
@if (crewGeneralDataForAdminEdit.Reference1CompanyName.Visible) { // crewGeneralDataForAdminEdit.Reference1CompanyName.Visible (begin)
    <div id="r_Reference1CompanyName" @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyName.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_Reference1CompanyName" for="x_Reference1CompanyName" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_Reference1CompanyName">@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyName.Caption)@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyName.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_Reference1CompanyName"><span id="el_CrewGeneralDataForAdmin_Reference1CompanyName">
<input type="@(crewGeneralDataForAdminEdit.Reference1CompanyName.InputTextType)" name="x_Reference1CompanyName" id="x_Reference1CompanyName" data-table="CrewGeneralDataForAdmin" data-field="x_Reference1CompanyName" value="@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewGeneralDataForAdminEdit.Reference1CompanyName.PlaceHolder))" data-format-pattern="@(crewGeneralDataForAdminEdit.Reference1CompanyName.FormatPattern)"@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyName.EditAttributes) aria-describedby="x_Reference1CompanyName_help">
@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyName.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.Reference1CompanyName.Visible (end) *@
@if (crewGeneralDataForAdminEdit.Reference1ContactPersonName.Visible) { // crewGeneralDataForAdminEdit.Reference1ContactPersonName.Visible (begin)
    <div id="r_Reference1ContactPersonName" @Html.Raw(crewGeneralDataForAdminEdit.Reference1ContactPersonName.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_Reference1ContactPersonName" for="x_Reference1ContactPersonName" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_Reference1ContactPersonName">@Html.Raw(crewGeneralDataForAdminEdit.Reference1ContactPersonName.Caption)@Html.Raw(crewGeneralDataForAdminEdit.Reference1ContactPersonName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.Reference1ContactPersonName.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_Reference1ContactPersonName"><span id="el_CrewGeneralDataForAdmin_Reference1ContactPersonName">
<input type="@(crewGeneralDataForAdminEdit.Reference1ContactPersonName.InputTextType)" name="x_Reference1ContactPersonName" id="x_Reference1ContactPersonName" data-table="CrewGeneralDataForAdmin" data-field="x_Reference1ContactPersonName" value="@Html.Raw(crewGeneralDataForAdminEdit.Reference1ContactPersonName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewGeneralDataForAdminEdit.Reference1ContactPersonName.PlaceHolder))" data-format-pattern="@(crewGeneralDataForAdminEdit.Reference1ContactPersonName.FormatPattern)"@Html.Raw(crewGeneralDataForAdminEdit.Reference1ContactPersonName.EditAttributes) aria-describedby="x_Reference1ContactPersonName_help">
@Html.Raw(crewGeneralDataForAdminEdit.Reference1ContactPersonName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.Reference1ContactPersonName.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.Reference1ContactPersonName.Visible (end) *@
@if (crewGeneralDataForAdminEdit.Reference1CompanyAddress.Visible) { // crewGeneralDataForAdminEdit.Reference1CompanyAddress.Visible (begin)
    <div id="r_Reference1CompanyAddress" @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyAddress.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_Reference1CompanyAddress" for="x_Reference1CompanyAddress" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_Reference1CompanyAddress">@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyAddress.Caption)@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyAddress.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyAddress.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_Reference1CompanyAddress"><span id="el_CrewGeneralDataForAdmin_Reference1CompanyAddress">
<textarea data-table="CrewGeneralDataForAdmin" data-field="x_Reference1CompanyAddress" name="x_Reference1CompanyAddress" id="x_Reference1CompanyAddress" cols="50" rows="4" placeholder="@Html.Raw(HtmlEncode(crewGeneralDataForAdminEdit.Reference1CompanyAddress.PlaceHolder))"@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyAddress.EditAttributes) aria-describedby="x_Reference1CompanyAddress_help">@(crewGeneralDataForAdminEdit.Reference1CompanyAddress.EditValue)</textarea>
@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyAddress.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyAddress.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.Reference1CompanyAddress.Visible (end) *@
@if (crewGeneralDataForAdminEdit.Reference1CompanyCountryID.Visible) { // crewGeneralDataForAdminEdit.Reference1CompanyCountryID.Visible (begin)
    <div id="r_Reference1CompanyCountryID" @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_Reference1CompanyCountryID" for="x_Reference1CompanyCountryID" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_Reference1CompanyCountryID">@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.Caption)@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_Reference1CompanyCountryID"><span id="el_CrewGeneralDataForAdmin_Reference1CompanyCountryID">
    <select
        id="x_Reference1CompanyCountryID"
        name="x_Reference1CompanyCountryID"
        class="form-select ew-select@(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.IsInvalidClass)"
        data-select2-id="fCrewGeneralDataForAdminedit_x_Reference1CompanyCountryID"
        data-table="CrewGeneralDataForAdmin"
        data-field="x_Reference1CompanyCountryID"
        data-value-separator="@(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.PlaceHolder))"
        @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.EditAttributes)>
        @(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.SelectOptionListHtml("x_Reference1CompanyCountryID"))
    </select>
    @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.GetErrorMessage())</div>
@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.Lookup.GetParamTag(crewGeneralDataForAdminEdit, "p_x_Reference1CompanyCountryID"))
<script>
loadjs.ready("fCrewGeneralDataForAdminedit", function() {
    var options = { name: "x_Reference1CompanyCountryID", selectId: "fCrewGeneralDataForAdminedit_x_Reference1CompanyCountryID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewGeneralDataForAdminedit.lists.Reference1CompanyCountryID?.lookupOptions.length) {
        options.data = { id: "x_Reference1CompanyCountryID", form: "fCrewGeneralDataForAdminedit" };
    } else {
        options.ajax = { id: "x_Reference1CompanyCountryID", form: "fCrewGeneralDataForAdminedit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumInputLength = ew.selectMinimumInputLength;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewGeneralDataForAdmin.fields.Reference1CompanyCountryID.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.Reference1CompanyCountryID.Visible (end) *@
@if (crewGeneralDataForAdminEdit.Reference1CompanyTelephone.Visible) { // crewGeneralDataForAdminEdit.Reference1CompanyTelephone.Visible (begin)
    <div id="r_Reference1CompanyTelephone" @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephone.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_Reference1CompanyTelephone" for="x_Reference1CompanyTelephone" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_Reference1CompanyTelephone">@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephone.Caption)@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephone.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephone.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_Reference1CompanyTelephone"><span id="el_CrewGeneralDataForAdmin_Reference1CompanyTelephone">
<input type="@(crewGeneralDataForAdminEdit.Reference1CompanyTelephone.InputTextType)" name="x_Reference1CompanyTelephone" id="x_Reference1CompanyTelephone" data-table="CrewGeneralDataForAdmin" data-field="x_Reference1CompanyTelephone" value="@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephone.EditValue)" size="30" maxlength="20" placeholder="@Html.Raw(HtmlEncode(crewGeneralDataForAdminEdit.Reference1CompanyTelephone.PlaceHolder))" data-format-pattern="@(crewGeneralDataForAdminEdit.Reference1CompanyTelephone.FormatPattern)"@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephone.EditAttributes) aria-describedby="x_Reference1CompanyTelephone_help">
@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephone.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephone.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.Reference1CompanyTelephone.Visible (end) *@
@if (crewGeneralDataForAdminEdit.Reference2CompanyName.Visible) { // crewGeneralDataForAdminEdit.Reference2CompanyName.Visible (begin)
    <div id="r_Reference2CompanyName" @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyName.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_Reference2CompanyName" for="x_Reference2CompanyName" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_Reference2CompanyName">@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyName.Caption)@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyName.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_Reference2CompanyName"><span id="el_CrewGeneralDataForAdmin_Reference2CompanyName">
<input type="@(crewGeneralDataForAdminEdit.Reference2CompanyName.InputTextType)" name="x_Reference2CompanyName" id="x_Reference2CompanyName" data-table="CrewGeneralDataForAdmin" data-field="x_Reference2CompanyName" value="@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewGeneralDataForAdminEdit.Reference2CompanyName.PlaceHolder))" data-format-pattern="@(crewGeneralDataForAdminEdit.Reference2CompanyName.FormatPattern)"@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyName.EditAttributes) aria-describedby="x_Reference2CompanyName_help">
@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyName.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.Reference2CompanyName.Visible (end) *@
@if (crewGeneralDataForAdminEdit.Reference2ContactPersonName.Visible) { // crewGeneralDataForAdminEdit.Reference2ContactPersonName.Visible (begin)
    <div id="r_Reference2ContactPersonName" @Html.Raw(crewGeneralDataForAdminEdit.Reference2ContactPersonName.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_Reference2ContactPersonName" for="x_Reference2ContactPersonName" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_Reference2ContactPersonName">@Html.Raw(crewGeneralDataForAdminEdit.Reference2ContactPersonName.Caption)@Html.Raw(crewGeneralDataForAdminEdit.Reference2ContactPersonName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.Reference2ContactPersonName.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_Reference2ContactPersonName"><span id="el_CrewGeneralDataForAdmin_Reference2ContactPersonName">
<input type="@(crewGeneralDataForAdminEdit.Reference2ContactPersonName.InputTextType)" name="x_Reference2ContactPersonName" id="x_Reference2ContactPersonName" data-table="CrewGeneralDataForAdmin" data-field="x_Reference2ContactPersonName" value="@Html.Raw(crewGeneralDataForAdminEdit.Reference2ContactPersonName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewGeneralDataForAdminEdit.Reference2ContactPersonName.PlaceHolder))" data-format-pattern="@(crewGeneralDataForAdminEdit.Reference2ContactPersonName.FormatPattern)"@Html.Raw(crewGeneralDataForAdminEdit.Reference2ContactPersonName.EditAttributes) aria-describedby="x_Reference2ContactPersonName_help">
@Html.Raw(crewGeneralDataForAdminEdit.Reference2ContactPersonName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.Reference2ContactPersonName.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.Reference2ContactPersonName.Visible (end) *@
@if (crewGeneralDataForAdminEdit.Reference2CompanyAddress.Visible) { // crewGeneralDataForAdminEdit.Reference2CompanyAddress.Visible (begin)
    <div id="r_Reference2CompanyAddress" @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyAddress.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_Reference2CompanyAddress" for="x_Reference2CompanyAddress" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_Reference2CompanyAddress">@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyAddress.Caption)@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyAddress.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyAddress.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_Reference2CompanyAddress"><span id="el_CrewGeneralDataForAdmin_Reference2CompanyAddress">
<textarea data-table="CrewGeneralDataForAdmin" data-field="x_Reference2CompanyAddress" name="x_Reference2CompanyAddress" id="x_Reference2CompanyAddress" cols="50" rows="4" placeholder="@Html.Raw(HtmlEncode(crewGeneralDataForAdminEdit.Reference2CompanyAddress.PlaceHolder))"@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyAddress.EditAttributes) aria-describedby="x_Reference2CompanyAddress_help">@(crewGeneralDataForAdminEdit.Reference2CompanyAddress.EditValue)</textarea>
@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyAddress.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyAddress.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.Reference2CompanyAddress.Visible (end) *@
@if (crewGeneralDataForAdminEdit.Reference2CompanyCountryID.Visible) { // crewGeneralDataForAdminEdit.Reference2CompanyCountryID.Visible (begin)
    <div id="r_Reference2CompanyCountryID" @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_Reference2CompanyCountryID" for="x_Reference2CompanyCountryID" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_Reference2CompanyCountryID">@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.Caption)@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_Reference2CompanyCountryID"><span id="el_CrewGeneralDataForAdmin_Reference2CompanyCountryID">
    <select
        id="x_Reference2CompanyCountryID"
        name="x_Reference2CompanyCountryID"
        class="form-select ew-select@(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.IsInvalidClass)"
        data-select2-id="fCrewGeneralDataForAdminedit_x_Reference2CompanyCountryID"
        data-table="CrewGeneralDataForAdmin"
        data-field="x_Reference2CompanyCountryID"
        data-value-separator="@(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.PlaceHolder))"
        @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.EditAttributes)>
        @(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.SelectOptionListHtml("x_Reference2CompanyCountryID"))
    </select>
    @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.GetErrorMessage())</div>
@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.Lookup.GetParamTag(crewGeneralDataForAdminEdit, "p_x_Reference2CompanyCountryID"))
<script>
loadjs.ready("fCrewGeneralDataForAdminedit", function() {
    var options = { name: "x_Reference2CompanyCountryID", selectId: "fCrewGeneralDataForAdminedit_x_Reference2CompanyCountryID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewGeneralDataForAdminedit.lists.Reference2CompanyCountryID?.lookupOptions.length) {
        options.data = { id: "x_Reference2CompanyCountryID", form: "fCrewGeneralDataForAdminedit" };
    } else {
        options.ajax = { id: "x_Reference2CompanyCountryID", form: "fCrewGeneralDataForAdminedit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumInputLength = ew.selectMinimumInputLength;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewGeneralDataForAdmin.fields.Reference2CompanyCountryID.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.Reference2CompanyCountryID.Visible (end) *@
@if (crewGeneralDataForAdminEdit.Reference2CompanyTelephone.Visible) { // crewGeneralDataForAdminEdit.Reference2CompanyTelephone.Visible (begin)
    <div id="r_Reference2CompanyTelephone" @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephone.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_Reference2CompanyTelephone" for="x_Reference2CompanyTelephone" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_Reference2CompanyTelephone">@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephone.Caption)@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephone.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephone.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_Reference2CompanyTelephone"><span id="el_CrewGeneralDataForAdmin_Reference2CompanyTelephone">
<input type="@(crewGeneralDataForAdminEdit.Reference2CompanyTelephone.InputTextType)" name="x_Reference2CompanyTelephone" id="x_Reference2CompanyTelephone" data-table="CrewGeneralDataForAdmin" data-field="x_Reference2CompanyTelephone" value="@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephone.EditValue)" size="30" maxlength="20" placeholder="@Html.Raw(HtmlEncode(crewGeneralDataForAdminEdit.Reference2CompanyTelephone.PlaceHolder))" data-format-pattern="@(crewGeneralDataForAdminEdit.Reference2CompanyTelephone.FormatPattern)"@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephone.EditAttributes) aria-describedby="x_Reference2CompanyTelephone_help">
@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephone.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephone.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.Reference2CompanyTelephone.Visible (end) *@
@if (crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.Visible) { // crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.Visible (begin)
    <div id="r_Reference1CompanyTelephoneCode_CountryID" @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_Reference1CompanyTelephoneCode_CountryID" for="x_Reference1CompanyTelephoneCode_CountryID" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_Reference1CompanyTelephoneCode_CountryID">@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.Caption)@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_Reference1CompanyTelephoneCode_CountryID"><span id="el_CrewGeneralDataForAdmin_Reference1CompanyTelephoneCode_CountryID">
    <select
        id="x_Reference1CompanyTelephoneCode_CountryID"
        name="x_Reference1CompanyTelephoneCode_CountryID"
        class="form-select ew-select@(crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.IsInvalidClass)"
        data-select2-id="fCrewGeneralDataForAdminedit_x_Reference1CompanyTelephoneCode_CountryID"
        data-table="CrewGeneralDataForAdmin"
        data-field="x_Reference1CompanyTelephoneCode_CountryID"
        data-value-separator="@(crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.PlaceHolder))"
        @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.EditAttributes)>
        @(crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.SelectOptionListHtml("x_Reference1CompanyTelephoneCode_CountryID"))
    </select>
    @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.GetErrorMessage())</div>
@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.Lookup.GetParamTag(crewGeneralDataForAdminEdit, "p_x_Reference1CompanyTelephoneCode_CountryID"))
<script>
loadjs.ready("fCrewGeneralDataForAdminedit", function() {
    var options = { name: "x_Reference1CompanyTelephoneCode_CountryID", selectId: "fCrewGeneralDataForAdminedit_x_Reference1CompanyTelephoneCode_CountryID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewGeneralDataForAdminedit.lists.Reference1CompanyTelephoneCode_CountryID?.lookupOptions.length) {
        options.data = { id: "x_Reference1CompanyTelephoneCode_CountryID", form: "fCrewGeneralDataForAdminedit" };
    } else {
        options.ajax = { id: "x_Reference1CompanyTelephoneCode_CountryID", form: "fCrewGeneralDataForAdminedit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumInputLength = ew.selectMinimumInputLength;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewGeneralDataForAdmin.fields.Reference1CompanyTelephoneCode_CountryID.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.Reference1CompanyTelephoneCode_CountryID.Visible (end) *@
@if (crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.Visible) { // crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.Visible (begin)
    <div id="r_Reference2CompanyTelephoneCode_CountryID" @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.RowAttributes)>
        <label id="elh_CrewGeneralDataForAdmin_Reference2CompanyTelephoneCode_CountryID" for="x_Reference2CompanyTelephoneCode_CountryID" class="@(crewGeneralDataForAdminEdit.LeftColumnClass)"><template id="tpc_CrewGeneralDataForAdmin_Reference2CompanyTelephoneCode_CountryID">@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.Caption)@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewGeneralDataForAdminEdit.RightColumnClass)"><div @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.CellAttributes)>
<template id="tpx_CrewGeneralDataForAdmin_Reference2CompanyTelephoneCode_CountryID"><span id="el_CrewGeneralDataForAdmin_Reference2CompanyTelephoneCode_CountryID">
    <select
        id="x_Reference2CompanyTelephoneCode_CountryID"
        name="x_Reference2CompanyTelephoneCode_CountryID"
        class="form-select ew-select@(crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.IsInvalidClass)"
        data-select2-id="fCrewGeneralDataForAdminedit_x_Reference2CompanyTelephoneCode_CountryID"
        data-table="CrewGeneralDataForAdmin"
        data-field="x_Reference2CompanyTelephoneCode_CountryID"
        data-value-separator="@(crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.PlaceHolder))"
        @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.EditAttributes)>
        @(crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.SelectOptionListHtml("x_Reference2CompanyTelephoneCode_CountryID"))
    </select>
    @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.GetErrorMessage())</div>
@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.Lookup.GetParamTag(crewGeneralDataForAdminEdit, "p_x_Reference2CompanyTelephoneCode_CountryID"))
<script>
loadjs.ready("fCrewGeneralDataForAdminedit", function() {
    var options = { name: "x_Reference2CompanyTelephoneCode_CountryID", selectId: "fCrewGeneralDataForAdminedit_x_Reference2CompanyTelephoneCode_CountryID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewGeneralDataForAdminedit.lists.Reference2CompanyTelephoneCode_CountryID?.lookupOptions.length) {
        options.data = { id: "x_Reference2CompanyTelephoneCode_CountryID", form: "fCrewGeneralDataForAdminedit" };
    } else {
        options.ajax = { id: "x_Reference2CompanyTelephoneCode_CountryID", form: "fCrewGeneralDataForAdminedit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumInputLength = ew.selectMinimumInputLength;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewGeneralDataForAdmin.fields.Reference2CompanyTelephoneCode_CountryID.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewGeneralDataForAdminEdit.Reference2CompanyTelephoneCode_CountryID.Visible (end) *@
</div><!-- /page* -->
    <input type="hidden" data-table="CrewGeneralDataForAdmin" data-field="x_ID" data-hidden="1" name="x_ID" id="x_ID" value="@Html.Raw(HtmlEncode(crewGeneralDataForAdminEdit.ID.CurrentValue))">
<div id="tpd_CrewGeneralDataForAdminedit" class="ew-custom-template"></div>
<template id="tpm_CrewGeneralDataForAdminedit">
<div id="ct_crewGeneralDataForAdminEdit">    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewPersonalDataForAdminEdit")">
                @(CurrentLanguage == "en-US" ? "PERSONAL DATA" : "DATA PERSONAL")
            </a>     
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewDocumentForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "DOCUMENTS" : "DOKUMEN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewBankAccountForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "BANK ACCOUNT" : "REKENING BANK")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFamilyForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "FAMILY" : "KELUARGA")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFormalEducationForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "FORMAL EDUCATION" : "PENDIDIKAN FORMAL")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalCertificateForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "MEDICAL CERTIFICATE / TEST" : "SERTIFIKAT / TES MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewCertificateForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "CERTIFICATES AND QUALIFICATIONS" : "SERTIFIKAT DAN KUALIFIKASI")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewExperienceForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "SEA EXPERIENCE" : "PENGALAMAN BERLAYAR")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewAppraisalForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "APPRAISALS" : "PENILAIAN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalHistoryForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "MEDICAL HISTORY" : "RIWAYAT MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewGeneralDataForAdminEdit")">
                @(CurrentLanguage == "en-US" ? "GENERAL" : "UMUM")
            </a>
        </li>
    </ul>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_ForeignVisaHasBeenDenied" class="mb-2 row">
                <label for="x_ForeignVisaHasBeenDenied" class="col-form-label">@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaHasBeenDenied.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_ForeignVisaHasBeenDenied"></slot></div>
            </div>
            <div id="r_ForeignVisaDenied_CountryID" class="mb-2 row">
                <label for="x_ForeignVisaDenied_CountryID" class="col-form-label">@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDenied_CountryID.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_ForeignVisaDenied_CountryID"></slot></div>
            </div>
            <div id="r_ForeignVisaDeniedReason" class="mb-2 row">
                <label for="x_ForeignVisaDeniedReason" class="col-form-label">@Html.Raw(crewGeneralDataForAdminEdit.ForeignVisaDeniedReason.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_ForeignVisaDeniedReason"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_HasMaritimeAccidentOrCourtOfEnquiry" class="mb-2 row">
                <label for="x_HasMaritimeAccidentOrCourtOfEnquiry" class="col-form-label">@Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiry.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_HasMaritimeAccidentOrCourtOfEnquiry"></slot></div>
            </div>
            <div id="r_HasMaritimeAccidentOrCourtOfEnquiryDetails" class="mb-2 row">
                <label for="x_HasMaritimeAccidentOrCourtOfEnquiryDetails" class="col-form-label">@Html.Raw(crewGeneralDataForAdminEdit.HasMaritimeAccidentOrCourtOfEnquiryDetails.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_HasMaritimeAccidentOrCourtOfEnquiryDetails"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <h6 class="fw-bold">
                @(CurrentLanguage == "en-US" ? "Reference 1" : "Referensi 1")
            </h6>
            <div id="r_Reference1CompanyName" class="mb-2 row">
                <label for="x_Reference1CompanyName" class="col-form-label">@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyName.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_Reference1CompanyName"></slot></div>
            </div>
            <div id="r_Reference1ContactPersonName" class="mb-2 row">
                <label for="x_Reference1ContactPersonName" class="col-form-label">@Html.Raw(crewGeneralDataForAdminEdit.Reference1ContactPersonName.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_Reference1ContactPersonName"></slot></div>
            </div>
            <div id="r_Reference1CompanyCountryID" class="mb-2 row">
                <label for="x_Reference1CompanyCountryID" class="col-form-label">@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyCountryID.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_Reference1CompanyCountryID"></slot></div>
            </div>
            <div id="r_Reference1CompanyTelephone" class="mb-2 row">
                <label for="x_Reference1CompanyTelephone" class="col-form-label">
                    @Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyTelephone.Caption) @(CurrentLanguage == "en-US" ? "(Without Leading Zero)" : "(Tanpa Diawali 0)")
                </label>
                <div class="row">
                    <div class="col-sm-6">
                        <slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_Reference1CompanyTelephoneCode_CountryID"></slot>
                    </div>
                    <div class="col-sm-6">
                        <slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_Reference1CompanyTelephone"></slot>
                    </div>
                </div>
            </div>
            <div id="r_Reference1CompanyAddress" class="mb-2 row">
                <label for="x_Reference1CompanyAddress" class="col-form-label">@Html.Raw(crewGeneralDataForAdminEdit.Reference1CompanyAddress.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_Reference1CompanyAddress"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <h6 class="fw-bold">
                @(CurrentLanguage == "en-US" ? "Reference 2" : "Referensi 2")
            </h6>
            <div id="r_Reference2CompanyName" class="mb-2 row">
                <label for="x_Reference2CompanyName" class="col-form-label">@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyName.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_Reference2CompanyName"></slot></div>
            </div>
            <div id="r_Reference2ContactPersonName" class="mb-2 row">
                <label for="x_Reference2ContactPersonName" class="col-form-label">@Html.Raw(crewGeneralDataForAdminEdit.Reference2ContactPersonName.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_Reference2ContactPersonName"></slot></div>
            </div>
            <div id="r_Reference2CompanyCountryID" class="mb-2 row">
                <label for="x_Reference2CompanyCountryID" class="col-form-label">@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyCountryID.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_Reference2CompanyCountryID"></slot></div>
            </div>
            <div id="r_Reference2CompanyTelephone" class="mb-2 row">
                <label for="x_Reference2CompanyTelephone" class="col-form-label">
                    @Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyTelephone.Caption) @(CurrentLanguage == "en-US" ? "(Without Leading Zero)" : "(Tanpa Diawali 0)")
                </label>
                <div class="row">
                    <div class="col-sm-6">
                        <slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_Reference2CompanyTelephoneCode_CountryID"></slot>
                    </div>
                    <div class="col-sm-6">  
                        <slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_Reference2CompanyTelephone"></slot>
                    </div>
                </div>
            </div>
            <div id="r_Reference2CompanyAddress" class="mb-2 row">
                <label for="x_Reference2CompanyAddress" class="col-form-label">@Html.Raw(crewGeneralDataForAdminEdit.Reference2CompanyAddress.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewGeneralDataForAdmin_Reference2CompanyAddress"></slot></div>
            </div>
        </div>
    </div>
    <div id="proceed-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="proceed-modal-dialog-title" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="proceed-modal-dialog-title" class="modal-title">
                        @(CurrentLanguage == "en-US" ? "Warning" : "Peringatan")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p> 
                        @{
                            if (CurrentLanguage == "en-US")
                            {
                                <span>There are error(s) in this tab.</span><br/>
                                <span>If you choose to Proceed, any unsaved data will be lost.</span><br/>
                                <span>Do you want to Proceed?</span>
                            }
                            else
                            {
                                <span>Masih ada error di tab ini.</span><br/>
                                <span>Jika Anda memilih Lanjutkan, data yang belum disimpan akan hilang.</span><br/>
                                <span>Apakah Anda ingin melanjutkan?</span>
                            }
                        }
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger ew-btn" id="btn-proceed" type="button">
                        @(CurrentLanguage == "en-US" ? "Proceed" : "Lanjutkan")
                    </button>
                    <button class="btn btn-default ew-btn" id="btn-proceed-cancel" type="button" data-bs-dismiss="modal">
                        @(CurrentLanguage == "en-US" ? "Cancel" : "Batal")
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div id="loading-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-center mb-0">
                        @(CurrentLanguage == "en-US" ? "Saving..." : "Menyimpan...")
                    </p>
                </div>
            </div>
        </div>
    </div></div>
</template>
@{ crewGeneralDataForAdminEdit.CloseRecordset(); }
@Html.Raw(crewGeneralDataForAdminEdit.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(crewGeneralDataForAdminEdit.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fCrewGeneralDataForAdminedit">@Html.Raw(Language.Phrase("SaveBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fCrewGeneralDataForAdminedit" data-href="@AppPath(crewGeneralDataForAdminEdit.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(crewGeneralDataForAdminEdit.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
<script class="ew-apply-template">
loadjs.ready(ew.applyTemplateId, function() {
    var $ = jQuery;
    ew.templateData = { rows: @Html.Raw(ConvertToJson(crewGeneralDataForAdminEdit.Rows)) };
    ew.applyTemplate("tpd_CrewGeneralDataForAdminedit", "tpm_CrewGeneralDataForAdminedit", "CrewGeneralDataForAdminedit", "@(crewGeneralDataForAdminEdit.Export)", "CrewGeneralDataForAdmin", ew.templateData.rows[0], @(crewGeneralDataForAdminEdit.IsModal ? "true" : "false"));
    loadjs.done("customtemplate");
});
</script>
</main>
@crewGeneralDataForAdminEdit.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("CrewGeneralDataForAdmin");
});
</script>
<script>
loadjs.ready("load", function() {
    // Startup script
    // Write your table-specific startup script here
    // document.write("page loaded");

    // Get the current URL
    const currentUrlObject = new URL(window.location.href);
    // Create a new URLSearchParams object based on the current URL's search parameters
    const urlQueryParams = new URLSearchParams(currentUrlObject.search);
    // get currently edited crew id from current url
    const currentlyEditedCrewID = parseInt(currentUrlObject.pathname.split('/').pop());
    const selectedLanguage = ew.vars['languages']['languages'].filter(obj => obj.selected === true)[0];
    const parentUrl = ew.PATH_BASE;
    const tableName = "CrewGeneralDataForAdmin";
    const pageType = "edit";
    const pageTypeCapital = "Edit";
    const formID = `f${tableName}${pageType}`;
    const saveAsDraftUrl = `${parentUrl}${tableName}${pageTypeCapital}/${currentlyEditedCrewID}`;
    let isChangeTabApproved = false;
    const adminAndEmployeeStatusApi = 'get-admin-and-employee-status';
    $.ajax({
        url: `${parentUrl}api/Registration/${adminAndEmployeeStatusApi}`,
        method: 'GET',
        data: {
            crewID: currentlyEditedCrewID
        },
        success: function(response) {
            if (response.success) {
                const isAdmin = response.data.IsAdmin;
                if (isAdmin) {
                    const customCancelButton = $('<button/>', {
                        'class': 'btn btn-danger ew-btn primary-red-bg primary-white-clr',
                        'id': 'btn-custom-cancel',
                        'type': 'button',
                        'text': `${ew.language.phrase("CancelBtn")}`,
                    }).click(function() {
                        if (window[formID].modified) {
                            ew.prompt(ew.language.phrase("ConfirmCancel"), result => {
                                if (result) {
                                    isChangeTabApproved = true;
                                    window.location.href = `${ew.PATH_BASE}RegistrationList`;
                                }
                              });
                        } else {
                            isChangeTabApproved = true;
                            window.location.href = `${ew.PATH_BASE}RegistrationList`;
                        }
                    });
                    $('#btn-cancel').after(customCancelButton);
                    $('#btn-cancel').remove();
                } else {
                    $('#btn-cancel').remove();
                }

                // create a new button element with class, type, and style attributes
                const submitButton = $("<button></button>", { 
                    text: "Submit",
                    class: "btn btn-default ew-btn primary-green-bg ms-3 primary-white-clr", 
                    id: "btn-submit",
                    name: "btn-submit",
                    type: "button"
                });

                // add the new button as the first child of the 'col-auto' div
                $('.ew-buttons > .d-flex').append(submitButton);
                const submitApiUrl = "submit-form-for-admin";
                $("#btn-submit").click(function() {
                    const validateAsDraftResult = validateAsDraft();
                    if (!validateAsDraftResult) {
                        scrollToFirstInvalidInput();
                        return;
                    }
                    $('#loading-modal-dialog').modal('show');
                    const tableName = "CrewGeneralDataForAdmin";
                    let formData = $(this.form).serialize();
                    $('input[type="checkbox"]').each(function() {
                        // Jika checkbox tidak dicentang dan tidak ada di hasil serialize(),
                        // tambahkan nilai 0 ke hasil serialize()
                        if (!this.checked && formData.indexOf(this.name) === -1) {
                            formData += '&' + this.name + '=0';
                        }
                    });
                    $.post(`${parentUrl}api/edit/${tableName}/${currentlyEditedCrewID}`, formData, function (res) { // Get response from Add page API
                        if (res && res.success) {
                            $.ajax({
                                url: `${parentUrl}api/Registration/${submitApiUrl}?crewID=${currentlyEditedCrewID}`,
                                method: 'POST',
                                success: function(response) {
                                    $('#loading-modal-dialog').modal('hide');
                                    isChangeTabApproved = true;
                                    if (response.success) {
                                        if (isAdmin) {
                                            if (response.crewStatus === "Candidate - Blacklist") {
                                                // Jika kru masuk daftar blacklist
                                                /*
                                                let warningMessage = '';
                                                if (selectedLanguage.id === 'en-US') {
                                                    warningMessage = `Crew blacklisted`;
                                                } else {
                                                    warningMessage = `Kru masuk daftar blacklist`;
                                                }
                                                */
                                                const baseUrl = new URL(window.location.href).origin;
                                                const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}RegistrationList`);
                                                // const encodedWarningMessage = encodeURIComponent(warningMessage);
                                                const params = new URLSearchParams(targetUrl.search);
                                                // params.set('warningMessage', encodedWarningMessage);
                                                targetUrl.search = params.toString();
                                                window.location.href = targetUrl.href;
                                            } else {
                                                // Jika kru tidak masuk daftar blacklist
                                                let successMessage = '';
                                                if (selectedLanguage.id === 'en-US') {
                                                    successMessage = `Submit Successful`;
                                                } else {
                                                    successMessage = `Submit Berhasil`;
                                                }
                                                const baseUrl = new URL(window.location.href).origin;
                                                const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}RegistrationList`);
                                                const encodedSuccessMessage = encodeURIComponent(successMessage);
                                                const params = new URLSearchParams(targetUrl.search);
                                                params.set('successMessage', encodedSuccessMessage);
                                                targetUrl.search = params.toString();
                                                window.location.href = targetUrl.href;
                                            }
                                        } else {
                                            window.location.href = `${ew.PATH_BASE}NotificationForCrewList`;
                                        }
                                    } else {
                                        const errorMessage = response.errorMessage;
                                        const regex = /Error\s*(.*?)\s*:\s{1}(.*)/;
                                        if (regex.test(errorMessage)) {
                                            const matches = errorMessage.match(regex);
                                            const targetTabName = matches[1];
                                            const errorDetail = matches[2];
                                            const targetHref = $(`ul.nav-tabs li.nav-item a.nav-link:contains("${targetTabName}")`).first().attr('href');
                                            const baseUrl = new URL(window.location.href).origin;
                                            const targetUrl = new URL(baseUrl + targetHref);
                                            const encodedErrorDetail = encodeURIComponent(errorDetail);
                                            const params = new URLSearchParams(targetUrl.search);
                                            params.set('errorMessage', encodedErrorDetail);
                                            targetUrl.search = params.toString();
                                            window.location.href = targetUrl.href;
                                        } else {
                                            if (response.data.IsAlreadySubmitted) {
                                                const baseUrl = new URL(window.location.href).origin;
                                                let targetUrl = "";
                                                if (isAdmin) {
                                                    targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}RegistrationList`);
                                                } else {
                                                    targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}NotificationForCrewList`);
                                                }
                                                const encodedErrorMessage = encodeURIComponent(errorMessage);
                                                const params = new URLSearchParams(targetUrl.search);
                                                params.set('errorMessage', encodedErrorMessage);
                                                targetUrl.search = params.toString();
                                                window.location.href = targetUrl.href;
                                            } else {
                                                ew.showToast(errorMessage);
                                            }
                                        }
                                    }
                                },
                                error: function(xhr, textStatus, errorThrown) {
                                    $('#loading-modal-dialog').modal('hide');
                                    ew.showToast(errorThrown);
                                }
                            });
                        } else {
                            $('#loading-modal-dialog').modal('hide');
                            ew.showToast(res.failureMessage);
                        }
                    });
                });
            } else {
                ew.showToast(response.errorMessage);
            }
        },
        error: function(xhr, textStatus, errorThrown) {
            ew.showToast(errorThrown);
        }
    });

    // Iterate over each anchor element inside the nav-tabs
    $(".nav-tabs .nav-item a").each(function() {
        const href = $(this).attr("href");
        // Check if the href contains current page's url
        if (window.location.href.includes(href)) {
            // add class and attribute
            $(this).addClass("active");
            $(this).attr("aria-current", "page");
        }
        // Check if the href contains "Edit" or "Add"
        if (href.includes("Edit")) {
            const newHref = href + "/" + currentlyEditedCrewID; // Add "/" and the currently edited crew ID to the href
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        } else if (href.includes("Add")) {
            const newHref = href + "?crewID=" + currentlyEditedCrewID; // Add "?crewID=" and the currently edited crew ID to the href
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        }
    });

    // start code for auto capitalize first letter of each word
    $('#x_Reference1CompanyName').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    $('#x_Reference1ContactPersonName').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    $('#x_Reference2CompanyName').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    $('#x_Reference2ContactPersonName').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    // end code for auto capitalize first letter of each word
    const saveAsDraftButton = $('<button/>', {
        'class': 'btn btn-default ew-btn me-auto primary-black-clr gray-bg',
        'id': 'btn-save-draft',
        'type': 'button',
        'text': (selectedLanguage.id === 'en-US') ? `${ew.language.phrase("SaveBtn")} as Draft` : `${ew.language.phrase("SaveBtn")} sebagai Draft`
    }).click(function() {
        const validateAsDraftResult = validateAsDraft();
        if (validateAsDraftResult) {
            $('#loading-modal-dialog').modal('show');
            const targetUrlRelative = saveAsDraftUrl;
            saveAsDraft({ redirectUrlWhenSuccess: targetUrlRelative });
        } else {
            scrollToFirstInvalidInput();
        }
    });
    $('#btn-action').after(saveAsDraftButton);
    $('#btn-action').remove();

    // Target the ol element that has breadcrumb class
    const $breadCrumbOl = $('.breadcrumb').first();

    // Delete the ol element that has breadcrumb class
    $breadCrumbOl.remove();
    $('.ew-buttons > .col-sm-10').removeClass('col-sm-10').addClass('d-flex mb-3');
    $('.ew-buttons > .offset-sm-2').removeClass('offset-sm-2');
    function toggleForeignVisaInput(value) {
        if (value === 1) {
            $('#x_ForeignVisaDenied_CountryID').prop('disabled', false);
            $('#x_ForeignVisaDeniedReason').prop('disabled', false);
        } else if (value === 0) {
            $('#x_ForeignVisaDenied_CountryID').prop('disabled', true);
            $('#x_ForeignVisaDeniedReason').prop('disabled', true);
            $('#x_ForeignVisaDenied_CountryID').val(null).trigger('change');
            $('#x_ForeignVisaDeniedReason').val(null);
        }
    }
    function toggleMaritimeAccidentInput(value) {
        if (value === 1) {
            $('#x_HasMaritimeAccidentOrCourtOfEnquiryDetails').prop('disabled', false);
        } else if (value === 0) {
            $('#x_HasMaritimeAccidentOrCourtOfEnquiryDetails').prop('disabled', true);
            $('#x_HasMaritimeAccidentOrCourtOfEnquiryDetails').val(null);
        }
    }
    const foreignVisaCheckboxValue = $('#x_ForeignVisaHasBeenDenied:checked').val() ? 1 : 0;
    const maritimeAccidentCheckboxValue = $('#x_HasMaritimeAccidentOrCourtOfEnquiry:checked').val() ? 1 : 0;
    toggleForeignVisaInput(foreignVisaCheckboxValue);
    toggleMaritimeAccidentInput(maritimeAccidentCheckboxValue);
    $('#x_ForeignVisaHasBeenDenied').change(function() {
        const value = $(this).is(':checked') ? 1 : 0;
        toggleForeignVisaInput(value);
    });
    $('#x_HasMaritimeAccidentOrCourtOfEnquiry').change(function() {
        const value = $(this).is(':checked') ? 1 : 0;
        toggleMaritimeAccidentInput(value);
    });
    const errorMessage = urlQueryParams.get('errorMessage');
    if (errorMessage !== null) {
        const decodedErrorMessage = decodeURIComponent(errorMessage);
        ew.showToast(decodedErrorMessage);
        urlQueryParams.delete('errorMessage');
        currentUrlObject.search = urlQueryParams.toString();
        history.pushState(null, '', currentUrlObject);
    }

    // AUTO SAVE WHEN MOVING FROM THIS TAB
    $(window).on('beforeunload', function(event) {
        if (!isChangeTabApproved && window[formID].modified) {
            event.preventDefault();
            event.returnValue = '';
            return '';
        }
    });
    $("#btn-proceed").click(function() {
        isChangeTabApproved = true;
        const targetUrlRelative = $(this).attr('target-url-relative');
        $('#approve-modal-dialog').modal('hide');
        proceedToLink(targetUrlRelative);
    });
    $('ul.nav.nav-tabs li.nav-item a.nav-link').on('click', function(event) {
        event.preventDefault();
        const targetUrlRelative = $(this).attr('href');
        if (window[formID].modified) {
            const validateAsDraftResult = validateAsDraft();
            if (validateAsDraftResult) {
                $('#loading-modal-dialog').modal('show');
                saveAsDraft({ redirectUrlWhenSuccess: targetUrlRelative });
            } else {
                scrollToFirstInvalidInput();
                $('#btn-proceed').attr('target-url-relative', targetUrlRelative);
                $('#proceed-modal-dialog').modal('show');
            }
        } else {
            isChangeTabApproved = true;
            proceedToLink(targetUrlRelative);
        }
    });
    function proceedToLink(targetUrlRelative) {
        const baseUrl = new URL(window.location.href).origin;
        const targetUrl = new URL(baseUrl + targetUrlRelative);
        window.location.href = targetUrl.href;
    }
    function scrollToFirstInvalidInput() {
        const invalidInput = $("input.is-invalid:first");
        if (invalidInput.length > 0) { // Check if an invalid input is found
            const offset = invalidInput.offset().top; // Calculate the offset of the invalid input element from the top of the page
            const windowHeight = $(window).height(); // Calculate the height of the viewport
            const scrollPosition = offset - (windowHeight / 2); // Calculate the scroll position to center the invalid input element
            $("html, body").animate({ // Animate the scroll to the center position
                scrollTop: scrollPosition
            }, 1000); // Adjust the duration as needed (in milliseconds)
        }
    }
    function saveAsDraft({ redirectUrlWhenSuccess }) {
        isChangeTabApproved = true;
        let formData = $(`form#${formID}`).serialize();
        $('input[type="checkbox"]').each(function() {
            // Jika checkbox tidak dicentang dan tidak ada di hasil serialize(),
            // tambahkan nilai 0 ke hasil serialize()
            if (!this.checked && formData.indexOf(this.name) === -1) {
                formData += '&' + this.name + '=0';
            }
        });
        $.ajax({
            url: saveAsDraftUrl,
            type: 'POST',
            data: formData,
            success: function(res) {
                const $errorDiv = $(res).find('div.ew-error'); // res is a string containing html document
                $('#loading-modal-dialog').modal('hide');
                if ($errorDiv.length > 0) {
                    ew.showToast($errorDiv.text());
                } else {
                    proceedToLink(redirectUrlWhenSuccess);
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                $('#loading-modal-dialog').modal('hide');
                isChangeTabApproved = false;
                ew.showToast(errorThrown);
            }
        });
    }
    function validateAsDraft() {
        let formErrorCount = 0;
        function validateRequiredField(fieldName) {
            const errorMessage = (selectedLanguage.id === 'en-US') ? "Must be filled" : "Harus diisi";
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (fieldValue === '' || fieldValue === null) {
                window[formID].fields[fieldName].addError({ custom: errorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessage });
                return false;
            } else {
                return true;
            }
        }
        function validateFieldWithRegex(fieldName, errorMessage, regex) {
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (fieldValue !== '' && !regex.test(fieldValue)) {
                window[formID].fields[fieldName].addError({ custom: errorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessage });
                return false;
            } else {
                return true;
            }
        }
        const foreignVisaHasBeenDeniedChecked = $('#x_ForeignVisaHasBeenDenied')[0].checked;
        if (foreignVisaHasBeenDeniedChecked) {
            if (!validateRequiredField("ForeignVisaDenied_CountryID")) {
                formErrorCount += 1;
            }
            if (!validateRequiredField("ForeignVisaDeniedReason")) {
                formErrorCount += 1;
            }
        }
        const hasMaritimeAccidentChecked = $('#x_HasMaritimeAccidentOrCourtOfEnquiry')[0].checked;
        if (hasMaritimeAccidentChecked) {
            if (!validateRequiredField("HasMaritimeAccidentOrCourtOfEnquiryDetails")) {
                formErrorCount += 1;
            }
        }
        function isEmptyOrNull(value) {
            return (value === '' || value === null);
        }
        const companyTelephoneEmptyErrorMessage = (selectedLanguage.id === 'en-US') ? "Can't be empty when filling " : "Tidak boleh kosong ketika mengisi";
        const companyTelephoneNumberRegexErrorMessage = (selectedLanguage.id === 'en-US') ? "Can contain 7-20 digits only" : "Hanya boleh mengandung 7-20 angka";
        const companyTelephoneNumberRegex = /^\d{7,20}$/;
        const reference1CompanyTelephoneCodeValue = $("#x_Reference1CompanyTelephoneCode_CountryID").val();
        const reference1CompanyTelephoneNumberValue = $("#x_Reference1CompanyTelephone").val();
        const reference2CompanyTelephoneCodeValue = $("#x_Reference2CompanyTelephoneCode_CountryID").val();
        const reference2CompanyTelephoneNumberValue = $("#x_Reference2CompanyTelephone").val();
        const companyTelephoneCodeCaption = (selectedLanguage.id === 'en-US') ? "country code" : "kode negara";
        const companyTelephoneNumberCaption = $('label[for="x_Reference1CompanyTelephone"]').text();
        if (isEmptyOrNull(reference1CompanyTelephoneCodeValue) && !isEmptyOrNull(reference1CompanyTelephoneNumberValue)) {
            const errorMessage = `${companyTelephoneEmptyErrorMessage}${companyTelephoneNumberCaption}`;
            window[formID].fields["Reference1CompanyTelephoneCode_CountryID"].addError({ custom: errorMessage });
            window[formID].fields["Reference1CompanyTelephoneCode_CountryID"].updateFeedback();
            window[formID].addError("Reference1CompanyTelephoneCode_CountryID", { custom: errorMessage });  
            formErrorCount += 1;
        }
        if (!isEmptyOrNull(reference1CompanyTelephoneCodeValue) && isEmptyOrNull(reference1CompanyTelephoneNumberValue)) {
            const errorMessage = `${companyTelephoneEmptyErrorMessage}${companyTelephoneCodeCaption}`;
            window[formID].fields["Reference1CompanyTelephone"].addError({ custom: errorMessage });
            window[formID].fields["Reference1CompanyTelephone"].updateFeedback();
            window[formID].addError("Reference1CompanyTelephone", { custom: errorMessage });  
            formErrorCount += 1;
        }
        if (!isEmptyOrNull(reference1CompanyTelephoneCodeValue) && !isEmptyOrNull(reference1CompanyTelephoneNumberValue)) {
            formErrorCount += validateFieldWithRegex("Reference1CompanyTelephone",  companyTelephoneNumberRegexErrorMessage, companyTelephoneNumberRegex) ? 0 : 1;
        }
        if (isEmptyOrNull(reference2CompanyTelephoneCodeValue) && !isEmptyOrNull(reference2CompanyTelephoneNumberValue)) {
            const errorMessage = `${companyTelephoneEmptyErrorMessage}${companyTelephoneNumberCaption}`;
            window[formID].fields["Reference2CompanyTelephoneCode_CountryID"].addError({ custom: errorMessage });
            window[formID].fields["Reference2CompanyTelephoneCode_CountryID"].updateFeedback();
            window[formID].addError("Reference2CompanyTelephoneCode_CountryID", { custom: errorMessage });    
            formErrorCount += 1;
        }
        if (!isEmptyOrNull(reference2CompanyTelephoneCodeValue) && isEmptyOrNull(reference2CompanyTelephoneNumberValue)) {
            const errorMessage = `${companyTelephoneEmptyErrorMessage}${companyTelephoneCodeCaption}`;
            window[formID].fields["Reference2CompanyTelephone"].addError({ custom: errorMessage });
            window[formID].fields["Reference2CompanyTelephone"].updateFeedback();
            window[formID].addError("Reference2CompanyTelephone", { custom: errorMessage });   
            formErrorCount += 1;
        }
        if (!isEmptyOrNull(reference2CompanyTelephoneCodeValue) && !isEmptyOrNull(reference2CompanyTelephoneNumberValue)) {
            formErrorCount += validateFieldWithRegex("Reference2CompanyTelephone",  companyTelephoneNumberRegexErrorMessage, companyTelephoneNumberRegex) ? 0 : 1;
        }
        return formErrorCount === 0;
    }

    // gmandayu: notification need to read.
    const getUnreadNotificationUrl = `${parentUrl}api/Notification/unread-notification`;
    function loadPage() {
        $.ajax({
            url: getUnreadNotificationUrl,
            method: 'GET',
            success: function(response) {
                const notificationIcon = document.querySelector('.nav-icon.fa-bell');
                if(response.success)
                {
                    notificationIcon.classList.add('animate');
                }
                else 
                {
                    notificationIcon.classList.remove('animate');
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                console.error('Kesalahan saat memuat notifikasi:', errorThrown);
            }
        });
    }
    $(document).ready(function() {
        loadPage();
    });
});
</script>
