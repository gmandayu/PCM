@{
    // View
    View = this;

    // Check action result
    if (crewFamilyForAdminViewModeEdit.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!crewFamilyForAdminViewModeEdit.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@crewFamilyForAdminViewModeEdit.ShowPageHeader()
@crewFamilyForAdminViewModeEdit.ShowMessages()
<main class="edit">
<form name="fCrewFamilyForAdminViewModeedit" id="fCrewFamilyForAdminViewModeedit" class="@(crewFamilyForAdminViewModeEdit.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
<script>
var currentTable = @Html.Raw(ConvertToJson(crewFamilyForAdminViewModeEdit.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { CrewFamilyForAdminViewMode: currentTable } });
var currentPageID = ew.PAGE_ID = "edit";
var currentForm;
var fCrewFamilyForAdminViewModeedit;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fCrewFamilyForAdminViewModeedit")
        .setPageId("edit")

        // Add fields
        .setFields([

            ["MTCrewID", [fields.MTCrewID.visible && fields.MTCrewID.required ? ew.Validators.required(fields.MTCrewID.caption) : null], fields.MTCrewID.isInvalid],
            ["Relationship", [fields.Relationship.visible && fields.Relationship.required ? ew.Validators.required(fields.Relationship.caption) : null], fields.Relationship.isInvalid],
            ["FullName", [fields.FullName.visible && fields.FullName.required ? ew.Validators.required(fields.FullName.caption) : null], fields.FullName.isInvalid],
            ["Gender", [fields.Gender.visible && fields.Gender.required ? ew.Validators.required(fields.Gender.caption) : null], fields.Gender.isInvalid],
            ["DateOfBirth", [fields.DateOfBirth.visible && fields.DateOfBirth.required ? ew.Validators.required(fields.DateOfBirth.caption) : null, ew.Validators.datetime(fields.DateOfBirth.clientFormatPattern)], fields.DateOfBirth.isInvalid],
            ["MobileNumberCode_CountryID", [fields.MobileNumberCode_CountryID.visible && fields.MobileNumberCode_CountryID.required ? ew.Validators.required(fields.MobileNumberCode_CountryID.caption) : null], fields.MobileNumberCode_CountryID.isInvalid],
            ["MobileNumber", [fields.MobileNumber.visible && fields.MobileNumber.required ? ew.Validators.required(fields.MobileNumber.caption) : null], fields.MobileNumber.isInvalid],
            ["_Email", [fields._Email.visible && fields._Email.required ? ew.Validators.required(fields._Email.caption) : null], fields._Email.isInvalid],
            ["SocialSecurityNumber", [fields.SocialSecurityNumber.visible && fields.SocialSecurityNumber.required ? ew.Validators.required(fields.SocialSecurityNumber.caption) : null], fields.SocialSecurityNumber.isInvalid],
            ["FamilyRegisterNumber", [fields.FamilyRegisterNumber.visible && fields.FamilyRegisterNumber.required ? ew.Validators.required(fields.FamilyRegisterNumber.caption) : null], fields.FamilyRegisterNumber.isInvalid],
            ["Address", [fields.Address.visible && fields.Address.required ? ew.Validators.required(fields.Address.caption) : null], fields.Address.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "Relationship": @Html.Raw(crewFamilyForAdminViewModeEdit.Relationship.ToClientList(crewFamilyForAdminViewModeEdit)),
            "Gender": @Html.Raw(crewFamilyForAdminViewModeEdit.Gender.ToClientList(crewFamilyForAdminViewModeEdit)),
            "MobileNumberCode_CountryID": @Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.ToClientList(crewFamilyForAdminViewModeEdit)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="update">
<input type="hidden" name="modal" value="@ConvertToInt(crewFamilyForAdminViewModeEdit.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(crewFamilyForAdminViewModeEdit.OldKeyName)" value="@Html.Raw(crewFamilyForAdminViewModeEdit.OldKey)">
<div class="ew-edit-div d-none"><!-- page* -->
@if (crewFamilyForAdminViewModeEdit.MTCrewID.Visible) { // crewFamilyForAdminViewModeEdit.MTCrewID.Visible (begin)
    <div id="r_MTCrewID" @Html.Raw(crewFamilyForAdminViewModeEdit.MTCrewID.RowAttributes)>
        <label id="elh_CrewFamilyForAdminViewMode_MTCrewID" for="x_MTCrewID" class="@(crewFamilyForAdminViewModeEdit.LeftColumnClass)"><template id="tpc_CrewFamilyForAdminViewMode_MTCrewID">@Html.Raw(crewFamilyForAdminViewModeEdit.MTCrewID.Caption)@Html.Raw(crewFamilyForAdminViewModeEdit.MTCrewID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFamilyForAdminViewModeEdit.RightColumnClass)"><div @Html.Raw(crewFamilyForAdminViewModeEdit.MTCrewID.CellAttributes)>
<template id="tpx_CrewFamilyForAdminViewMode_MTCrewID"><span id="el_CrewFamilyForAdminViewMode_MTCrewID">
<input type="@(crewFamilyForAdminViewModeEdit.MTCrewID.InputTextType)" name="x_MTCrewID" id="x_MTCrewID" data-table="CrewFamilyForAdminViewMode" data-field="x_MTCrewID" value="@Html.Raw(crewFamilyForAdminViewModeEdit.MTCrewID.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(crewFamilyForAdminViewModeEdit.MTCrewID.PlaceHolder))" data-format-pattern="@(crewFamilyForAdminViewModeEdit.MTCrewID.FormatPattern)"@Html.Raw(crewFamilyForAdminViewModeEdit.MTCrewID.EditAttributes) aria-describedby="x_MTCrewID_help">
@Html.Raw(crewFamilyForAdminViewModeEdit.MTCrewID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFamilyForAdminViewModeEdit.MTCrewID.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewFamilyForAdminViewModeEdit.MTCrewID.Visible (end) *@
@if (crewFamilyForAdminViewModeEdit.Relationship.Visible) { // crewFamilyForAdminViewModeEdit.Relationship.Visible (begin)
    <div id="r_Relationship" @Html.Raw(crewFamilyForAdminViewModeEdit.Relationship.RowAttributes)>
        <label id="elh_CrewFamilyForAdminViewMode_Relationship" for="x_Relationship" class="@(crewFamilyForAdminViewModeEdit.LeftColumnClass)"><template id="tpc_CrewFamilyForAdminViewMode_Relationship">@Html.Raw(crewFamilyForAdminViewModeEdit.Relationship.Caption)@Html.Raw(crewFamilyForAdminViewModeEdit.Relationship.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFamilyForAdminViewModeEdit.RightColumnClass)"><div @Html.Raw(crewFamilyForAdminViewModeEdit.Relationship.CellAttributes)>
<template id="tpx_CrewFamilyForAdminViewMode_Relationship"><span id="el_CrewFamilyForAdminViewMode_Relationship">
    <select
        id="x_Relationship"
        name="x_Relationship"
        class="form-select ew-select@(crewFamilyForAdminViewModeEdit.Relationship.IsInvalidClass)"
        data-select2-id="fCrewFamilyForAdminViewModeedit_x_Relationship"
        data-table="CrewFamilyForAdminViewMode"
        data-field="x_Relationship"
        data-value-separator="@(crewFamilyForAdminViewModeEdit.Relationship.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewFamilyForAdminViewModeEdit.Relationship.PlaceHolder))"
        @Html.Raw(crewFamilyForAdminViewModeEdit.Relationship.EditAttributes)>
        @(crewFamilyForAdminViewModeEdit.Relationship.SelectOptionListHtml("x_Relationship"))
    </select>
    @Html.Raw(crewFamilyForAdminViewModeEdit.Relationship.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewFamilyForAdminViewModeEdit.Relationship.GetErrorMessage())</div>
<script>
loadjs.ready("fCrewFamilyForAdminViewModeedit", function() {
    var options = { name: "x_Relationship", selectId: "fCrewFamilyForAdminViewModeedit_x_Relationship" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewFamilyForAdminViewModeedit.lists.Relationship?.lookupOptions.length) {
        options.data = { id: "x_Relationship", form: "fCrewFamilyForAdminViewModeedit" };
    } else {
        options.ajax = { id: "x_Relationship", form: "fCrewFamilyForAdminViewModeedit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewFamilyForAdminViewMode.fields.Relationship.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewFamilyForAdminViewModeEdit.Relationship.Visible (end) *@
@if (crewFamilyForAdminViewModeEdit.FullName.Visible) { // crewFamilyForAdminViewModeEdit.FullName.Visible (begin)
    <div id="r_FullName" @Html.Raw(crewFamilyForAdminViewModeEdit.FullName.RowAttributes)>
        <label id="elh_CrewFamilyForAdminViewMode_FullName" for="x_FullName" class="@(crewFamilyForAdminViewModeEdit.LeftColumnClass)"><template id="tpc_CrewFamilyForAdminViewMode_FullName">@Html.Raw(crewFamilyForAdminViewModeEdit.FullName.Caption)@Html.Raw(crewFamilyForAdminViewModeEdit.FullName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFamilyForAdminViewModeEdit.RightColumnClass)"><div @Html.Raw(crewFamilyForAdminViewModeEdit.FullName.CellAttributes)>
<template id="tpx_CrewFamilyForAdminViewMode_FullName"><span id="el_CrewFamilyForAdminViewMode_FullName">
<input type="@(crewFamilyForAdminViewModeEdit.FullName.InputTextType)" name="x_FullName" id="x_FullName" data-table="CrewFamilyForAdminViewMode" data-field="x_FullName" value="@Html.Raw(crewFamilyForAdminViewModeEdit.FullName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewFamilyForAdminViewModeEdit.FullName.PlaceHolder))" data-format-pattern="@(crewFamilyForAdminViewModeEdit.FullName.FormatPattern)"@Html.Raw(crewFamilyForAdminViewModeEdit.FullName.EditAttributes) aria-describedby="x_FullName_help">
@Html.Raw(crewFamilyForAdminViewModeEdit.FullName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFamilyForAdminViewModeEdit.FullName.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewFamilyForAdminViewModeEdit.FullName.Visible (end) *@
@if (crewFamilyForAdminViewModeEdit.Gender.Visible) { // crewFamilyForAdminViewModeEdit.Gender.Visible (begin)
    <div id="r_Gender" @Html.Raw(crewFamilyForAdminViewModeEdit.Gender.RowAttributes)>
        <label id="elh_CrewFamilyForAdminViewMode_Gender" for="x_Gender" class="@(crewFamilyForAdminViewModeEdit.LeftColumnClass)"><template id="tpc_CrewFamilyForAdminViewMode_Gender">@Html.Raw(crewFamilyForAdminViewModeEdit.Gender.Caption)@Html.Raw(crewFamilyForAdminViewModeEdit.Gender.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFamilyForAdminViewModeEdit.RightColumnClass)"><div @Html.Raw(crewFamilyForAdminViewModeEdit.Gender.CellAttributes)>
<template id="tpx_CrewFamilyForAdminViewMode_Gender"><span id="el_CrewFamilyForAdminViewMode_Gender">
    <select
        id="x_Gender"
        name="x_Gender"
        class="form-select ew-select@(crewFamilyForAdminViewModeEdit.Gender.IsInvalidClass)"
        data-select2-id="fCrewFamilyForAdminViewModeedit_x_Gender"
        data-table="CrewFamilyForAdminViewMode"
        data-field="x_Gender"
        data-value-separator="@(crewFamilyForAdminViewModeEdit.Gender.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewFamilyForAdminViewModeEdit.Gender.PlaceHolder))"
        @Html.Raw(crewFamilyForAdminViewModeEdit.Gender.EditAttributes)>
        @(crewFamilyForAdminViewModeEdit.Gender.SelectOptionListHtml("x_Gender"))
    </select>
    @Html.Raw(crewFamilyForAdminViewModeEdit.Gender.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewFamilyForAdminViewModeEdit.Gender.GetErrorMessage())</div>
<script>
loadjs.ready("fCrewFamilyForAdminViewModeedit", function() {
    var options = { name: "x_Gender", selectId: "fCrewFamilyForAdminViewModeedit_x_Gender" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewFamilyForAdminViewModeedit.lists.Gender?.lookupOptions.length) {
        options.data = { id: "x_Gender", form: "fCrewFamilyForAdminViewModeedit" };
    } else {
        options.ajax = { id: "x_Gender", form: "fCrewFamilyForAdminViewModeedit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewFamilyForAdminViewMode.fields.Gender.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewFamilyForAdminViewModeEdit.Gender.Visible (end) *@
@if (crewFamilyForAdminViewModeEdit.DateOfBirth.Visible) { // crewFamilyForAdminViewModeEdit.DateOfBirth.Visible (begin)
    <div id="r_DateOfBirth" @Html.Raw(crewFamilyForAdminViewModeEdit.DateOfBirth.RowAttributes)>
        <label id="elh_CrewFamilyForAdminViewMode_DateOfBirth" for="x_DateOfBirth" class="@(crewFamilyForAdminViewModeEdit.LeftColumnClass)"><template id="tpc_CrewFamilyForAdminViewMode_DateOfBirth">@Html.Raw(crewFamilyForAdminViewModeEdit.DateOfBirth.Caption)@Html.Raw(crewFamilyForAdminViewModeEdit.DateOfBirth.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFamilyForAdminViewModeEdit.RightColumnClass)"><div @Html.Raw(crewFamilyForAdminViewModeEdit.DateOfBirth.CellAttributes)>
<template id="tpx_CrewFamilyForAdminViewMode_DateOfBirth"><span id="el_CrewFamilyForAdminViewMode_DateOfBirth">
<input type="@(crewFamilyForAdminViewModeEdit.DateOfBirth.InputTextType)" name="x_DateOfBirth" id="x_DateOfBirth" data-table="CrewFamilyForAdminViewMode" data-field="x_DateOfBirth" value="@Html.Raw(crewFamilyForAdminViewModeEdit.DateOfBirth.EditValue)" placeholder="@Html.Raw(HtmlEncode(crewFamilyForAdminViewModeEdit.DateOfBirth.PlaceHolder))" data-format-pattern="@(crewFamilyForAdminViewModeEdit.DateOfBirth.FormatPattern)"@Html.Raw(crewFamilyForAdminViewModeEdit.DateOfBirth.EditAttributes) aria-describedby="x_DateOfBirth_help">
@Html.Raw(crewFamilyForAdminViewModeEdit.DateOfBirth.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFamilyForAdminViewModeEdit.DateOfBirth.GetErrorMessage())</div>
@if (!crewFamilyForAdminViewModeEdit.DateOfBirth.ReadOnly && !crewFamilyForAdminViewModeEdit.DateOfBirth.Disabled && !crewFamilyForAdminViewModeEdit.DateOfBirth.EditAttrs.Is("readonly") && !crewFamilyForAdminViewModeEdit.DateOfBirth.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fCrewFamilyForAdminViewModeedit", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fCrewFamilyForAdminViewModeedit", "x_DateOfBirth", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span></template>
</div></div>
    </div>
} @* crewFamilyForAdminViewModeEdit.DateOfBirth.Visible (end) *@
@if (crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.Visible) { // crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.Visible (begin)
    <div id="r_MobileNumberCode_CountryID" @Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.RowAttributes)>
        <label id="elh_CrewFamilyForAdminViewMode_MobileNumberCode_CountryID" for="x_MobileNumberCode_CountryID" class="@(crewFamilyForAdminViewModeEdit.LeftColumnClass)"><template id="tpc_CrewFamilyForAdminViewMode_MobileNumberCode_CountryID">@Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.Caption)@Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFamilyForAdminViewModeEdit.RightColumnClass)"><div @Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.CellAttributes)>
<template id="tpx_CrewFamilyForAdminViewMode_MobileNumberCode_CountryID"><span id="el_CrewFamilyForAdminViewMode_MobileNumberCode_CountryID">
    <select
        id="x_MobileNumberCode_CountryID"
        name="x_MobileNumberCode_CountryID"
        class="form-select ew-select@(crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.IsInvalidClass)"
        data-select2-id="fCrewFamilyForAdminViewModeedit_x_MobileNumberCode_CountryID"
        data-table="CrewFamilyForAdminViewMode"
        data-field="x_MobileNumberCode_CountryID"
        data-value-separator="@(crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.PlaceHolder))"
        @Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.EditAttributes)>
        @(crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.SelectOptionListHtml("x_MobileNumberCode_CountryID"))
    </select>
    @Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.GetErrorMessage())</div>
@Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.Lookup.GetParamTag(crewFamilyForAdminViewModeEdit, "p_x_MobileNumberCode_CountryID"))
<script>
loadjs.ready("fCrewFamilyForAdminViewModeedit", function() {
    var options = { name: "x_MobileNumberCode_CountryID", selectId: "fCrewFamilyForAdminViewModeedit_x_MobileNumberCode_CountryID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewFamilyForAdminViewModeedit.lists.MobileNumberCode_CountryID?.lookupOptions.length) {
        options.data = { id: "x_MobileNumberCode_CountryID", form: "fCrewFamilyForAdminViewModeedit" };
    } else {
        options.ajax = { id: "x_MobileNumberCode_CountryID", form: "fCrewFamilyForAdminViewModeedit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumInputLength = ew.selectMinimumInputLength;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewFamilyForAdminViewMode.fields.MobileNumberCode_CountryID.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewFamilyForAdminViewModeEdit.MobileNumberCode_CountryID.Visible (end) *@
@if (crewFamilyForAdminViewModeEdit.MobileNumber.Visible) { // crewFamilyForAdminViewModeEdit.MobileNumber.Visible (begin)
    <div id="r_MobileNumber" @Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumber.RowAttributes)>
        <label id="elh_CrewFamilyForAdminViewMode_MobileNumber" for="x_MobileNumber" class="@(crewFamilyForAdminViewModeEdit.LeftColumnClass)"><template id="tpc_CrewFamilyForAdminViewMode_MobileNumber">@Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumber.Caption)@Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumber.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFamilyForAdminViewModeEdit.RightColumnClass)"><div @Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumber.CellAttributes)>
<template id="tpx_CrewFamilyForAdminViewMode_MobileNumber"><span id="el_CrewFamilyForAdminViewMode_MobileNumber">
<input type="@(crewFamilyForAdminViewModeEdit.MobileNumber.InputTextType)" name="x_MobileNumber" id="x_MobileNumber" data-table="CrewFamilyForAdminViewMode" data-field="x_MobileNumber" value="@Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumber.EditValue)" size="30" maxlength="20" placeholder="@Html.Raw(HtmlEncode(crewFamilyForAdminViewModeEdit.MobileNumber.PlaceHolder))" data-format-pattern="@(crewFamilyForAdminViewModeEdit.MobileNumber.FormatPattern)"@Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumber.EditAttributes) aria-describedby="x_MobileNumber_help">
@Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumber.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumber.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewFamilyForAdminViewModeEdit.MobileNumber.Visible (end) *@
@if (crewFamilyForAdminViewModeEdit._Email.Visible) { // crewFamilyForAdminViewModeEdit._Email.Visible (begin)
    <div id="r__Email" @Html.Raw(crewFamilyForAdminViewModeEdit._Email.RowAttributes)>
        <label id="elh_CrewFamilyForAdminViewMode__Email" for="x__Email" class="@(crewFamilyForAdminViewModeEdit.LeftColumnClass)"><template id="tpc_CrewFamilyForAdminViewMode__Email">@Html.Raw(crewFamilyForAdminViewModeEdit._Email.Caption)@Html.Raw(crewFamilyForAdminViewModeEdit._Email.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFamilyForAdminViewModeEdit.RightColumnClass)"><div @Html.Raw(crewFamilyForAdminViewModeEdit._Email.CellAttributes)>
<template id="tpx_CrewFamilyForAdminViewMode__Email"><span id="el_CrewFamilyForAdminViewMode__Email">
<input type="@(crewFamilyForAdminViewModeEdit._Email.InputTextType)" name="x__Email" id="x__Email" data-table="CrewFamilyForAdminViewMode" data-field="x__Email" value="@Html.Raw(crewFamilyForAdminViewModeEdit._Email.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewFamilyForAdminViewModeEdit._Email.PlaceHolder))" data-format-pattern="@(crewFamilyForAdminViewModeEdit._Email.FormatPattern)"@Html.Raw(crewFamilyForAdminViewModeEdit._Email.EditAttributes) aria-describedby="x__Email_help">
@Html.Raw(crewFamilyForAdminViewModeEdit._Email.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFamilyForAdminViewModeEdit._Email.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewFamilyForAdminViewModeEdit._Email.Visible (end) *@
@if (crewFamilyForAdminViewModeEdit.SocialSecurityNumber.Visible) { // crewFamilyForAdminViewModeEdit.SocialSecurityNumber.Visible (begin)
    <div id="r_SocialSecurityNumber" @Html.Raw(crewFamilyForAdminViewModeEdit.SocialSecurityNumber.RowAttributes)>
        <label id="elh_CrewFamilyForAdminViewMode_SocialSecurityNumber" for="x_SocialSecurityNumber" class="@(crewFamilyForAdminViewModeEdit.LeftColumnClass)"><template id="tpc_CrewFamilyForAdminViewMode_SocialSecurityNumber">@Html.Raw(crewFamilyForAdminViewModeEdit.SocialSecurityNumber.Caption)@Html.Raw(crewFamilyForAdminViewModeEdit.SocialSecurityNumber.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFamilyForAdminViewModeEdit.RightColumnClass)"><div @Html.Raw(crewFamilyForAdminViewModeEdit.SocialSecurityNumber.CellAttributes)>
<template id="tpx_CrewFamilyForAdminViewMode_SocialSecurityNumber"><span id="el_CrewFamilyForAdminViewMode_SocialSecurityNumber">
<input type="@(crewFamilyForAdminViewModeEdit.SocialSecurityNumber.InputTextType)" name="x_SocialSecurityNumber" id="x_SocialSecurityNumber" data-table="CrewFamilyForAdminViewMode" data-field="x_SocialSecurityNumber" value="@Html.Raw(crewFamilyForAdminViewModeEdit.SocialSecurityNumber.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewFamilyForAdminViewModeEdit.SocialSecurityNumber.PlaceHolder))" data-format-pattern="@(crewFamilyForAdminViewModeEdit.SocialSecurityNumber.FormatPattern)"@Html.Raw(crewFamilyForAdminViewModeEdit.SocialSecurityNumber.EditAttributes) aria-describedby="x_SocialSecurityNumber_help">
@Html.Raw(crewFamilyForAdminViewModeEdit.SocialSecurityNumber.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFamilyForAdminViewModeEdit.SocialSecurityNumber.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewFamilyForAdminViewModeEdit.SocialSecurityNumber.Visible (end) *@
@if (crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.Visible) { // crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.Visible (begin)
    <div id="r_FamilyRegisterNumber" @Html.Raw(crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.RowAttributes)>
        <label id="elh_CrewFamilyForAdminViewMode_FamilyRegisterNumber" for="x_FamilyRegisterNumber" class="@(crewFamilyForAdminViewModeEdit.LeftColumnClass)"><template id="tpc_CrewFamilyForAdminViewMode_FamilyRegisterNumber">@Html.Raw(crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.Caption)@Html.Raw(crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFamilyForAdminViewModeEdit.RightColumnClass)"><div @Html.Raw(crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.CellAttributes)>
<template id="tpx_CrewFamilyForAdminViewMode_FamilyRegisterNumber"><span id="el_CrewFamilyForAdminViewMode_FamilyRegisterNumber">
<input type="@(crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.InputTextType)" name="x_FamilyRegisterNumber" id="x_FamilyRegisterNumber" data-table="CrewFamilyForAdminViewMode" data-field="x_FamilyRegisterNumber" value="@Html.Raw(crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.PlaceHolder))" data-format-pattern="@(crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.FormatPattern)"@Html.Raw(crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.EditAttributes) aria-describedby="x_FamilyRegisterNumber_help">
@Html.Raw(crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.Visible (end) *@
@if (crewFamilyForAdminViewModeEdit.Address.Visible) { // crewFamilyForAdminViewModeEdit.Address.Visible (begin)
    <div id="r_Address" @Html.Raw(crewFamilyForAdminViewModeEdit.Address.RowAttributes)>
        <label id="elh_CrewFamilyForAdminViewMode_Address" for="x_Address" class="@(crewFamilyForAdminViewModeEdit.LeftColumnClass)"><template id="tpc_CrewFamilyForAdminViewMode_Address">@Html.Raw(crewFamilyForAdminViewModeEdit.Address.Caption)@Html.Raw(crewFamilyForAdminViewModeEdit.Address.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFamilyForAdminViewModeEdit.RightColumnClass)"><div @Html.Raw(crewFamilyForAdminViewModeEdit.Address.CellAttributes)>
<template id="tpx_CrewFamilyForAdminViewMode_Address"><span id="el_CrewFamilyForAdminViewMode_Address">
<textarea data-table="CrewFamilyForAdminViewMode" data-field="x_Address" name="x_Address" id="x_Address" cols="50" rows="4" placeholder="@Html.Raw(HtmlEncode(crewFamilyForAdminViewModeEdit.Address.PlaceHolder))"@Html.Raw(crewFamilyForAdminViewModeEdit.Address.EditAttributes) aria-describedby="x_Address_help">@(crewFamilyForAdminViewModeEdit.Address.EditValue)</textarea>
@Html.Raw(crewFamilyForAdminViewModeEdit.Address.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFamilyForAdminViewModeEdit.Address.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewFamilyForAdminViewModeEdit.Address.Visible (end) *@
</div><!-- /page* -->
    <input type="hidden" data-table="CrewFamilyForAdminViewMode" data-field="x_ID" data-hidden="1" name="x_ID" id="x_ID" value="@Html.Raw(HtmlEncode(crewFamilyForAdminViewModeEdit.ID.CurrentValue))">
<div id="tpd_CrewFamilyForAdminViewModeedit" class="ew-custom-template"></div>
<template id="tpm_CrewFamilyForAdminViewModeedit">
<div id="ct_crewFamilyForAdminViewModeEdit">    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewPersonalDataForAdminViewModeView")">
                @(CurrentLanguage == "en-US" ? "PERSONAL DATA" : "DATA PERSONAL")
            </a>     
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewDocumentForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "DOCUMENTS" : "DOKUMEN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewBankAccountForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "BANK ACCOUNT" : "REKENING BANK")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFamilyForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "FAMILY" : "KELUARGA")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFormalEducationForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "FORMAL EDUCATION" : "PENDIDIKAN FORMAL")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalCertificateForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "MEDICAL CERTIFICATE / TEST" : "SERTIFIKAT / TES MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewCertificateForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "CERTIFICATES AND QUALIFICATIONS" : "SERTIFIKAT DAN KUALIFIKASI")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewExperienceForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "SEA EXPERIENCE" : "PENGALAMAN BERLAYAR")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewAppraisalForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "APPRAISALS" : "PENILAIAN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalHistoryForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "MEDICAL HISTORY" : "RIWAYAT MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewGeneralDataForAdminViewModeView")">
                @(CurrentLanguage == "en-US" ? "GENERAL" : "UMUM")
            </a>
        </li>
    </ul>  
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_Relationship" class="mb-2 row">
                <label for="x_Relationship" class="col-form-label">@Html.Raw(crewFamilyForAdminViewModeEdit.Relationship.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewFamilyForAdminViewMode_Relationship"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_FullName" class="mb-2 row">
                <label for="x_FullName" class="col-form-label">@Html.Raw(crewFamilyForAdminViewModeEdit.FullName.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewFamilyForAdminViewMode_FullName"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_Gender" class="mb-2 row">
                <label for="x_Gender" class="col-form-label">@Html.Raw(crewFamilyForAdminViewModeEdit.Gender.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewFamilyForAdminViewMode_Gender"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_DateOfBirth" class="mb-2 row">
                <label for="x_DateOfBirth" class="col-form-label">@Html.Raw(crewFamilyForAdminViewModeEdit.DateOfBirth.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewFamilyForAdminViewMode_DateOfBirth"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_MobileNumber" class="mb-2 row">
                <label for="x_MobileNumber" class="col-form-label">
                    @Html.Raw(crewFamilyForAdminViewModeEdit.MobileNumber.Caption) @(CurrentLanguage == "en-US" ? "(Without Leading Zero)" : "(Tanpa Diawali 0)")<i class="fa-solid fa-asterisk ew-required"></i>
                </label>
                <div class="mb-2 row">
                    <div class="col-sm-6">
                        <slot class="ew-slot" name="tpx_CrewFamilyForAdminViewMode_MobileNumberCode_CountryID"></slot>
                    </div>
                    <div class="col-sm-6">  
                        <slot class="ew-slot" name="tpx_CrewFamilyForAdminViewMode_MobileNumber"></slot>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r__Email" class="mb-2 row">
                <label for="x__Email" class="col-form-label">@Html.Raw(crewFamilyForAdminViewModeEdit._Email.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewFamilyForAdminViewMode__Email"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_SocialSecurityNumber" class="mb-2 row">
                <label for="x_SocialSecurityNumber" class="col-form-label">@Html.Raw(crewFamilyForAdminViewModeEdit.SocialSecurityNumber.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewFamilyForAdminViewMode_SocialSecurityNumber"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_FamilyRegisterNumber" class="mb-2 row">
                <label for="x_FamilyRegisterNumber" class="col-form-label">@Html.Raw(crewFamilyForAdminViewModeEdit.FamilyRegisterNumber.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewFamilyForAdminViewMode_FamilyRegisterNumber"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_Address" class="mb-2 row">
                <label for="x_Address" class="col-form-label">@Html.Raw(crewFamilyForAdminViewModeEdit.Address.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewFamilyForAdminViewMode_Address"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
        </div>
    </div>
    <div class="row"><!-- buttons .row -->
        <div class="d-flex mb-2"><!-- buttons offset -->
            <button class="btn btn-primary ew-btn ms-auto primary-black-clr gray-bg" id="btn-update-entry">
                @(CurrentLanguage == "en-US" ? "Update Entry" : "Ubah")
            </button>
        </div><!-- /buttons offset -->
    </div>
    <div id="r_MTCrewID" class="mb-3 row">
        <label for="x_MTCrewID" class="col-sm-2 col-form-label">@Html.Raw(crewFamilyForAdminViewModeEdit.MTCrewID.Caption)</label>
        <div class="col-sm-10"><slot class="ew-slot" name="tpx_CrewFamilyForAdminViewMode_MTCrewID"></slot></div>
    </div>
    <div id="proceed-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="proceed-modal-dialog-title" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="proceed-modal-dialog-title" class="modal-title">
                        @(CurrentLanguage == "en-US" ? "Warning" : "Peringatan")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p> 
                        @{
                            if (CurrentLanguage == "en-US")
                            {
                                <span>There are error(s) in this tab.</span><br/>
                                <span>If you choose to Proceed, any unsaved data will be lost.</span><br/>
                                <span>Do you want to Proceed?</span>
                            }
                            else
                            {
                                <span>Masih ada error di tab ini.</span><br/>
                                <span>Jika Anda memilih Lanjutkan, data yang belum disimpan akan hilang.</span><br/>
                                <span>Apakah Anda ingin melanjutkan?</span>
                            }
                        }
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger ew-btn" id="btn-proceed" type="button">
                        @(CurrentLanguage == "en-US" ? "Proceed" : "Lanjutkan")
                    </button>
                    <button class="btn btn-default ew-btn" id="btn-proceed-cancel" type="button" data-bs-dismiss="modal">
                        @(CurrentLanguage == "en-US" ? "Cancel" : "Batal")
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div id="loading-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-center mb-0">
                        @(CurrentLanguage == "en-US" ? "Saving..." : "Menyimpan...")
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div id="delete-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="delete-modal-dialog-title" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="delete-modal-dialog-title" class="modal-title">
                        @(CurrentLanguage == "en-US" ? "Confirmation" : "Konfirmasi")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        @(CurrentLanguage == "en-US" ? "Are you sure you want to delete?" : "Anda yakin ingin menghapus?")
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary ew-btn" id="btn-delete" type="button">
                        @(CurrentLanguage == "en-US" ? "Yes" : "Iya")
                    </button>
                    <button class="btn btn-default ew-btn" id="btn-delete-cancel" type="button" data-bs-dismiss="modal">
                        @(CurrentLanguage == "en-US" ? "No" : "Tidak")
                    </button>
                </div>
            </div>
        </div>
    </div></div>
</template>
@{ crewFamilyForAdminViewModeEdit.CloseRecordset(); }
@Html.Raw(crewFamilyForAdminViewModeEdit.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(crewFamilyForAdminViewModeEdit.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fCrewFamilyForAdminViewModeedit">@Html.Raw(Language.Phrase("SaveBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fCrewFamilyForAdminViewModeedit" data-href="@AppPath(crewFamilyForAdminViewModeEdit.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(crewFamilyForAdminViewModeEdit.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
<script class="ew-apply-template">
loadjs.ready(ew.applyTemplateId, function() {
    var $ = jQuery;
    ew.templateData = { rows: @Html.Raw(ConvertToJson(crewFamilyForAdminViewModeEdit.Rows)) };
    ew.applyTemplate("tpd_CrewFamilyForAdminViewModeedit", "tpm_CrewFamilyForAdminViewModeedit", "CrewFamilyForAdminViewModeedit", "@(crewFamilyForAdminViewModeEdit.Export)", "CrewFamilyForAdminViewMode", ew.templateData.rows[0], @(crewFamilyForAdminViewModeEdit.IsModal ? "true" : "false"));
    loadjs.done("customtemplate");
});
</script>
</main>
@crewFamilyForAdminViewModeEdit.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("CrewFamilyForAdminViewMode");
});
</script>
<script>
loadjs.ready("load", function() {
    // Startup script
    // Write your table-specific startup script here
    // document.write("page loaded");

    // Get the current URL
    const currentUrlObject = new URL(window.location.href);
    // get the current URL without Add or Edit for assigning active class in tabs
    const currentUrlWithoutAddEditViewList = currentUrlObject.href.replace(/Add|Edit|View|List/g, "");
    // Create a new URLSearchParams object based on the current URL's search parameters
    const urlQueryParams = new URLSearchParams(currentUrlObject.search);
    // Extract the value of the crewID query parameter
    const currentlyEditedCrewID = urlQueryParams.get('crewID');
    const crewFamilyID = parseInt(currentUrlObject.pathname.split('/').pop()); 
    const selectedLanguage = ew.vars['languages']['languages'].filter(obj => obj.selected === true)[0];
    const parentUrl = ew.PATH_BASE;
    const tableName = "CrewFamilyForAdminViewMode";
    const pageType = "edit";
    const pageTypeCapital = "Edit";
    const formID = `f${tableName}${pageType}`;
    const updateEntryUrl = `${parentUrl}${tableName}${pageTypeCapital}/${crewFamilyID}?crewID=${currentlyEditedCrewID}`;
    const listPageUrl = `${parentUrl}${tableName}List?crewID=${currentlyEditedCrewID}`;
    let isChangeTabApproved = false;
    const adminAndEmployeeStatusApi = 'get-admin-and-employee-status';
    $.ajax({
        url: `${parentUrl}api/Registration/${adminAndEmployeeStatusApi}`,
        method: 'GET',
        data: {
            crewID: currentlyEditedCrewID
        },
        success: function(response) {
            if (response.success) {
                // Parse the data in the response
                const isAdmin = response.data.IsAdmin;
                const employeeStatus = response.data.EmployeeStatus;
                if (currentlyEditedCrewID === null) {
                    if (isAdmin) {
                        // redirect to list page with error message: record not found
                        if (employeeStatus === 'Candidate - Draft') {
                            window.location.replace(`${ew.PATH_BASE}RegistrationEdit/-1`);
                        } else if (employeeStatus === 'Candidate - Submitted') {
                            window.location.replace(`${ew.PATH_BASE}VWaitingForPdeReviewView/-1`);
                        }
                    } else {
                        window.location.replace(`${ew.PATH_BASE}index`);
                    }
                }
            } else {
                // Handle the error
                ew.showToast(response.errorMessage);
            }
        },
        error: function(xhr, textStatus, errorThrown) {
            // Handle the error
            ew.showToast(errorThrown);
        }
    });

    // Iterate over each anchor element inside the nav-tabs
    $(".nav-tabs .nav-item a").each(function() {
        const href = $(this).attr("href");
        const hrefWithoutAddEditViewList = href.replace(/Add|Edit|View|List/g, "");
        // Check if the href contains current page's url
        if (currentUrlWithoutAddEditViewList.includes(hrefWithoutAddEditViewList)) {
            // add class and attribute
            $(this).addClass("active");
            $(this).attr("aria-current", "page");
        }
        // Check if the href contains "Edit" or "Add"
        if (href.includes("ViewModeView")) {
            // Add "/" and the currently edited crew ID to the href
            const newHref = href + "/" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        } else if (href.includes("ViewModeList")) {
            // Add "?crewID=" and the currently edited crew ID to the href
            const newHref = href + "?crewID=" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        }
    });

    // start code for auto capitalize first letter of each word
    $('#x_FullName').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    // end code for auto capitalize first letter of each word
    const entryButton = $('<button/>', {
        'class': 'btn btn-primary ew-btn ms-auto primary-black-clr gray-bg',
        'id': 'btn-entry',
        'type': 'button',
        'text': (selectedLanguage.id === 'en-US') ? `Update Entry` : `Ubah`
    }).click(function() {
        const validateUpdateEntryResult = validateUpdateEntry();
        if (validateUpdateEntryResult) {
            $('#loading-modal-dialog').modal('show');
            const targetUrlRelative = listPageUrl;
            updateEntry({ redirectUrlWhenSuccess: targetUrlRelative });
        } else {
            scrollToFirstInvalidInput();
        }
    });
    $('#btn-update-entry').after(entryButton);
    $('#btn-update-entry').remove();
    const originalCancelHref = $('#btn-cancel').attr('data-href');
    const customCancelButton = $('<button/>', {
        'class': 'btn btn-danger ew-btn ms-auto primary-red-bg primary-white-clr',
        'id': 'btn-custom-cancel',
        'type': 'button',
        'text': `${ew.language.phrase("CancelBtn")}`,
    }).click(function() {
        if (window[formID].modified) {
            ew.prompt(ew.language.phrase("ConfirmCancel"), result => {
                if (result) {
                    isChangeTabApproved = true;
                    proceedToLink(originalCancelHref);
                }
                });
        } else {
            isChangeTabApproved = true;
            proceedToLink(originalCancelHref);
        }
    });
    $('#btn-cancel').after(customCancelButton);
    $('#btn-cancel').remove();

    // Target the ol element that has breadcrumb class
    const $breadCrumbOl = $('.breadcrumb').first();

    // Delete the ol element that has breadcrumb class
    $breadCrumbOl.remove();
    $('#btn-action').remove();
    $('.ew-buttons > .col-sm-10').removeClass('col-sm-10').addClass('d-flex mb-3');
    $('.ew-buttons > .offset-sm-2').removeClass('offset-sm-2');

    //  programatically change the value of MTCrewID input and then hide it
    $('#x_MTCrewID').val(currentlyEditedCrewID);
    $('div#r_MTCrewID').hide();
    const genderApi = 'get-opposing-gender-for-admin';
    function getOpposingGender(value) {
        if (value === 'Spouse' || value === "Partner") {
            $.ajax({
                url: `${parentUrl}api/Registration/${genderApi}`,
                method: 'GET',
                data: {
                    crewID: currentlyEditedCrewID
                },
                success: function(response) {
                    if (response.success) {
                        // Parse the data in the response
                        const gender = response.data;
                        if (gender === 'M' || gender === 'F') {
                            $('#x_Gender').val(gender); // Select the option programatically
                            $('#x_Gender').trigger('change'); // Notify any JS components that the value changed
                        }
                    } else {
                        // Handle the error
                        ew.showToast(response.errorMessage);
                    }
                },
                error: function(xhr, textStatus, errorThrown) {
                    // Handle the error
                    ew.showToast(errorThrown);
                }
            });
        }
    }
    getOpposingGender($('#x_Relationship').select2('data')[0].id);
    $('#x_Relationship').on('select2:select', function (e) {
        const value = e.params.data.id;
        getOpposingGender(value);
    });

    // AUTO SAVE WHEN MOVING FROM THIS TAB
    $(window).on('beforeunload', function(event) {
        if (!isChangeTabApproved && window[formID].modified) {
            event.preventDefault();
            event.returnValue = '';
            return '';
        }
    });
    $("#btn-proceed").click(function() {
        isChangeTabApproved = true;
        const targetUrlRelative = $(this).attr('target-url-relative');
        $('#approve-modal-dialog').modal('hide');
        proceedToLink(targetUrlRelative);
    });
    $('ul.nav.nav-tabs li.nav-item a.nav-link').on('click', function(event) {
        event.preventDefault();
        const targetUrlRelative = $(this).attr('href');
        if (window[formID].modified) {
            const validateUpdateEntryResult = validateUpdateEntry();
            if (validateUpdateEntryResult) {
                $('#loading-modal-dialog').modal('show');
                updateEntry({ redirectUrlWhenSuccess: targetUrlRelative });
            } else {
                scrollToFirstInvalidInput();
                $('#btn-proceed').attr('target-url-relative', targetUrlRelative);
                $('#proceed-modal-dialog').modal('show');
            }
        } else {
            isChangeTabApproved = true;
            proceedToLink(targetUrlRelative);
        }
    });
    function proceedToLink(targetUrlRelative) {
        const baseUrl = new URL(window.location.href).origin;
        const targetUrl = new URL(baseUrl + targetUrlRelative);
        window.location.href = targetUrl.href;
    }
    function scrollToFirstInvalidInput() {
        const invalidInput = $("input.is-invalid:first");
        if (invalidInput.length > 0) { // Check if an invalid input is found
            const offset = invalidInput.offset().top; // Calculate the offset of the invalid input element from the top of the page
            const windowHeight = $(window).height(); // Calculate the height of the viewport
            const scrollPosition = offset - (windowHeight / 2); // Calculate the scroll position to center the invalid input element
            $("html, body").animate({ // Animate the scroll to the center position
                scrollTop: scrollPosition
            }, 1000); // Adjust the duration as needed (in milliseconds)
        }
    }
    function updateEntry({ redirectUrlWhenSuccess }) {
        isChangeTabApproved = true;
        let formData = $(`form#${formID}`).serialize();
        $('input[type="checkbox"]').each(function() {
            // Jika checkbox tidak dicentang dan tidak ada di hasil serialize(),
            // tambahkan nilai 0 ke hasil serialize()
            if (!this.checked && formData.indexOf(this.name) === -1) {
                formData += '&' + this.name + '=0';
            }
        });
        $.ajax({
            url: updateEntryUrl,
            type: 'POST',
            data: formData,
            success: function(res) {
                const $errorDiv = $(res).find('div.ew-error'); // res is a string containing html document
                $('#loading-modal-dialog').modal('hide');
                if ($errorDiv.length > 0) {
                    ew.showToast($errorDiv.text());
                } else {
                    proceedToLink(redirectUrlWhenSuccess);
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                $('#loading-modal-dialog').modal('hide');
                isChangeTabApproved = false;
                ew.showToast(errorThrown);
            }
        });
    }
    function validateUpdateEntry() {
        let formErrorCount = 0;
        function validateRequiredField(fieldName) {
            const errorMessage = (selectedLanguage.id === 'en-US') ? "Please enter required field" : "Masukkan input yang dibutuhkan";
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldCaption = $(`label[for=${fieldNameWithPrefix}]`).text();
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            const errorMessageWithFieldName = `${errorMessage} - ${fieldCaption}`;
            if (fieldValue === '' || fieldValue === null) {
                window[formID].fields[fieldName].addError({ custom: errorMessageWithFieldName });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessageWithFieldName });
                return false;
            } else {
                return true;
            }
        }
        function validateDateField(fieldName) {
            const errorMessage = (selectedLanguage.id === 'en-US') ? 'Incorrect date (dd MMM yyyy)' : 'Tanggal tidak benar (dd MMM yyyy)';
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            const dateParts = fieldValue.split(' ');
            const day = parseInt(dateParts[0], 10);
            const monthNamesEnglish = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            const monthNamesIndonesian = ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Agu', 'Sep', 'Okt', 'Nov', 'Des'];
            const month = (selectedLanguage.id === 'en-US') ? monthNamesEnglish.indexOf(dateParts[1]) : monthNamesIndonesian.indexOf(dateParts[1]);
            const year = parseInt(dateParts[2], 10);
            let valid = false;
            if (year >= 1900 && year <= 9999 && month >= 0 && day >= 1 && day <= 31) {
                switch (month) {
                    case 1: // February
                        // Check for leap year
                        valid = day <= (((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) ? 29 : 28);
                        break;
                    case 3: // April
                    case 5: // June
                    case 8: // September
                    case 10: // November
                        valid = day <= 30;
                        break;
                    default:
                        valid = true;
                        break;
                }
            }
            if (!valid) {
                window[formID].fields[fieldName].addError({ custom: errorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessage });
                return false;
            } else {
                return true;
            }
        }
        function validateFieldWithRegex(fieldName, errorMessage, regex) {
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (!regex.test(fieldValue)) {  
                window[formID].fields[fieldName].addError({ custom: errorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessage });
                return false;
            } else {
                return true;
            }
        }
        const noDigitsRegex = /^[^0-9]+$/;
        const noDigitsRegexErrorMessage = (selectedLanguage.id === 'en-US') ? "Must not contain digits" : "Tidak boleh mengandung angka";
        const ktpNumberDigitsRegex = /^\d{16}$/;
        const ktpNumberDigitsErrorMessage = (selectedLanguage.id === 'en-US') ? "Must contain exactly 16 digits" : "Harus terdiri dari 16 digit angka";
        if (!validateRequiredField("Relationship")) {
            formErrorCount += 1;
        }
        if (!validateRequiredField("FullName")) {
            formErrorCount += 1;
        } else {
            formErrorCount += validateFieldWithRegex("FullName",  noDigitsRegexErrorMessage, noDigitsRegex) ? 0 : 1;
        }
        if (!validateRequiredField("Gender")) {
            formErrorCount += 1;
        }
        if (!validateRequiredField("DateOfBirth")) {
            formErrorCount += 1;
        } else {
            formErrorCount += validateDateField("DateOfBirth") ? 0 : 1;
        }
        if (!validateRequiredField("Email")) {
            formErrorCount += 1;
        }
        if (!validateRequiredField("SocialSecurityNumber")) {
            formErrorCount += 1;
        } else {
            formErrorCount += validateFieldWithRegex("SocialSecurityNumber", ktpNumberDigitsErrorMessage, ktpNumberDigitsRegex) ? 0 : 1;
        }
        if (!validateRequiredField("FamilyRegisterNumber")) {
            formErrorCount += 1;
        } else {
            formErrorCount += validateFieldWithRegex("FamilyRegisterNumber", ktpNumberDigitsErrorMessage, ktpNumberDigitsRegex) ? 0 : 1;
        }
        if (!validateRequiredField("Address")) {
            formErrorCount += 1;
        }
        // mobile number fields
        function isEmptyOrNull(value) {
            return (value === '' || value === null);
        }
        const mobileNumberEmptyErrorMessage = (selectedLanguage.id === 'en-US') ? "Can't be empty when filling " : "Tidak boleh kosong ketika mengisi";
        const mobileNumberWithoutCodeRegexErrorMessage = (selectedLanguage.id === 'en-US') ? "Can contain 7-20 digits only" : "Hanya boleh mengandung 7-20 angka";
        const mobileNumberWithoutCodeRegex = /^\d{7,20}$/;
        const mobileNumberCodeValue = $("#x_MobileNumberCode_CountryID").val();
        const mobileNumberWithoutCodeValue = $("#x_MobileNumber").val();
        const mobileNumberCodeCaption = (selectedLanguage.id === 'en-US') ? "country code" : "kode negara";
        const mobileNumberWithoutCodeCaption = $('label[for="x_MobileNumber"]').text();
        if (isEmptyOrNull(mobileNumberCodeValue) && isEmptyOrNull(mobileNumberWithoutCodeValue)) {
            const errorMessage = (selectedLanguage.id === 'en-US') ? "Must be filled" : "Harus diisi";
            window[formID].fields["MobileNumberCode_CountryID"].addError({ custom: errorMessage });
            window[formID].fields["MobileNumberCode_CountryID"].updateFeedback();
            window[formID].addError("MobileNumberCode_CountryID", { custom: errorMessage });
            window[formID].fields["MobileNumber"].addError({ custom: errorMessage });
            window[formID].fields["MobileNumber"].updateFeedback();
            window[formID].addError("MobileNumber", { custom: errorMessage });
            formErrorCount += 1;
        }
        if (isEmptyOrNull(mobileNumberCodeValue) && !isEmptyOrNull(mobileNumberWithoutCodeValue)) {
            const errorMessage = `${mobileNumberEmptyErrorMessage}${mobileNumberWithoutCodeCaption}`;
            window[formID].fields["MobileNumberCode_CountryID"].addError({ custom: errorMessage });
            window[formID].fields["MobileNumberCode_CountryID"].updateFeedback();
            window[formID].addError("MobileNumberCode_CountryID", { custom: errorMessage });  
            formErrorCount += 1;
        }
        if (!isEmptyOrNull(mobileNumberCodeValue) && isEmptyOrNull(mobileNumberWithoutCodeValue)) {
            const errorMessage = `${mobileNumberEmptyErrorMessage}${mobileNumberCodeCaption}`;
            window[formID].fields["MobileNumber"].addError({ custom: errorMessage });
            window[formID].fields["MobileNumber"].updateFeedback();
            window[formID].addError("MobileNumber", { custom: errorMessage });  
            formErrorCount += 1;
        }
        if (!isEmptyOrNull(mobileNumberCodeValue) && !isEmptyOrNull(mobileNumberWithoutCodeValue)) {
            formErrorCount += validateFieldWithRegex("MobileNumber",  mobileNumberWithoutCodeRegexErrorMessage, mobileNumberWithoutCodeRegex) ? 0 : 1;
        }
        return formErrorCount === 0;
    }
});
</script>
