@{
    // View
    View = this;

    // Check action result
    if (mtRecruitmentStatusList.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!mtRecruitmentStatusList.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
@if (!mtRecruitmentStatusList.IsExport()) {
<script>
var currentTable = @Html.Raw(ConvertToJson(mtRecruitmentStatusList.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { MTRecruitmentStatus: currentTable } });
var currentPageID = ew.PAGE_ID = "list";
var currentForm;
var @(mtRecruitmentStatusList.FormName);
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("@(mtRecruitmentStatusList.FormName)")
        .setPageId("list")
        .setSubmitWithFetch(@(mtRecruitmentStatusList.UseAjaxActions ? "true" : "false"))
        .setFormKeyCountName("@(mtRecruitmentStatusList.FormKeyCountName)")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
ew.PREVIEW_SELECTOR = ".ew-preview-btn";
ew.PREVIEW_MODAL_CLASS = "modal modal-fullscreen-sm-down";
ew.PREVIEW_ROW = true;
ew.PREVIEW_SINGLE_ROW = false;
ew.PREVIEW || ew.ready("head", ew.PATH_BASE + "js/preview.min.js?v=20.1.0", "preview");
</script>
<script>
window.Tabulator || loadjs([
    ew.PATH_BASE + "js/tabulator.min.js?v=20.1.5",
    ew.PATH_BASE + "css/@CssFile("tabulator_bootstrap5.css", false)?v=20.1.5"
], "import");
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
}
@if (!mtRecruitmentStatusList.IsExport()) {
<div class="btn-toolbar ew-toolbar">
@if (mtRecruitmentStatusList.TotalRecords > 0 && mtRecruitmentStatusList.ExportOptions.Visible) {
    mtRecruitmentStatusList.ExportOptions.Render("body");
}
@if (mtRecruitmentStatusList.ImportOptions.Visible) {
    mtRecruitmentStatusList.ImportOptions.Render("body");
}
@if (mtRecruitmentStatusList.SearchOptions.Visible) {
    mtRecruitmentStatusList.SearchOptions.Render("body");
}
@if (mtRecruitmentStatusList.FilterOptions.Visible) {
    mtRecruitmentStatusList.FilterOptions.Render("body");
}
</div>
}
@if (!mtRecruitmentStatusList.IsModal) {
<form name="fMTRecruitmentStatussrch" id="fMTRecruitmentStatussrch" class="ew-form ew-ext-search-form" action="@AppPath(CurrentPageName())" autocomplete="on">
<div id="fMTRecruitmentStatussrch_search_panel" class="mb-2 mb-sm-0 @(mtRecruitmentStatusList.SearchPanelClass)"><!-- .ew-search-panel -->
<script>
var currentTable = @Html.Raw(ConvertToJson(mtRecruitmentStatusList.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { MTRecruitmentStatus: currentTable } });
var currentForm;
var fMTRecruitmentStatussrch, currentSearchForm, currentAdvancedSearchForm;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery,
        fields = currentTable.fields;

    // Form object for search
    let form = new ew.FormBuilder()
        .setId("fMTRecruitmentStatussrch")
        .setPageId("list")
@if (mtRecruitmentStatusList.UseAjaxActions) {
        <text>.setSubmitWithFetch(true)</text>
}

        // Dynamic selection lists
        .setLists({
        })

        // Filters
        .setFilterList(@Html.Raw(await mtRecruitmentStatusList.GetFilterList()))
        .build();
    window[form.id] = form;
    currentSearchForm = form;
    loadjs.done(form.id);
});
</script>
<input type="hidden" name="cmd" value="search">
@if (Security.CanSearch) {
if (!mtRecruitmentStatusList.IsExport() && Empty(mtRecruitmentStatusList.CurrentAction) && mtRecruitmentStatusList.HasSearchFields()) { @* Show search form (begin) *@
<div class="ew-extended-search container-fluid ps-2">
<div class="row mb-0">
    <div class="col-sm-auto px-0 pe-sm-2">
        <div class="ew-basic-search input-group">
            <input type="search" name="@(Config.TableBasicSearch)" id="@(Config.TableBasicSearch)" class="form-control ew-basic-search-keyword" value="@Html.Raw(HtmlEncode(mtRecruitmentStatusList.BasicSearch.SessionKeyword))" placeholder="@(HtmlEncode(Language.Phrase("Search")))" aria-label="@(HtmlEncode(Language.Phrase("Search")))">
            <input type="hidden" name="@(Config.TableBasicSearchType)" id="@(Config.TableBasicSearchType)" class="ew-basic-search-type" value="@(HtmlEncode(mtRecruitmentStatusList.BasicSearch.SessionType))">
            <button type="button" data-bs-toggle="dropdown" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" aria-haspopup="true" aria-expanded="false">
                <span id="searchtype">@Html.Raw(mtRecruitmentStatusList.BasicSearch.TypeNameShort)</span>
            </button>
            <div class="dropdown-menu dropdown-menu-end">
                <button type="button" class="dropdown-item@(mtRecruitmentStatusList.BasicSearch.SessionType == "" ? " active" : "")" form="fMTRecruitmentStatussrch" data-ew-action="search-type">@Html.Raw(Language.Phrase("QuickSearchAuto"))</button>
                <button type="button" class="dropdown-item@(mtRecruitmentStatusList.BasicSearch.SessionType == "=" ? " active" : "")" form="fMTRecruitmentStatussrch" data-ew-action="search-type" data-search-type="=">@Html.Raw(Language.Phrase("QuickSearchExact"))</button>
                <button type="button" class="dropdown-item@(mtRecruitmentStatusList.BasicSearch.SessionType == "AND" ? " active" : "")" form="fMTRecruitmentStatussrch" data-ew-action="search-type" data-search-type="AND">@Html.Raw(Language.Phrase("QuickSearchAll"))</button>
                <button type="button" class="dropdown-item@(mtRecruitmentStatusList.BasicSearch.SessionType == "OR" ? " active" : "")" form="fMTRecruitmentStatussrch" data-ew-action="search-type" data-search-type="OR">@Html.Raw(Language.Phrase("QuickSearchAny"))</button>
            </div>
        </div>
    </div>
    <div class="col-sm-auto mb-3">
        <button class="btn btn-primary" name="btn-submit" id="btn-submit" type="submit">@Html.Raw(Language.Phrase("SearchBtn"))</button>
    </div>
</div>
</div><!-- /.ew-extended-search -->
} @* Show search form (end) *@
}
</div><!-- /.ew-search-panel -->
</form>
}
@mtRecruitmentStatusList.ShowPageHeader()
@mtRecruitmentStatusList.ShowMessages()
<main class="list @(mtRecruitmentStatusList.TotalRecords == 0 && !mtRecruitmentStatusList.IsAdd ? " ew-no-record" : "")">
<div id="ew-list">
@if (mtRecruitmentStatusList.TotalRecords > 0 || !Empty(mtRecruitmentStatusList.CurrentAction)) {
<div class="card ew-card ew-grid@(mtRecruitmentStatusList.IsAddOrEdit ? " ew-grid-add-edit" : "") @(mtRecruitmentStatusList.TableGridClass)">
<form name="@(mtRecruitmentStatusList.FormName)" id="@(mtRecruitmentStatusList.FormName)" class="ew-form ew-list-form" action="@AppPath(mtRecruitmentStatusList.PageName)" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
@if (mtRecruitmentStatusList.IsModal) {
<input type="hidden" name="modal" value="1">
}
<div id="gmp_MTRecruitmentStatus" class="card-body ew-grid-middle-panel @(mtRecruitmentStatusList.TableContainerClass)" style="@(mtRecruitmentStatusList.TableContainerStyle)">
@if (mtRecruitmentStatusList.TotalRecords > 0 || mtRecruitmentStatusList.IsGridEdit || mtRecruitmentStatusList.IsMultiEdit) {
<table id="tbl_MTRecruitmentStatuslist" class="@(mtRecruitmentStatusList.TableClass)"><!-- .ew-table -->
<thead>
    <tr class="ew-table-header">
@{
    // Header row
    mtRecruitmentStatusList.RowType = RowType.Header;

    // Render list options
    await mtRecruitmentStatusList.RenderListOptions();
}
@* Render list options (header, left) *@
@mtRecruitmentStatusList.ListOptions.RenderHeader("left")
@if (mtRecruitmentStatusList.ID.Visible) { // mtRecruitmentStatusList.ID.Visible (begin)
        <th data-name="ID" class="@(mtRecruitmentStatusList.ID.HeaderCellClass)"><div id="elh_MTRecruitmentStatus_ID" class="MTRecruitmentStatus_ID">@Html.Raw(mtRecruitmentStatusList.RenderFieldHeader(mtRecruitmentStatusList.ID))</div></th>
} @* mtRecruitmentStatusList.ID.Visible (end) *@
@if (mtRecruitmentStatusList.Code.Visible) { // mtRecruitmentStatusList.Code.Visible (begin)
        <th data-name="Code" class="@(mtRecruitmentStatusList.Code.HeaderCellClass)"><div id="elh_MTRecruitmentStatus_Code" class="MTRecruitmentStatus_Code">@Html.Raw(mtRecruitmentStatusList.RenderFieldHeader(mtRecruitmentStatusList.Code))</div></th>
} @* mtRecruitmentStatusList.Code.Visible (end) *@
@if (mtRecruitmentStatusList.Description.Visible) { // mtRecruitmentStatusList.Description.Visible (begin)
        <th data-name="Description" class="@(mtRecruitmentStatusList.Description.HeaderCellClass)"><div id="elh_MTRecruitmentStatus_Description" class="MTRecruitmentStatus_Description">@Html.Raw(mtRecruitmentStatusList.RenderFieldHeader(mtRecruitmentStatusList.Description))</div></th>
} @* mtRecruitmentStatusList.Description.Visible (end) *@
@if (mtRecruitmentStatusList.CreatedByUserID.Visible) { // mtRecruitmentStatusList.CreatedByUserID.Visible (begin)
        <th data-name="CreatedByUserID" class="@(mtRecruitmentStatusList.CreatedByUserID.HeaderCellClass)"><div id="elh_MTRecruitmentStatus_CreatedByUserID" class="MTRecruitmentStatus_CreatedByUserID">@Html.Raw(mtRecruitmentStatusList.RenderFieldHeader(mtRecruitmentStatusList.CreatedByUserID))</div></th>
} @* mtRecruitmentStatusList.CreatedByUserID.Visible (end) *@
@if (mtRecruitmentStatusList.CreatedDateTime.Visible) { // mtRecruitmentStatusList.CreatedDateTime.Visible (begin)
        <th data-name="CreatedDateTime" class="@(mtRecruitmentStatusList.CreatedDateTime.HeaderCellClass)"><div id="elh_MTRecruitmentStatus_CreatedDateTime" class="MTRecruitmentStatus_CreatedDateTime">@Html.Raw(mtRecruitmentStatusList.RenderFieldHeader(mtRecruitmentStatusList.CreatedDateTime))</div></th>
} @* mtRecruitmentStatusList.CreatedDateTime.Visible (end) *@
@if (mtRecruitmentStatusList.LastUpdatedByUserID.Visible) { // mtRecruitmentStatusList.LastUpdatedByUserID.Visible (begin)
        <th data-name="LastUpdatedByUserID" class="@(mtRecruitmentStatusList.LastUpdatedByUserID.HeaderCellClass)"><div id="elh_MTRecruitmentStatus_LastUpdatedByUserID" class="MTRecruitmentStatus_LastUpdatedByUserID">@Html.Raw(mtRecruitmentStatusList.RenderFieldHeader(mtRecruitmentStatusList.LastUpdatedByUserID))</div></th>
} @* mtRecruitmentStatusList.LastUpdatedByUserID.Visible (end) *@
@if (mtRecruitmentStatusList.LastUpdatedDateTime.Visible) { // mtRecruitmentStatusList.LastUpdatedDateTime.Visible (begin)
        <th data-name="LastUpdatedDateTime" class="@(mtRecruitmentStatusList.LastUpdatedDateTime.HeaderCellClass)"><div id="elh_MTRecruitmentStatus_LastUpdatedDateTime" class="MTRecruitmentStatus_LastUpdatedDateTime">@Html.Raw(mtRecruitmentStatusList.RenderFieldHeader(mtRecruitmentStatusList.LastUpdatedDateTime))</div></th>
} @* mtRecruitmentStatusList.LastUpdatedDateTime.Visible (end) *@
@* Render list options (header, right) *@
@mtRecruitmentStatusList.ListOptions.RenderHeader("right")
    </tr>
</thead>
<tbody data-page="@(mtRecruitmentStatusList.PageNumber)">
@{
    await mtRecruitmentStatusList.SetupGrid();
    bool eof = mtRecruitmentStatusList.Recordset == null; // DN
}
@while (mtRecruitmentStatusList.RecordCount < mtRecruitmentStatusList.StopRecord || SameString(mtRecruitmentStatusList.RowIndex, "$rowindex$")) { // Begin While
    if (!eof && !SameString(mtRecruitmentStatusList.RowIndex, "$rowindex$") &&
        (!mtRecruitmentStatusList.IsGridAdd || mtRecruitmentStatusList.CurrentMode == "copy") &&
        (!((mtRecruitmentStatusList.IsCopy || mtRecruitmentStatusList.IsAdd) && mtRecruitmentStatusList.RowIndex is int rowIndex && rowIndex == 0))) // DN
        eof = !await mtRecruitmentStatusList.Recordset.ReadAsync();
    mtRecruitmentStatusList.RecordCount++;
    if (mtRecruitmentStatusList.RecordCount >= mtRecruitmentStatusList.StartRecord) {
        await mtRecruitmentStatusList.SetupRow();
    <tr @Html.Raw(mtRecruitmentStatusList.RowAttributes)>
    @* Render list options (body, left) *@
    @mtRecruitmentStatusList.ListOptions.RenderBody("left", mtRecruitmentStatusList.RowCount)
    @if (mtRecruitmentStatusList.ID.Visible) { // mtRecruitmentStatusList.ID.Visible (begin)
        <td data-name="ID" @Html.Raw(mtRecruitmentStatusList.ID.CellAttributes)>
<span id="el@(mtRecruitmentStatusList.RowCount)_MTRecruitmentStatus_ID" class="el_MTRecruitmentStatus_ID">
<span @Html.Raw(mtRecruitmentStatusList.ID.ViewAttributes)>
@Html.Raw(mtRecruitmentStatusList.ID.GetViewValue())</span>
</span>
</td>
    } @* mtRecruitmentStatusList.ID.Visible (end) *@
    @if (mtRecruitmentStatusList.Code.Visible) { // mtRecruitmentStatusList.Code.Visible (begin)
        <td data-name="Code" @Html.Raw(mtRecruitmentStatusList.Code.CellAttributes)>
<span id="el@(mtRecruitmentStatusList.RowCount)_MTRecruitmentStatus_Code" class="el_MTRecruitmentStatus_Code">
<span @Html.Raw(mtRecruitmentStatusList.Code.ViewAttributes)>
@Html.Raw(mtRecruitmentStatusList.Code.GetViewValue())</span>
</span>
</td>
    } @* mtRecruitmentStatusList.Code.Visible (end) *@
    @if (mtRecruitmentStatusList.Description.Visible) { // mtRecruitmentStatusList.Description.Visible (begin)
        <td data-name="Description" @Html.Raw(mtRecruitmentStatusList.Description.CellAttributes)>
<span id="el@(mtRecruitmentStatusList.RowCount)_MTRecruitmentStatus_Description" class="el_MTRecruitmentStatus_Description">
<span @Html.Raw(mtRecruitmentStatusList.Description.ViewAttributes)>
@Html.Raw(mtRecruitmentStatusList.Description.GetViewValue())</span>
</span>
</td>
    } @* mtRecruitmentStatusList.Description.Visible (end) *@
    @if (mtRecruitmentStatusList.CreatedByUserID.Visible) { // mtRecruitmentStatusList.CreatedByUserID.Visible (begin)
        <td data-name="CreatedByUserID" @Html.Raw(mtRecruitmentStatusList.CreatedByUserID.CellAttributes)>
<span id="el@(mtRecruitmentStatusList.RowCount)_MTRecruitmentStatus_CreatedByUserID" class="el_MTRecruitmentStatus_CreatedByUserID">
<span @Html.Raw(mtRecruitmentStatusList.CreatedByUserID.ViewAttributes)>
@Html.Raw(mtRecruitmentStatusList.CreatedByUserID.GetViewValue())</span>
</span>
</td>
    } @* mtRecruitmentStatusList.CreatedByUserID.Visible (end) *@
    @if (mtRecruitmentStatusList.CreatedDateTime.Visible) { // mtRecruitmentStatusList.CreatedDateTime.Visible (begin)
        <td data-name="CreatedDateTime" @Html.Raw(mtRecruitmentStatusList.CreatedDateTime.CellAttributes)>
<span id="el@(mtRecruitmentStatusList.RowCount)_MTRecruitmentStatus_CreatedDateTime" class="el_MTRecruitmentStatus_CreatedDateTime">
<span @Html.Raw(mtRecruitmentStatusList.CreatedDateTime.ViewAttributes)>
@Html.Raw(mtRecruitmentStatusList.CreatedDateTime.GetViewValue())</span>
</span>
</td>
    } @* mtRecruitmentStatusList.CreatedDateTime.Visible (end) *@
    @if (mtRecruitmentStatusList.LastUpdatedByUserID.Visible) { // mtRecruitmentStatusList.LastUpdatedByUserID.Visible (begin)
        <td data-name="LastUpdatedByUserID" @Html.Raw(mtRecruitmentStatusList.LastUpdatedByUserID.CellAttributes)>
<span id="el@(mtRecruitmentStatusList.RowCount)_MTRecruitmentStatus_LastUpdatedByUserID" class="el_MTRecruitmentStatus_LastUpdatedByUserID">
<span @Html.Raw(mtRecruitmentStatusList.LastUpdatedByUserID.ViewAttributes)>
@Html.Raw(mtRecruitmentStatusList.LastUpdatedByUserID.GetViewValue())</span>
</span>
</td>
    } @* mtRecruitmentStatusList.LastUpdatedByUserID.Visible (end) *@
    @if (mtRecruitmentStatusList.LastUpdatedDateTime.Visible) { // mtRecruitmentStatusList.LastUpdatedDateTime.Visible (begin)
        <td data-name="LastUpdatedDateTime" @Html.Raw(mtRecruitmentStatusList.LastUpdatedDateTime.CellAttributes)>
<span id="el@(mtRecruitmentStatusList.RowCount)_MTRecruitmentStatus_LastUpdatedDateTime" class="el_MTRecruitmentStatus_LastUpdatedDateTime">
<span @Html.Raw(mtRecruitmentStatusList.LastUpdatedDateTime.ViewAttributes)>
@Html.Raw(mtRecruitmentStatusList.LastUpdatedDateTime.GetViewValue())</span>
</span>
</td>
    } @* mtRecruitmentStatusList.LastUpdatedDateTime.Visible (end) *@
    @* Render list options (body, right) *@
    @mtRecruitmentStatusList.ListOptions.RenderBody("right", mtRecruitmentStatusList.RowCount)
    </tr>
    } @* End if *@

    // Reset for template row
    if (SameString(mtRecruitmentStatusList.RowIndex, "$rowindex$"))
        mtRecruitmentStatusList.RowIndex = 0;

    // Reset inline add/copy row
    if ((mtRecruitmentStatusList.IsCopy || mtRecruitmentStatusList.IsAdd) && mtRecruitmentStatusList.RowIndex is int rowIndex2 && rowIndex2 == 0)
        mtRecruitmentStatusList.RowIndex = 1;
} @* End While *@
</tbody>
</table><!-- /.ew-table -->
} @* End If TotalRecords > 0 *@
</div><!-- /.ew-grid-middle-panel -->
@if (Empty(mtRecruitmentStatusList.CurrentAction) && !mtRecruitmentStatusList.UseAjaxActions) {
<input type="hidden" name="action" id="action" value="">
}
</form><!-- /.ew-list-form -->
@{ mtRecruitmentStatusList.CloseRecordset(); }
@if (!mtRecruitmentStatusList.IsExport()) {
<div class="card-footer ew-grid-lower-panel">
@if (!mtRecruitmentStatusList.IsGridAdd && !(mtRecruitmentStatusList.IsGridEdit && mtRecruitmentStatusList.ModalGridEdit) && !mtRecruitmentStatusList.IsMultiEdit) {
@Html.Raw(mtRecruitmentStatusList.Pager.Render())
}
<div class="ew-list-other-options">
@mtRecruitmentStatusList.OtherOptions.RenderBody("bottom")
</div>
</div>
}
</div><!-- /.ew-grid -->
} else { // Show other options
<div class="ew-list-other-options">
@mtRecruitmentStatusList.OtherOptions.ForEach(opt => opt.ButtonClass = "").RenderBody()
</div>
}
</div>
</main>
@mtRecruitmentStatusList.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
@if (!mtRecruitmentStatusList.IsExport()) {
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("MTRecruitmentStatus");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
}
