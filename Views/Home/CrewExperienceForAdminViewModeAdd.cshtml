@{
    // View
    View = this;

    // Check action result
    if (crewExperienceForAdminViewModeAdd.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!crewExperienceForAdminViewModeAdd.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(crewExperienceForAdminViewModeAdd.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { CrewExperienceForAdminViewMode: currentTable } });
var currentPageID = ew.PAGE_ID = "add";
var currentForm;
var fCrewExperienceForAdminViewModeadd;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fCrewExperienceForAdminViewModeadd")
        .setPageId("add")

        // Add fields
        .setFields([

            ["MTCrewID", [fields.MTCrewID.visible && fields.MTCrewID.required ? ew.Validators.required(fields.MTCrewID.caption) : null], fields.MTCrewID.isInvalid],
            ["CompanyName", [fields.CompanyName.visible && fields.CompanyName.required ? ew.Validators.required(fields.CompanyName.caption) : null], fields.CompanyName.isInvalid],
            ["FlagName_CountryID", [fields.FlagName_CountryID.visible && fields.FlagName_CountryID.required ? ew.Validators.required(fields.FlagName_CountryID.caption) : null], fields.FlagName_CountryID.isInvalid],
            ["VesselName", [fields.VesselName.visible && fields.VesselName.required ? ew.Validators.required(fields.VesselName.caption) : null], fields.VesselName.isInvalid],
            ["MTVesselTypeID", [fields.MTVesselTypeID.visible && fields.MTVesselTypeID.required ? ew.Validators.required(fields.MTVesselTypeID.caption) : null], fields.MTVesselTypeID.isInvalid],
            ["GRT", [fields.GRT.visible && fields.GRT.required ? ew.Validators.required(fields.GRT.caption) : null], fields.GRT.isInvalid],
            ["DWT", [fields.DWT.visible && fields.DWT.required ? ew.Validators.required(fields.DWT.caption) : null], fields.DWT.isInvalid],
            ["MainEngine", [fields.MainEngine.visible && fields.MainEngine.required ? ew.Validators.required(fields.MainEngine.caption) : null], fields.MainEngine.isInvalid],
            ["BHP", [fields.BHP.visible && fields.BHP.required ? ew.Validators.required(fields.BHP.caption) : null], fields.BHP.isInvalid],
            ["MTRankID", [fields.MTRankID.visible && fields.MTRankID.required ? ew.Validators.required(fields.MTRankID.caption) : null], fields.MTRankID.isInvalid],
            ["DateFrom", [fields.DateFrom.visible && fields.DateFrom.required ? ew.Validators.required(fields.DateFrom.caption) : null, ew.Validators.datetime(fields.DateFrom.clientFormatPattern)], fields.DateFrom.isInvalid],
            ["DateUntil", [fields.DateUntil.visible && fields.DateUntil.required ? ew.Validators.required(fields.DateUntil.caption) : null, ew.Validators.datetime(fields.DateUntil.clientFormatPattern)], fields.DateUntil.isInvalid],
            ["SignOnPortName", [fields.SignOnPortName.visible && fields.SignOnPortName.required ? ew.Validators.required(fields.SignOnPortName.caption) : null], fields.SignOnPortName.isInvalid],
            ["SignOffPortName", [fields.SignOffPortName.visible && fields.SignOffPortName.required ? ew.Validators.required(fields.SignOffPortName.caption) : null], fields.SignOffPortName.isInvalid],
            ["SignOffReason", [fields.SignOffReason.visible && fields.SignOffReason.required ? ew.Validators.required(fields.SignOffReason.caption) : null], fields.SignOffReason.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "FlagName_CountryID": @Html.Raw(crewExperienceForAdminViewModeAdd.FlagName_CountryID.ToClientList(crewExperienceForAdminViewModeAdd)),
            "MTVesselTypeID": @Html.Raw(crewExperienceForAdminViewModeAdd.MTVesselTypeID.ToClientList(crewExperienceForAdminViewModeAdd)),
            "MTRankID": @Html.Raw(crewExperienceForAdminViewModeAdd.MTRankID.ToClientList(crewExperienceForAdminViewModeAdd)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@crewExperienceForAdminViewModeAdd.ShowPageHeader()
@crewExperienceForAdminViewModeAdd.ShowMessages()
<form name="fCrewExperienceForAdminViewModeadd" id="fCrewExperienceForAdminViewModeadd" class="@(crewExperienceForAdminViewModeAdd.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="insert">
<input type="hidden" name="modal" value="@ConvertToInt(crewExperienceForAdminViewModeAdd.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(crewExperienceForAdminViewModeAdd.OldKeyName)" value="@Html.Raw(crewExperienceForAdminViewModeAdd.OldKey)">
<div class="ew-add-div d-none"><!-- page* -->
@if (crewExperienceForAdminViewModeAdd.MTCrewID.Visible) { // crewExperienceForAdminViewModeAdd.MTCrewID.Visible (begin)
    <div id="r_MTCrewID" @Html.Raw(crewExperienceForAdminViewModeAdd.MTCrewID.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_MTCrewID" for="x_MTCrewID" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_MTCrewID">@Html.Raw(crewExperienceForAdminViewModeAdd.MTCrewID.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.MTCrewID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.MTCrewID.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_MTCrewID"><span id="el_CrewExperienceForAdminViewMode_MTCrewID">
<input type="@(crewExperienceForAdminViewModeAdd.MTCrewID.InputTextType)" name="x_MTCrewID" id="x_MTCrewID" data-table="CrewExperienceForAdminViewMode" data-field="x_MTCrewID" value="@Html.Raw(crewExperienceForAdminViewModeAdd.MTCrewID.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(crewExperienceForAdminViewModeAdd.MTCrewID.PlaceHolder))" data-format-pattern="@(crewExperienceForAdminViewModeAdd.MTCrewID.FormatPattern)"@Html.Raw(crewExperienceForAdminViewModeAdd.MTCrewID.EditAttributes) aria-describedby="x_MTCrewID_help">
@Html.Raw(crewExperienceForAdminViewModeAdd.MTCrewID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.MTCrewID.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.MTCrewID.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.CompanyName.Visible) { // crewExperienceForAdminViewModeAdd.CompanyName.Visible (begin)
    <div id="r_CompanyName" @Html.Raw(crewExperienceForAdminViewModeAdd.CompanyName.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_CompanyName" for="x_CompanyName" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_CompanyName">@Html.Raw(crewExperienceForAdminViewModeAdd.CompanyName.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.CompanyName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.CompanyName.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_CompanyName"><span id="el_CrewExperienceForAdminViewMode_CompanyName">
<input type="@(crewExperienceForAdminViewModeAdd.CompanyName.InputTextType)" name="x_CompanyName" id="x_CompanyName" data-table="CrewExperienceForAdminViewMode" data-field="x_CompanyName" value="@Html.Raw(crewExperienceForAdminViewModeAdd.CompanyName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewExperienceForAdminViewModeAdd.CompanyName.PlaceHolder))" data-format-pattern="@(crewExperienceForAdminViewModeAdd.CompanyName.FormatPattern)"@Html.Raw(crewExperienceForAdminViewModeAdd.CompanyName.EditAttributes) aria-describedby="x_CompanyName_help">
@Html.Raw(crewExperienceForAdminViewModeAdd.CompanyName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.CompanyName.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.CompanyName.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.FlagName_CountryID.Visible) { // crewExperienceForAdminViewModeAdd.FlagName_CountryID.Visible (begin)
    <div id="r_FlagName_CountryID" @Html.Raw(crewExperienceForAdminViewModeAdd.FlagName_CountryID.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_FlagName_CountryID" for="x_FlagName_CountryID" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_FlagName_CountryID">@Html.Raw(crewExperienceForAdminViewModeAdd.FlagName_CountryID.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.FlagName_CountryID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.FlagName_CountryID.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_FlagName_CountryID"><span id="el_CrewExperienceForAdminViewMode_FlagName_CountryID">
    <select
        id="x_FlagName_CountryID"
        name="x_FlagName_CountryID"
        class="form-select ew-select@(crewExperienceForAdminViewModeAdd.FlagName_CountryID.IsInvalidClass)"
        data-select2-id="fCrewExperienceForAdminViewModeadd_x_FlagName_CountryID"
        data-table="CrewExperienceForAdminViewMode"
        data-field="x_FlagName_CountryID"
        data-value-separator="@(crewExperienceForAdminViewModeAdd.FlagName_CountryID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewExperienceForAdminViewModeAdd.FlagName_CountryID.PlaceHolder))"
        @Html.Raw(crewExperienceForAdminViewModeAdd.FlagName_CountryID.EditAttributes)>
        @(crewExperienceForAdminViewModeAdd.FlagName_CountryID.SelectOptionListHtml("x_FlagName_CountryID"))
    </select>
    @Html.Raw(crewExperienceForAdminViewModeAdd.FlagName_CountryID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.FlagName_CountryID.GetErrorMessage())</div>
@Html.Raw(crewExperienceForAdminViewModeAdd.FlagName_CountryID.Lookup.GetParamTag(crewExperienceForAdminViewModeAdd, "p_x_FlagName_CountryID"))
<script>
loadjs.ready("fCrewExperienceForAdminViewModeadd", function() {
    var options = { name: "x_FlagName_CountryID", selectId: "fCrewExperienceForAdminViewModeadd_x_FlagName_CountryID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewExperienceForAdminViewModeadd.lists.FlagName_CountryID?.lookupOptions.length) {
        options.data = { id: "x_FlagName_CountryID", form: "fCrewExperienceForAdminViewModeadd" };
    } else {
        options.ajax = { id: "x_FlagName_CountryID", form: "fCrewExperienceForAdminViewModeadd", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumInputLength = ew.selectMinimumInputLength;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewExperienceForAdminViewMode.fields.FlagName_CountryID.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.FlagName_CountryID.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.VesselName.Visible) { // crewExperienceForAdminViewModeAdd.VesselName.Visible (begin)
    <div id="r_VesselName" @Html.Raw(crewExperienceForAdminViewModeAdd.VesselName.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_VesselName" for="x_VesselName" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_VesselName">@Html.Raw(crewExperienceForAdminViewModeAdd.VesselName.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.VesselName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.VesselName.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_VesselName"><span id="el_CrewExperienceForAdminViewMode_VesselName">
<input type="@(crewExperienceForAdminViewModeAdd.VesselName.InputTextType)" name="x_VesselName" id="x_VesselName" data-table="CrewExperienceForAdminViewMode" data-field="x_VesselName" value="@Html.Raw(crewExperienceForAdminViewModeAdd.VesselName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewExperienceForAdminViewModeAdd.VesselName.PlaceHolder))" data-format-pattern="@(crewExperienceForAdminViewModeAdd.VesselName.FormatPattern)"@Html.Raw(crewExperienceForAdminViewModeAdd.VesselName.EditAttributes) aria-describedby="x_VesselName_help">
@Html.Raw(crewExperienceForAdminViewModeAdd.VesselName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.VesselName.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.VesselName.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.MTVesselTypeID.Visible) { // crewExperienceForAdminViewModeAdd.MTVesselTypeID.Visible (begin)
    <div id="r_MTVesselTypeID" @Html.Raw(crewExperienceForAdminViewModeAdd.MTVesselTypeID.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_MTVesselTypeID" for="x_MTVesselTypeID" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_MTVesselTypeID">@Html.Raw(crewExperienceForAdminViewModeAdd.MTVesselTypeID.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.MTVesselTypeID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.MTVesselTypeID.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_MTVesselTypeID"><span id="el_CrewExperienceForAdminViewMode_MTVesselTypeID">
    <select
        id="x_MTVesselTypeID"
        name="x_MTVesselTypeID"
        class="form-select ew-select@(crewExperienceForAdminViewModeAdd.MTVesselTypeID.IsInvalidClass)"
        data-select2-id="fCrewExperienceForAdminViewModeadd_x_MTVesselTypeID"
        data-table="CrewExperienceForAdminViewMode"
        data-field="x_MTVesselTypeID"
        data-value-separator="@(crewExperienceForAdminViewModeAdd.MTVesselTypeID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewExperienceForAdminViewModeAdd.MTVesselTypeID.PlaceHolder))"
        @Html.Raw(crewExperienceForAdminViewModeAdd.MTVesselTypeID.EditAttributes)>
        @(crewExperienceForAdminViewModeAdd.MTVesselTypeID.SelectOptionListHtml("x_MTVesselTypeID"))
    </select>
    @Html.Raw(crewExperienceForAdminViewModeAdd.MTVesselTypeID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.MTVesselTypeID.GetErrorMessage())</div>
@Html.Raw(crewExperienceForAdminViewModeAdd.MTVesselTypeID.Lookup.GetParamTag(crewExperienceForAdminViewModeAdd, "p_x_MTVesselTypeID"))
<script>
loadjs.ready("fCrewExperienceForAdminViewModeadd", function() {
    var options = { name: "x_MTVesselTypeID", selectId: "fCrewExperienceForAdminViewModeadd_x_MTVesselTypeID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewExperienceForAdminViewModeadd.lists.MTVesselTypeID?.lookupOptions.length) {
        options.data = { id: "x_MTVesselTypeID", form: "fCrewExperienceForAdminViewModeadd" };
    } else {
        options.ajax = { id: "x_MTVesselTypeID", form: "fCrewExperienceForAdminViewModeadd", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewExperienceForAdminViewMode.fields.MTVesselTypeID.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.MTVesselTypeID.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.GRT.Visible) { // crewExperienceForAdminViewModeAdd.GRT.Visible (begin)
    <div id="r_GRT" @Html.Raw(crewExperienceForAdminViewModeAdd.GRT.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_GRT" for="x_GRT" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_GRT">@Html.Raw(crewExperienceForAdminViewModeAdd.GRT.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.GRT.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.GRT.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_GRT"><span id="el_CrewExperienceForAdminViewMode_GRT">
<input type="@(crewExperienceForAdminViewModeAdd.GRT.InputTextType)" name="x_GRT" id="x_GRT" data-table="CrewExperienceForAdminViewMode" data-field="x_GRT" value="@Html.Raw(crewExperienceForAdminViewModeAdd.GRT.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(crewExperienceForAdminViewModeAdd.GRT.PlaceHolder))" data-format-pattern="@(crewExperienceForAdminViewModeAdd.GRT.FormatPattern)"@Html.Raw(crewExperienceForAdminViewModeAdd.GRT.EditAttributes) aria-describedby="x_GRT_help">
@Html.Raw(crewExperienceForAdminViewModeAdd.GRT.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.GRT.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.GRT.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.DWT.Visible) { // crewExperienceForAdminViewModeAdd.DWT.Visible (begin)
    <div id="r_DWT" @Html.Raw(crewExperienceForAdminViewModeAdd.DWT.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_DWT" for="x_DWT" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_DWT">@Html.Raw(crewExperienceForAdminViewModeAdd.DWT.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.DWT.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.DWT.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_DWT"><span id="el_CrewExperienceForAdminViewMode_DWT">
<input type="@(crewExperienceForAdminViewModeAdd.DWT.InputTextType)" name="x_DWT" id="x_DWT" data-table="CrewExperienceForAdminViewMode" data-field="x_DWT" value="@Html.Raw(crewExperienceForAdminViewModeAdd.DWT.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(crewExperienceForAdminViewModeAdd.DWT.PlaceHolder))" data-format-pattern="@(crewExperienceForAdminViewModeAdd.DWT.FormatPattern)"@Html.Raw(crewExperienceForAdminViewModeAdd.DWT.EditAttributes) aria-describedby="x_DWT_help">
@Html.Raw(crewExperienceForAdminViewModeAdd.DWT.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.DWT.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.DWT.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.MainEngine.Visible) { // crewExperienceForAdminViewModeAdd.MainEngine.Visible (begin)
    <div id="r_MainEngine" @Html.Raw(crewExperienceForAdminViewModeAdd.MainEngine.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_MainEngine" for="x_MainEngine" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_MainEngine">@Html.Raw(crewExperienceForAdminViewModeAdd.MainEngine.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.MainEngine.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.MainEngine.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_MainEngine"><span id="el_CrewExperienceForAdminViewMode_MainEngine">
<input type="@(crewExperienceForAdminViewModeAdd.MainEngine.InputTextType)" name="x_MainEngine" id="x_MainEngine" data-table="CrewExperienceForAdminViewMode" data-field="x_MainEngine" value="@Html.Raw(crewExperienceForAdminViewModeAdd.MainEngine.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewExperienceForAdminViewModeAdd.MainEngine.PlaceHolder))" data-format-pattern="@(crewExperienceForAdminViewModeAdd.MainEngine.FormatPattern)"@Html.Raw(crewExperienceForAdminViewModeAdd.MainEngine.EditAttributes) aria-describedby="x_MainEngine_help">
@Html.Raw(crewExperienceForAdminViewModeAdd.MainEngine.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.MainEngine.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.MainEngine.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.BHP.Visible) { // crewExperienceForAdminViewModeAdd.BHP.Visible (begin)
    <div id="r_BHP" @Html.Raw(crewExperienceForAdminViewModeAdd.BHP.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_BHP" for="x_BHP" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_BHP">@Html.Raw(crewExperienceForAdminViewModeAdd.BHP.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.BHP.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.BHP.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_BHP"><span id="el_CrewExperienceForAdminViewMode_BHP">
<input type="@(crewExperienceForAdminViewModeAdd.BHP.InputTextType)" name="x_BHP" id="x_BHP" data-table="CrewExperienceForAdminViewMode" data-field="x_BHP" value="@Html.Raw(crewExperienceForAdminViewModeAdd.BHP.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(crewExperienceForAdminViewModeAdd.BHP.PlaceHolder))" data-format-pattern="@(crewExperienceForAdminViewModeAdd.BHP.FormatPattern)"@Html.Raw(crewExperienceForAdminViewModeAdd.BHP.EditAttributes) aria-describedby="x_BHP_help">
@Html.Raw(crewExperienceForAdminViewModeAdd.BHP.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.BHP.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.BHP.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.MTRankID.Visible) { // crewExperienceForAdminViewModeAdd.MTRankID.Visible (begin)
    <div id="r_MTRankID" @Html.Raw(crewExperienceForAdminViewModeAdd.MTRankID.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_MTRankID" for="x_MTRankID" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_MTRankID">@Html.Raw(crewExperienceForAdminViewModeAdd.MTRankID.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.MTRankID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.MTRankID.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_MTRankID"><span id="el_CrewExperienceForAdminViewMode_MTRankID">
    <select
        id="x_MTRankID"
        name="x_MTRankID"
        class="form-select ew-select@(crewExperienceForAdminViewModeAdd.MTRankID.IsInvalidClass)"
        data-select2-id="fCrewExperienceForAdminViewModeadd_x_MTRankID"
        data-table="CrewExperienceForAdminViewMode"
        data-field="x_MTRankID"
        data-value-separator="@(crewExperienceForAdminViewModeAdd.MTRankID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewExperienceForAdminViewModeAdd.MTRankID.PlaceHolder))"
        @Html.Raw(crewExperienceForAdminViewModeAdd.MTRankID.EditAttributes)>
        @(crewExperienceForAdminViewModeAdd.MTRankID.SelectOptionListHtml("x_MTRankID"))
    </select>
    @Html.Raw(crewExperienceForAdminViewModeAdd.MTRankID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.MTRankID.GetErrorMessage())</div>
@Html.Raw(crewExperienceForAdminViewModeAdd.MTRankID.Lookup.GetParamTag(crewExperienceForAdminViewModeAdd, "p_x_MTRankID"))
<script>
loadjs.ready("fCrewExperienceForAdminViewModeadd", function() {
    var options = { name: "x_MTRankID", selectId: "fCrewExperienceForAdminViewModeadd_x_MTRankID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewExperienceForAdminViewModeadd.lists.MTRankID?.lookupOptions.length) {
        options.data = { id: "x_MTRankID", form: "fCrewExperienceForAdminViewModeadd" };
    } else {
        options.ajax = { id: "x_MTRankID", form: "fCrewExperienceForAdminViewModeadd", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewExperienceForAdminViewMode.fields.MTRankID.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.MTRankID.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.DateFrom.Visible) { // crewExperienceForAdminViewModeAdd.DateFrom.Visible (begin)
    <div id="r_DateFrom" @Html.Raw(crewExperienceForAdminViewModeAdd.DateFrom.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_DateFrom" for="x_DateFrom" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_DateFrom">@Html.Raw(crewExperienceForAdminViewModeAdd.DateFrom.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.DateFrom.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.DateFrom.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_DateFrom"><span id="el_CrewExperienceForAdminViewMode_DateFrom">
<input type="@(crewExperienceForAdminViewModeAdd.DateFrom.InputTextType)" name="x_DateFrom" id="x_DateFrom" data-table="CrewExperienceForAdminViewMode" data-field="x_DateFrom" value="@Html.Raw(crewExperienceForAdminViewModeAdd.DateFrom.EditValue)" placeholder="@Html.Raw(HtmlEncode(crewExperienceForAdminViewModeAdd.DateFrom.PlaceHolder))" data-format-pattern="@(crewExperienceForAdminViewModeAdd.DateFrom.FormatPattern)"@Html.Raw(crewExperienceForAdminViewModeAdd.DateFrom.EditAttributes) aria-describedby="x_DateFrom_help">
@Html.Raw(crewExperienceForAdminViewModeAdd.DateFrom.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.DateFrom.GetErrorMessage())</div>
@if (!crewExperienceForAdminViewModeAdd.DateFrom.ReadOnly && !crewExperienceForAdminViewModeAdd.DateFrom.Disabled && !crewExperienceForAdminViewModeAdd.DateFrom.EditAttrs.Is("readonly") && !crewExperienceForAdminViewModeAdd.DateFrom.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fCrewExperienceForAdminViewModeadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fCrewExperienceForAdminViewModeadd", "x_DateFrom", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.DateFrom.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.DateUntil.Visible) { // crewExperienceForAdminViewModeAdd.DateUntil.Visible (begin)
    <div id="r_DateUntil" @Html.Raw(crewExperienceForAdminViewModeAdd.DateUntil.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_DateUntil" for="x_DateUntil" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_DateUntil">@Html.Raw(crewExperienceForAdminViewModeAdd.DateUntil.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.DateUntil.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.DateUntil.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_DateUntil"><span id="el_CrewExperienceForAdminViewMode_DateUntil">
<input type="@(crewExperienceForAdminViewModeAdd.DateUntil.InputTextType)" name="x_DateUntil" id="x_DateUntil" data-table="CrewExperienceForAdminViewMode" data-field="x_DateUntil" value="@Html.Raw(crewExperienceForAdminViewModeAdd.DateUntil.EditValue)" placeholder="@Html.Raw(HtmlEncode(crewExperienceForAdminViewModeAdd.DateUntil.PlaceHolder))" data-format-pattern="@(crewExperienceForAdminViewModeAdd.DateUntil.FormatPattern)"@Html.Raw(crewExperienceForAdminViewModeAdd.DateUntil.EditAttributes) aria-describedby="x_DateUntil_help">
@Html.Raw(crewExperienceForAdminViewModeAdd.DateUntil.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.DateUntil.GetErrorMessage())</div>
@if (!crewExperienceForAdminViewModeAdd.DateUntil.ReadOnly && !crewExperienceForAdminViewModeAdd.DateUntil.Disabled && !crewExperienceForAdminViewModeAdd.DateUntil.EditAttrs.Is("readonly") && !crewExperienceForAdminViewModeAdd.DateUntil.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fCrewExperienceForAdminViewModeadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fCrewExperienceForAdminViewModeadd", "x_DateUntil", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.DateUntil.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.SignOnPortName.Visible) { // crewExperienceForAdminViewModeAdd.SignOnPortName.Visible (begin)
    <div id="r_SignOnPortName" @Html.Raw(crewExperienceForAdminViewModeAdd.SignOnPortName.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_SignOnPortName" for="x_SignOnPortName" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_SignOnPortName">@Html.Raw(crewExperienceForAdminViewModeAdd.SignOnPortName.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.SignOnPortName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.SignOnPortName.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_SignOnPortName"><span id="el_CrewExperienceForAdminViewMode_SignOnPortName">
<input type="@(crewExperienceForAdminViewModeAdd.SignOnPortName.InputTextType)" name="x_SignOnPortName" id="x_SignOnPortName" data-table="CrewExperienceForAdminViewMode" data-field="x_SignOnPortName" value="@Html.Raw(crewExperienceForAdminViewModeAdd.SignOnPortName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewExperienceForAdminViewModeAdd.SignOnPortName.PlaceHolder))" data-format-pattern="@(crewExperienceForAdminViewModeAdd.SignOnPortName.FormatPattern)"@Html.Raw(crewExperienceForAdminViewModeAdd.SignOnPortName.EditAttributes) aria-describedby="x_SignOnPortName_help">
@Html.Raw(crewExperienceForAdminViewModeAdd.SignOnPortName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.SignOnPortName.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.SignOnPortName.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.SignOffPortName.Visible) { // crewExperienceForAdminViewModeAdd.SignOffPortName.Visible (begin)
    <div id="r_SignOffPortName" @Html.Raw(crewExperienceForAdminViewModeAdd.SignOffPortName.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_SignOffPortName" for="x_SignOffPortName" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_SignOffPortName">@Html.Raw(crewExperienceForAdminViewModeAdd.SignOffPortName.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.SignOffPortName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.SignOffPortName.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_SignOffPortName"><span id="el_CrewExperienceForAdminViewMode_SignOffPortName">
<input type="@(crewExperienceForAdminViewModeAdd.SignOffPortName.InputTextType)" name="x_SignOffPortName" id="x_SignOffPortName" data-table="CrewExperienceForAdminViewMode" data-field="x_SignOffPortName" value="@Html.Raw(crewExperienceForAdminViewModeAdd.SignOffPortName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewExperienceForAdminViewModeAdd.SignOffPortName.PlaceHolder))" data-format-pattern="@(crewExperienceForAdminViewModeAdd.SignOffPortName.FormatPattern)"@Html.Raw(crewExperienceForAdminViewModeAdd.SignOffPortName.EditAttributes) aria-describedby="x_SignOffPortName_help">
@Html.Raw(crewExperienceForAdminViewModeAdd.SignOffPortName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.SignOffPortName.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.SignOffPortName.Visible (end) *@
@if (crewExperienceForAdminViewModeAdd.SignOffReason.Visible) { // crewExperienceForAdminViewModeAdd.SignOffReason.Visible (begin)
    <div id="r_SignOffReason" @Html.Raw(crewExperienceForAdminViewModeAdd.SignOffReason.RowAttributes)>
        <label id="elh_CrewExperienceForAdminViewMode_SignOffReason" for="x_SignOffReason" class="@(crewExperienceForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewExperienceForAdminViewMode_SignOffReason">@Html.Raw(crewExperienceForAdminViewModeAdd.SignOffReason.Caption)@Html.Raw(crewExperienceForAdminViewModeAdd.SignOffReason.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewExperienceForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewExperienceForAdminViewModeAdd.SignOffReason.CellAttributes)>
<template id="tpx_CrewExperienceForAdminViewMode_SignOffReason"><span id="el_CrewExperienceForAdminViewMode_SignOffReason">
<textarea data-table="CrewExperienceForAdminViewMode" data-field="x_SignOffReason" name="x_SignOffReason" id="x_SignOffReason" cols="50" rows="2" placeholder="@Html.Raw(HtmlEncode(crewExperienceForAdminViewModeAdd.SignOffReason.PlaceHolder))"@Html.Raw(crewExperienceForAdminViewModeAdd.SignOffReason.EditAttributes) aria-describedby="x_SignOffReason_help">@(crewExperienceForAdminViewModeAdd.SignOffReason.EditValue)</textarea>
@Html.Raw(crewExperienceForAdminViewModeAdd.SignOffReason.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewExperienceForAdminViewModeAdd.SignOffReason.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewExperienceForAdminViewModeAdd.SignOffReason.Visible (end) *@
</div><!-- /page* -->
<div id="tpd_CrewExperienceForAdminViewModeadd" class="ew-custom-template"></div>
<template id="tpm_CrewExperienceForAdminViewModeadd">
<div id="ct_crewExperienceForAdminViewModeAdd">    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewPersonalDataForAdminViewModeView")">
                @(CurrentLanguage == "en-US" ? "PERSONAL DATA" : "DATA PERSONAL")
            </a>     
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewDocumentForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "DOCUMENTS" : "DOKUMEN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewBankAccountForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "BANK ACCOUNT" : "REKENING BANK")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFamilyForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "FAMILY" : "KELUARGA")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFormalEducationForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "FORMAL EDUCATION" : "PENDIDIKAN FORMAL")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalCertificateForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "MEDICAL CERTIFICATE / TEST" : "SERTIFIKAT / TES MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewCertificateForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "CERTIFICATES AND QUALIFICATIONS" : "SERTIFIKAT DAN KUALIFIKASI")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewExperienceForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "SEA EXPERIENCE" : "PENGALAMAN BERLAYAR")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewAppraisalForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "APPRAISALS" : "PENILAIAN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalHistoryForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "MEDICAL HISTORY" : "RIWAYAT MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewGeneralDataForAdminViewModeView")">
                @(CurrentLanguage == "en-US" ? "GENERAL" : "UMUM")
            </a>
        </li>
    </ul>  
    <h6 class="fw-bold">
        @(CurrentLanguage == "en-US" ? "Sea Experiences In The Last 10 Years" : "Pengalaman Berlayar 10 Tahun Terakhir")
    </h6>
    <div class="mb-2 row">
        <div class="col-sm-3">
            <div id="r_CompanyName" class="mb-2 row">
                <label for="x_CompanyName" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.CompanyName.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_CompanyName"></slot></div>
            </div>
        </div>
        <div class="col-sm-3">
            <div id="r_FlagName_CountryID" class="mb-2 row">
                <label for="x_FlagName_CountryID" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.FlagName_CountryID.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_FlagName_CountryID"></slot></div>
            </div>
        </div>
        <div class="col-sm-3">
            <div id="r_VesselName" class="mb-2 row">
                <label for="x_VesselName" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.VesselName.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_VesselName"></slot></div>
            </div>
        </div>
        <div class="col-sm-3">
            <div id="r_MTVesselTypeID" class="mb-2 row">
                <label for="x_MTVesselTypeID" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.MTVesselTypeID.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_MTVesselTypeID"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-3">
            <div id="r_GRT" class="mb-2 row">
                <label for="x_GRT" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.GRT.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_GRT"></slot></div>
            </div>
        </div>
        <div class="col-sm-3">
            <div id="r_DWT" class="mb-2 row">
                <label for="x_DWT" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.DWT.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_DWT"></slot></div>
            </div>
        </div>
        <div class="col-sm-3">
            <div id="r_MainEngine" class="mb-2 row">
                <label for="x_MainEngine" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.MainEngine.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_MainEngine"></slot></div>
            </div>
        </div>
        <div class="col-sm-3">
            <div id="r_BHP" class="mb-2 row">
                <label for="x_BHP" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.BHP.Caption)</label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_BHP"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-3">
            <div id="r_DateFrom" class="mb-2 row">
                <label for="x_DateFrom" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.DateFrom.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_DateFrom"></slot></div>
            </div>
        </div>
        <div class="col-sm-3">
            <div id="r_SignOnPortName" class="mb-2 row">
                <label for="x_SignOnPortName" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.SignOnPortName.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_SignOnPortName"></slot></div>
            </div>
        </div>
        <div class="col-sm-3">
            <div id="r_DateUntil" class="mb-2 row">
                <label for="x_IssuingAuthority" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.DateUntil.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_DateUntil"></slot></div>
            </div>
        </div>
        <div class="col-sm-3">
            <div id="r_SignOffPortName" class="mb-2 row">
                <label for="x_SignOffPortName" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.SignOffPortName.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_SignOffPortName"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-3">
            <div id="r_SignOffReason" class="mb-2 row">
                <label for="x_SignOffReason" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.SignOffReason.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_SignOffReason"></slot></div>
            </div>
        </div>
        <div class="col-sm-3">
            <div id="r_MTRankID" class="mb-2 row">
                <label for="x_MTRankID" class="col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.MTRankID.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_MTRankID"></slot></div>
            </div>
        </div>
        <div class="col-sm-3">
        </div>
        <div class="col-sm-3">
        </div>
    </div>
    <div class="row"><!-- buttons .row -->
        <div class="d-flex mb-2"><!-- buttons offset -->
            <button class="btn btn-primary ew-btn ms-auto primary-black-clr gray-bg" id="btn-add-entry">
                @(CurrentLanguage == "en-US" ? "Add Entry" : "Tambah")
            </button>
        </div><!-- /buttons offset -->
    </div>
    <div id="r_MTCrewID" class="mb-3 row">
        <label for="x_MTCrewID" class="col-sm-2 col-form-label">@Html.Raw(crewExperienceForAdminViewModeAdd.MTCrewID.Caption)</label>
        <div class="col-sm-10"><slot class="ew-slot" name="tpx_CrewExperienceForAdminViewMode_MTCrewID"></slot></div>
    </div>
    <div id="proceed-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="proceed-modal-dialog-title" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="proceed-modal-dialog-title" class="modal-title">
                        @(CurrentLanguage == "en-US" ? "Warning" : "Peringatan")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p> 
                        @{
                            if (CurrentLanguage == "en-US")
                            {
                                <span>There are error(s) in this tab.</span><br/>
                                <span>If you choose to Proceed, any unsaved data will be lost.</span><br/>
                                <span>Do you want to Proceed?</span>
                            }
                            else
                            {
                                <span>Masih ada error di tab ini.</span><br/>
                                <span>Jika Anda memilih Lanjutkan, data yang belum disimpan akan hilang.</span><br/>
                                <span>Apakah Anda ingin melanjutkan?</span>
                            }
                        }
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger ew-btn" id="btn-proceed" type="button">
                        @(CurrentLanguage == "en-US" ? "Proceed" : "Lanjutkan")
                    </button>
                    <button class="btn btn-default ew-btn" id="btn-proceed-cancel" type="button" data-bs-dismiss="modal">
                        @(CurrentLanguage == "en-US" ? "Cancel" : "Batal")
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div id="loading-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-center mb-0">
                        @(CurrentLanguage == "en-US" ? "Saving..." : "Menyimpan...")
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div id="delete-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="delete-modal-dialog-title" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="delete-modal-dialog-title" class="modal-title">
                        @(CurrentLanguage == "en-US" ? "Confirmation" : "Konfirmasi")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        @(CurrentLanguage == "en-US" ? "Are you sure you want to delete?" : "Anda yakin ingin menghapus?")
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary ew-btn" id="btn-delete" type="button">
                        @(CurrentLanguage == "en-US" ? "Yes" : "Iya")
                    </button>
                    <button class="btn btn-default ew-btn" id="btn-delete-cancel" type="button" data-bs-dismiss="modal">
                        @(CurrentLanguage == "en-US" ? "No" : "Tidak")
                    </button>
                </div>
            </div>
        </div>
    </div></div>
</template>
@{ crewExperienceForAdminViewModeAdd.CloseRecordset(); }
@Html.Raw(crewExperienceForAdminViewModeAdd.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(crewExperienceForAdminViewModeAdd.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fCrewExperienceForAdminViewModeadd">@Html.Raw(Language.Phrase("AddBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fCrewExperienceForAdminViewModeadd" data-href="@AppPath(crewExperienceForAdminViewModeAdd.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(crewExperienceForAdminViewModeAdd.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
<script class="ew-apply-template">
loadjs.ready(ew.applyTemplateId, function() {
    var $ = jQuery;
    ew.templateData = { rows: @Html.Raw(ConvertToJson(crewExperienceForAdminViewModeAdd.Rows)) };
    ew.applyTemplate("tpd_CrewExperienceForAdminViewModeadd", "tpm_CrewExperienceForAdminViewModeadd", "CrewExperienceForAdminViewModeadd", "@(crewExperienceForAdminViewModeAdd.Export)", "CrewExperienceForAdminViewMode", ew.templateData.rows[0], @(crewExperienceForAdminViewModeAdd.IsModal ? "true" : "false"));
    loadjs.done("customtemplate");
});
</script>
@crewExperienceForAdminViewModeAdd.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("CrewExperienceForAdminViewMode");
});
</script>
<script>
loadjs.ready("load", function() {
    // Startup script
    // Write your table-specific startup script here
    // document.write("page loaded");

    // Get the current URL
    const currentUrlObject = new URL(window.location.href);
    // get the current URL without Add or Edit for assigning active class in tabs
    const currentUrlWithoutAddEditViewList = currentUrlObject.href.replace(/Add|Edit|View|List/g, "");
    // Create a new URLSearchParams object based on the current URL's search parameters
    const urlQueryParams = new URLSearchParams(currentUrlObject.search);
    // Extract the value of the crewID query parameter
    const currentlyEditedCrewID = urlQueryParams.get('crewID');
    const selectedLanguage = ew.vars['languages']['languages'].filter(obj => obj.selected === true)[0];
    const parentUrl = ew.PATH_BASE;
    const tableName = "CrewExperienceForAdminViewMode";
    const pageType = "add";
    const pageTypeCapital = "Add";
    const formID = `f${tableName}${pageType}`;
    const addEntryUrl = `${parentUrl}${tableName}${pageTypeCapital}?crewID=${currentlyEditedCrewID}`;
    const listPageUrl = `${parentUrl}${tableName}List?crewID=${currentlyEditedCrewID}`;
    let isChangeTabApproved = false;
    const adminAndEmployeeStatusApi = 'get-admin-and-employee-status';
    $.ajax({
        url: `${parentUrl}api/Registration/${adminAndEmployeeStatusApi}`,
        method: 'GET',
        data: {
            crewID: currentlyEditedCrewID
        },
        success: function(response) {
            if (response.success) {
                // Parse the data in the response
                const isAdmin = response.data.IsAdmin;
                const employeeStatus = response.data.EmployeeStatus;
                if (currentlyEditedCrewID === null) {
                    if (isAdmin) {
                        // redirect to list page with error message: record not found
                        if (employeeStatus === 'Candidate - Draft') {
                            window.location.replace(`${ew.PATH_BASE}RegistrationEdit/-1`);
                        } else if (employeeStatus === 'Candidate - Submitted') {
                            window.location.replace(`${ew.PATH_BASE}VWaitingForPdeReviewView/-1`);
                        }
                    } else {
                        window.location.replace(`${ew.PATH_BASE}index`);
                    }
                }
            } else {
                // Handle the error
                ew.showToast(response.errorMessage);
            }
        },
        error: function(xhr, textStatus, errorThrown) {
            // Handle the error
            ew.showToast(errorThrown);
        }
    });
    $('#x_GRT').attr('type', 'number');
    $('#x_DWT').attr('type', 'number');
    $('#x_BHP').attr('type', 'number');

    //  programatically change the value of MTCrewID input and then hide it
    $('#x_MTCrewID').val(currentlyEditedCrewID);

    // Iterate over each anchor element inside the nav-tabs
    $(".nav-tabs .nav-item a").each(function() {
        const href = $(this).attr("href");
        const hrefWithoutAddEditViewList = href.replace(/Add|Edit|View|List/g, "");
        // Check if the href contains current page's url
        if (currentUrlWithoutAddEditViewList.includes(hrefWithoutAddEditViewList)) {
            // add class and attribute
            $(this).addClass("active");
            $(this).attr("aria-current", "page");
        }
        // Check if the href contains "Edit" or "Add"
        if (href.includes("ViewModeView")) {
            // Add "/" and the currently edited crew ID to the href
            const newHref = href + "/" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        } else if (href.includes("ViewModeList")) {
            // Add "?crewID=" and the currently edited crew ID to the href
            const newHref = href + "?crewID=" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        }
    });

    // start code for auto capitalize first letter of each word
    $('#x_CompanyName').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    $('#x_VesselName').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    $('#x_SignOnPortName').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    $('#x_SignOffPortName').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    // end code for auto capitalize first letter of each word
    const entryButton = $('<button/>', {
        'class': 'btn btn-primary ew-btn ms-auto primary-black-clr gray-bg',
        'id': 'btn-entry',
        'type': 'button',
        'text': (selectedLanguage.id === 'en-US') ? `Add Entry` : `Tambah`
    }).click(function() {
        const validateAddEntryResult = validateAddEntry({ isAllEmptyAllowed: false });
        if (validateAddEntryResult === 'valid') {
            $('#loading-modal-dialog').modal('show');
            const targetUrlRelative = listPageUrl;
            addEntry({ redirectUrlWhenSuccess: targetUrlRelative });
        } else {
            scrollToFirstInvalidInput();
        }
    });
    $('#btn-add-entry').after(entryButton);
    $('#btn-add-entry').remove();
    const customCancelButton = $('<button/>', {
        'class': 'btn btn-danger ew-btn ms-auto primary-red-bg primary-white-clr',
        'id': 'btn-custom-cancel',
        'type': 'button',
        'text': `${ew.language.phrase("CancelBtn")}`,
    }).click(function() {
        if (window[formID].modified) {
            ew.prompt(ew.language.phrase("ConfirmCancel"), result => {
                if (result) {
                    isChangeTabApproved = true;
                    proceedToLink(listPageUrl);
                }
            });
        } else {
            isChangeTabApproved = true;
            proceedToLink(listPageUrl);
        }
    });
    $('#btn-cancel').after(customCancelButton);
    $('#btn-cancel').remove();

    // Target the ol element that has breadcrumb class
    const $breadCrumbOl = $('.breadcrumb').first();

    // Delete the ol element that has breadcrumb class
    $breadCrumbOl.remove();
    $('#btn-action').remove();
    $('.ew-buttons > .col-sm-10').removeClass('col-sm-10').addClass('d-flex mb-3');
    $('.ew-buttons > .offset-sm-2').removeClass('offset-sm-2');
    $('div#r_MTCrewID').hide();

    // AUTO SAVE WHEN MOVING FROM THIS TAB
    $(window).on('beforeunload', function(event) {
        if (!isChangeTabApproved && window[formID].modified) {
            event.preventDefault();
            event.returnValue = '';
            return '';
        }
    });
    $("#btn-proceed").click(function() {
        isChangeTabApproved = true;
        const targetUrlRelative = $(this).attr('target-url-relative');
        $('#approve-modal-dialog').modal('hide');
        proceedToLink(targetUrlRelative);
    });
    $('ul.nav.nav-tabs li.nav-item a.nav-link').on('click', function(event) {
        event.preventDefault();
        const targetUrlRelative = $(this).attr('href');
        if (window[formID].modified) {
            const validateAddEntryResult = validateAddEntry({ isAllEmptyAllowed: true });
            if (validateAddEntryResult === 'valid') {
                $('#loading-modal-dialog').modal('show');
                addEntry({ redirectUrlWhenSuccess: targetUrlRelative });
            } else if (validateAddEntryResult === 'empty') {
                isChangeTabApproved = true;
                proceedToLink(targetUrlRelative);
            } else if (validateAddEntryResult === 'invalid') {
                scrollToFirstInvalidInput();
                $('#btn-proceed').attr('target-url-relative', targetUrlRelative);
                $('#proceed-modal-dialog').modal('show');
            }
        } else {
            isChangeTabApproved = true;
            proceedToLink(targetUrlRelative);
        }
    });
    function proceedToLink(targetUrlRelative) {
        const baseUrl = new URL(window.location.href).origin;
        const targetUrl = new URL(baseUrl + targetUrlRelative);
        window.location.href = targetUrl.href;
    }
    function scrollToFirstInvalidInput() {
        const invalidInput = $("input.is-invalid:first");
        if (invalidInput.length > 0) { // Check if an invalid input is found
            const offset = invalidInput.offset().top; // Calculate the offset of the invalid input element from the top of the page
            const windowHeight = $(window).height(); // Calculate the height of the viewport
            const scrollPosition = offset - (windowHeight / 2); // Calculate the scroll position to center the invalid input element
            $("html, body").animate({ // Animate the scroll to the center position
                scrollTop: scrollPosition
            }, 1000); // Adjust the duration as needed (in milliseconds)
        }
    }
    function addEntry({ redirectUrlWhenSuccess }) {
        isChangeTabApproved = true;
        let formData = $(`form#${formID}`).serialize();
        $('input[type="checkbox"]').each(function() {
            // Jika checkbox tidak dicentang dan tidak ada di hasil serialize(),
            // tambahkan nilai 0 ke hasil serialize()
            if (!this.checked && formData.indexOf(this.name) === -1) {
                formData += '&' + this.name + '=0';
            }
        });
        $.ajax({
            url: addEntryUrl,
            type: 'POST',
            data: formData,
            success: function(res) {
                const $errorDiv = $(res).find('div.ew-error'); // res is a string containing html document
                $('#loading-modal-dialog').modal('hide');
                if ($errorDiv.length > 0) {
                    ew.showToast($errorDiv.text());
                } else {
                    proceedToLink(redirectUrlWhenSuccess);
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                $('#loading-modal-dialog').modal('hide');
                isChangeTabApproved = false;
                ew.showToast(errorThrown);
            }
        });
    }
    function validateAddEntry({ isAllEmptyAllowed }) {
        let formErrorCount = 0;
        let formEmptyCount = 0;
        let isNotEmpty = true;
        const emptyFieldNames = [];
        function validateRequiredField(fieldName) {
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (fieldValue === '' || fieldValue === null) {
                return false;
            } else {
                return true;
            }
        }
        function validateDateField(fieldName) {
            const errorMessage = (selectedLanguage.id === 'en-US') ? 'Incorrect date (dd MMM yyyy)' : 'Tanggal tidak benar (dd MMM yyyy)';
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            const dateParts = fieldValue.split(' ');
            const day = parseInt(dateParts[0], 10);
            const monthNamesEnglish = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            const monthNamesIndonesian = ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Agu', 'Sep', 'Okt', 'Nov', 'Des'];
            const month = (selectedLanguage.id === 'en-US') ? monthNamesEnglish.indexOf(dateParts[1]) : monthNamesIndonesian.indexOf(dateParts[1]);
            const year = parseInt(dateParts[2], 10);
            let valid = false;
            if (year >= 1900 && year <= 9999 && month >= 0 && day >= 1 && day <= 31) {
                switch (month) {
                    case 1: // February
                        // Check for leap year
                        valid = day <= (((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) ? 29 : 28);
                        break;
                    case 3: // April
                    case 5: // June
                    case 8: // September
                    case 10: // November
                        valid = day <= 30;
                        break;
                    default:
                        valid = true;
                        break;
                }
            }
            if (!valid) {
                window[formID].fields[fieldName].addError({ custom: errorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessage });
                return false;
            } else {
                return true;
            }
        }
        function validateFieldWithRegex(fieldName, errorMessage, regex) {
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (!regex.test(fieldValue)) {  
                window[formID].fields[fieldName].addError({ custom: errorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessage });
                return false;
            } else {
                return true;
            }
        }
        function displayRequiredFieldError(fieldName) {
            const errorMessage = (selectedLanguage.id === 'en-US') ? "Please enter required field" : "Masukkan input yang dibutuhkan";
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldCaption = $(`label[for=${fieldNameWithPrefix}]`).text();
            const errorMessageWithFieldName = `${errorMessage} - ${fieldCaption}`;
            window[formID].fields[fieldName].addError({ custom: errorMessageWithFieldName });
            window[formID].fields[fieldName].updateFeedback();
            window[formID].addError(fieldName, { custom: errorMessageWithFieldName });
        }
        const digitsOnlyRegex = /^\d+$/;
        const digitsOnlyRegexErrorMessage = (selectedLanguage.id === 'en-US') ? "Must contain digits only" : "Harus terdiri dari angka saja";
        isNotEmpty = validateRequiredField("CompanyName");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("CompanyName");
            } else {
                displayRequiredFieldError("CompanyName");
            }
        }
        isNotEmpty = validateRequiredField("FlagName_CountryID");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("FlagName_CountryID");
            } else {
                displayRequiredFieldError("FlagName_CountryID");
            }
        }
        isNotEmpty = validateRequiredField("VesselName");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("VesselName");
            } else {
                displayRequiredFieldError("VesselName");
            }
        }
        isNotEmpty = validateRequiredField("MTVesselTypeID");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("MTVesselTypeID");
            } else {
                displayRequiredFieldError("MTVesselTypeID");
            }
        }
        isNotEmpty = validateRequiredField("GRT");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("GRT");
            } else {
                displayRequiredFieldError("GRT");
            }
        } else {
            formErrorCount += validateFieldWithRegex("GRT",  digitsOnlyRegexErrorMessage, digitsOnlyRegex) ? 0 : 1;
        }
        isNotEmpty = validateRequiredField("DWT");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("DWT");
            } else {
                displayRequiredFieldError("DWT");
            }
        } else {
            formErrorCount += validateFieldWithRegex("DWT",  digitsOnlyRegexErrorMessage, digitsOnlyRegex) ? 0 : 1;
        }
        isNotEmpty = validateRequiredField("MainEngine");
        if (!isNotEmpty) {
            formEmptyCount += 1;
        }
        // isNotEmpty = validateRequiredField("BHP");
        // if (!isNotEmpty) {
        //     formEmptyCount += 1;
        //     formErrorCount += 1;
        //     if (isAllEmptyAllowed) {
        //         emptyFieldNames.push("BHP");
        //     } else {
        //         displayRequiredFieldError("BHP");
        //     }
        // } else {
        //     formErrorCount += validateFieldWithRegex("BHP",  digitsOnlyRegexErrorMessage, digitsOnlyRegex) ? 0 : 1;
        // }
        isNotEmpty = validateRequiredField("DateFrom");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("DateFrom");
            } else {
                displayRequiredFieldError("DateFrom");
            }
        } else {
            if (validateDateField("DateFrom")) {
                const dateFromValue = $(`#x_DateFrom`).val();
                const currentDateTenYearsAgo = new Date();
                currentDateTenYearsAgo.setFullYear(currentDateTenYearsAgo.getFullYear() - 10);
                const dateFromObject = new Date(dateFromValue);
                if (dateFromObject < currentDateTenYearsAgo) {
                    const dateFromCaption = $('label[for="x_DateFrom"]').text();
                    formErrorCount += 1;
                    const errorMessage = (selectedLanguage.id === 'en-US') ? `${dateFromCaption} cannot be older than 10 years ago` : `${dateFromCaption} tidak boleh lebih awal dari 10 tahun yang lalu`;
                    window[formID].fields["DateFrom"].addError({ custom: errorMessage });
                    window[formID].fields["DateFrom"].updateFeedback();
                    window[formID].addError("DateFrom", { custom: errorMessage });
                }
            } else {
                formErrorCount += 1;
            }
        }
        isNotEmpty = validateRequiredField("SignOnPortName");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("SignOnPortName");
            } else {
                displayRequiredFieldError("SignOnPortName");
            }
        }
        isNotEmpty = validateRequiredField("DateUntil");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("DateUntil");
            } else {
                displayRequiredFieldError("DateUntil");
            }
        } else {
            if (validateDateField("DateUntil")) {
                const dateUntilValue = $(`#x_DateUntil`).val();
                const currentDateTenYearsAgo = new Date();
                currentDateTenYearsAgo.setFullYear(currentDateTenYearsAgo.getFullYear() - 10);
                const dateUntilObject = new Date(dateUntilValue);
                if (dateUntilObject < currentDateTenYearsAgo) {
                    const dateUntilCaption = $('label[for="x_DateUntil"]').text();
                    formErrorCount += 1;
                    const errorMessage = (selectedLanguage.id === 'en-US') ? `${dateUntilCaption} cannot be older than 10 years ago` : `${dateUntilCaption} tidak boleh lebih awal dari 10 tahun yang lalu`;
                    window[formID].fields["DateUntil"].addError({ custom: errorMessage });
                    window[formID].fields["DateUntil"].updateFeedback();
                    window[formID].addError("DateUntil", { custom: errorMessage });
                }
            } else {
                formErrorCount += 1;
            }
        }
        isNotEmpty = validateRequiredField("SignOffPortName");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("SignOffPortName");
            } else {
                displayRequiredFieldError("SignOffPortName");
            }
        }
        isNotEmpty = validateRequiredField("SignOffReason");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("SignOffReason");
            } else {
                displayRequiredFieldError("SignOffReason");
            }
        }
        isNotEmpty = validateRequiredField("MTRankID");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("MTRankID");
            } else {
                displayRequiredFieldError("MTRankID");
            }
        } else {
            const rankName = $('#x_MTRankID').select2('data')[0].text;
            if (rankName.includes('Engineer')) {
                isNotEmpty = validateRequiredField("MainEngine");
                if (!isNotEmpty) {
                    formErrorCount += 1;
                    const errorMessage = (selectedLanguage.id === 'en-US') ? `Must be filled when chosen rank is Engineer` : `Harus diisi ketika memilih jabatan Engineer`;
                    window[formID].fields["MainEngine"].addError({ custom: errorMessage });
                    window[formID].fields["MainEngine"].updateFeedback();
                    window[formID].addError("MainEngine", { custom: errorMessage });
                }
            }
        }
        if (formEmptyCount === 13) {
            return 'empty';
        }
        if (emptyFieldNames.length > 0) {
            for (const fieldName of emptyFieldNames) {
                displayRequiredFieldError(fieldName);
            }
        }
        if (formErrorCount > 0) {
            return 'invalid';
        } else {
            return 'valid';
        }
    }
});
</script>
