@{
    // View
    View = this;

    // Check action result
    if (trChecklistPerformanceAdd.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!trChecklistPerformanceAdd.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(trChecklistPerformanceAdd.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { TRChecklistPerformance: currentTable } });
var currentPageID = ew.PAGE_ID = "add";
var currentForm;
var fTRChecklistPerformanceadd;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fTRChecklistPerformanceadd")
        .setPageId("add")

        // Add fields
        .setFields([

            ["ManningAgent", [fields.ManningAgent.visible && fields.ManningAgent.required ? ew.Validators.required(fields.ManningAgent.caption) : null], fields.ManningAgent.isInvalid],
            ["VesselName", [fields.VesselName.visible && fields.VesselName.required ? ew.Validators.required(fields.VesselName.caption) : null], fields.VesselName.isInvalid],
            ["Performance", [fields.Performance.visible && fields.Performance.required ? ew.Validators.required(fields.Performance.caption) : null], fields.Performance.isInvalid],
            ["DateChecked", [fields.DateChecked.visible && fields.DateChecked.required ? ew.Validators.required(fields.DateChecked.caption) : null, ew.Validators.datetime(fields.DateChecked.clientFormatPattern)], fields.DateChecked.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@trChecklistPerformanceAdd.ShowPageHeader()
@trChecklistPerformanceAdd.ShowMessages()
<form name="fTRChecklistPerformanceadd" id="fTRChecklistPerformanceadd" class="@(trChecklistPerformanceAdd.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="insert">
<input type="hidden" name="modal" value="@ConvertToInt(trChecklistPerformanceAdd.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(trChecklistPerformanceAdd.OldKeyName)" value="@Html.Raw(trChecklistPerformanceAdd.OldKey)">
@if (trChecklistPerformanceAdd.CurrentMasterTable == "TRChecklist") {
<input type="hidden" name="@Config.TableShowMaster" value="TRChecklist">
<input type="hidden" name="fk_ID" value="@(HtmlEncode(trChecklistPerformanceAdd.TRChecklistID.SessionValue))">
}
@if (trChecklistPerformanceAdd.CurrentMasterTable == "CrewChecklistForAdmin") {
<input type="hidden" name="@Config.TableShowMaster" value="CrewChecklistForAdmin">
<input type="hidden" name="fk_ID" value="@(HtmlEncode(trChecklistPerformanceAdd.TRChecklistID.SessionValue))">
}
<div class="ew-add-div"><!-- page* -->
@if (trChecklistPerformanceAdd.ManningAgent.Visible) { // trChecklistPerformanceAdd.ManningAgent.Visible (begin)
    <div id="r_ManningAgent" @Html.Raw(trChecklistPerformanceAdd.ManningAgent.RowAttributes)>
        <label id="elh_TRChecklistPerformance_ManningAgent" for="x_ManningAgent" class="@(trChecklistPerformanceAdd.LeftColumnClass)">@Html.Raw(trChecklistPerformanceAdd.ManningAgent.Caption)@Html.Raw(trChecklistPerformanceAdd.ManningAgent.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trChecklistPerformanceAdd.RightColumnClass)"><div @Html.Raw(trChecklistPerformanceAdd.ManningAgent.CellAttributes)>
<span id="el_TRChecklistPerformance_ManningAgent">
<input type="@(trChecklistPerformanceAdd.ManningAgent.InputTextType)" name="x_ManningAgent" id="x_ManningAgent" data-table="TRChecklistPerformance" data-field="x_ManningAgent" value="@Html.Raw(trChecklistPerformanceAdd.ManningAgent.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(trChecklistPerformanceAdd.ManningAgent.PlaceHolder))" data-format-pattern="@(trChecklistPerformanceAdd.ManningAgent.FormatPattern)"@Html.Raw(trChecklistPerformanceAdd.ManningAgent.EditAttributes) aria-describedby="x_ManningAgent_help">
@Html.Raw(trChecklistPerformanceAdd.ManningAgent.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trChecklistPerformanceAdd.ManningAgent.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* trChecklistPerformanceAdd.ManningAgent.Visible (end) *@
@if (trChecklistPerformanceAdd.VesselName.Visible) { // trChecklistPerformanceAdd.VesselName.Visible (begin)
    <div id="r_VesselName" @Html.Raw(trChecklistPerformanceAdd.VesselName.RowAttributes)>
        <label id="elh_TRChecklistPerformance_VesselName" for="x_VesselName" class="@(trChecklistPerformanceAdd.LeftColumnClass)">@Html.Raw(trChecklistPerformanceAdd.VesselName.Caption)@Html.Raw(trChecklistPerformanceAdd.VesselName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trChecklistPerformanceAdd.RightColumnClass)"><div @Html.Raw(trChecklistPerformanceAdd.VesselName.CellAttributes)>
<span id="el_TRChecklistPerformance_VesselName">
<input type="@(trChecklistPerformanceAdd.VesselName.InputTextType)" name="x_VesselName" id="x_VesselName" data-table="TRChecklistPerformance" data-field="x_VesselName" value="@Html.Raw(trChecklistPerformanceAdd.VesselName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(trChecklistPerformanceAdd.VesselName.PlaceHolder))" data-format-pattern="@(trChecklistPerformanceAdd.VesselName.FormatPattern)"@Html.Raw(trChecklistPerformanceAdd.VesselName.EditAttributes) aria-describedby="x_VesselName_help">
@Html.Raw(trChecklistPerformanceAdd.VesselName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trChecklistPerformanceAdd.VesselName.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* trChecklistPerformanceAdd.VesselName.Visible (end) *@
@if (trChecklistPerformanceAdd.Performance.Visible) { // trChecklistPerformanceAdd.Performance.Visible (begin)
    <div id="r_Performance" @Html.Raw(trChecklistPerformanceAdd.Performance.RowAttributes)>
        <label id="elh_TRChecklistPerformance_Performance" for="x_Performance" class="@(trChecklistPerformanceAdd.LeftColumnClass)">@Html.Raw(trChecklistPerformanceAdd.Performance.Caption)@Html.Raw(trChecklistPerformanceAdd.Performance.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trChecklistPerformanceAdd.RightColumnClass)"><div @Html.Raw(trChecklistPerformanceAdd.Performance.CellAttributes)>
<span id="el_TRChecklistPerformance_Performance">
<input type="@(trChecklistPerformanceAdd.Performance.InputTextType)" name="x_Performance" id="x_Performance" data-table="TRChecklistPerformance" data-field="x_Performance" value="@Html.Raw(trChecklistPerformanceAdd.Performance.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(trChecklistPerformanceAdd.Performance.PlaceHolder))" data-format-pattern="@(trChecklistPerformanceAdd.Performance.FormatPattern)"@Html.Raw(trChecklistPerformanceAdd.Performance.EditAttributes) aria-describedby="x_Performance_help">
@Html.Raw(trChecklistPerformanceAdd.Performance.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trChecklistPerformanceAdd.Performance.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* trChecklistPerformanceAdd.Performance.Visible (end) *@
@if (trChecklistPerformanceAdd.DateChecked.Visible) { // trChecklistPerformanceAdd.DateChecked.Visible (begin)
    <div id="r_DateChecked" @Html.Raw(trChecklistPerformanceAdd.DateChecked.RowAttributes)>
        <label id="elh_TRChecklistPerformance_DateChecked" for="x_DateChecked" class="@(trChecklistPerformanceAdd.LeftColumnClass)">@Html.Raw(trChecklistPerformanceAdd.DateChecked.Caption)@Html.Raw(trChecklistPerformanceAdd.DateChecked.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trChecklistPerformanceAdd.RightColumnClass)"><div @Html.Raw(trChecklistPerformanceAdd.DateChecked.CellAttributes)>
<span id="el_TRChecklistPerformance_DateChecked">
<input type="@(trChecklistPerformanceAdd.DateChecked.InputTextType)" name="x_DateChecked" id="x_DateChecked" data-table="TRChecklistPerformance" data-field="x_DateChecked" value="@Html.Raw(trChecklistPerformanceAdd.DateChecked.EditValue)" maxlength="50" placeholder="@Html.Raw(HtmlEncode(trChecklistPerformanceAdd.DateChecked.PlaceHolder))" data-format-pattern="@(trChecklistPerformanceAdd.DateChecked.FormatPattern)"@Html.Raw(trChecklistPerformanceAdd.DateChecked.EditAttributes) aria-describedby="x_DateChecked_help">
@Html.Raw(trChecklistPerformanceAdd.DateChecked.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trChecklistPerformanceAdd.DateChecked.GetErrorMessage())</div>
@if (!trChecklistPerformanceAdd.DateChecked.ReadOnly && !trChecklistPerformanceAdd.DateChecked.Disabled && !trChecklistPerformanceAdd.DateChecked.EditAttrs.Is("readonly") && !trChecklistPerformanceAdd.DateChecked.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fTRChecklistPerformanceadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fTRChecklistPerformanceadd", "x_DateChecked", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* trChecklistPerformanceAdd.DateChecked.Visible (end) *@
</div><!-- /page* -->
    @if (!Empty(trChecklistPerformanceAdd.TRChecklistID.SessionValue)) {
    <input type="hidden" name="x_TRChecklistID" id="x_TRChecklistID" value="@(HtmlEncode(ConvertToString(trChecklistPerformanceAdd.TRChecklistID.SessionValue)))">
    }
@{ trChecklistPerformanceAdd.CloseRecordset(); }
@Html.Raw(trChecklistPerformanceAdd.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(trChecklistPerformanceAdd.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fTRChecklistPerformanceadd">@Html.Raw(Language.Phrase("AddBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fTRChecklistPerformanceadd" data-href="@AppPath(trChecklistPerformanceAdd.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(trChecklistPerformanceAdd.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
@trChecklistPerformanceAdd.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("TRChecklistPerformance");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
