@{
    // View
    View = this;

    // Check action result
    if (crewNotificationForAdminAdd.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!crewNotificationForAdminAdd.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(crewNotificationForAdminAdd.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { CrewNotificationForAdmin: currentTable } });
var currentPageID = ew.PAGE_ID = "add";
var currentForm;
var fCrewNotificationForAdminadd;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fCrewNotificationForAdminadd")
        .setPageId("add")

        // Add fields
        .setFields([

            ["CrewSeafarerIDWithName", [fields.CrewSeafarerIDWithName.visible && fields.CrewSeafarerIDWithName.required ? ew.Validators.required(fields.CrewSeafarerIDWithName.caption) : null], fields.CrewSeafarerIDWithName.isInvalid],
            ["Subject", [fields.Subject.visible && fields.Subject.required ? ew.Validators.required(fields.Subject.caption) : null], fields.Subject.isInvalid],
            ["Body", [fields.Body.visible && fields.Body.required ? ew.Validators.required(fields.Body.caption) : null], fields.Body.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "CrewSeafarerIDWithName": @Html.Raw(crewNotificationForAdminAdd.CrewSeafarerIDWithName.ToClientList(crewNotificationForAdminAdd)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@crewNotificationForAdminAdd.ShowPageHeader()
@crewNotificationForAdminAdd.ShowMessages()
<form name="fCrewNotificationForAdminadd" id="fCrewNotificationForAdminadd" class="@(crewNotificationForAdminAdd.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="insert">
<input type="hidden" name="modal" value="@ConvertToInt(crewNotificationForAdminAdd.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(crewNotificationForAdminAdd.OldKeyName)" value="@Html.Raw(crewNotificationForAdminAdd.OldKey)">
<div class="ew-add-div"><!-- page* -->
@if (crewNotificationForAdminAdd.CrewSeafarerIDWithName.Visible) { // crewNotificationForAdminAdd.CrewSeafarerIDWithName.Visible (begin)
    <div id="r_CrewSeafarerIDWithName" @Html.Raw(crewNotificationForAdminAdd.CrewSeafarerIDWithName.RowAttributes)>
        <label id="elh_CrewNotificationForAdmin_CrewSeafarerIDWithName" for="x_CrewSeafarerIDWithName" class="@(crewNotificationForAdminAdd.LeftColumnClass)">@Html.Raw(crewNotificationForAdminAdd.CrewSeafarerIDWithName.Caption)@Html.Raw(crewNotificationForAdminAdd.CrewSeafarerIDWithName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(crewNotificationForAdminAdd.RightColumnClass)"><div @Html.Raw(crewNotificationForAdminAdd.CrewSeafarerIDWithName.CellAttributes)>
<span id="el_CrewNotificationForAdmin_CrewSeafarerIDWithName">
    <select
        id="x_CrewSeafarerIDWithName"
        name="x_CrewSeafarerIDWithName"
        class="form-select ew-select@(crewNotificationForAdminAdd.CrewSeafarerIDWithName.IsInvalidClass)"
        data-select2-id="fCrewNotificationForAdminadd_x_CrewSeafarerIDWithName"
        data-table="CrewNotificationForAdmin"
        data-field="x_CrewSeafarerIDWithName"
        data-value-separator="@(crewNotificationForAdminAdd.CrewSeafarerIDWithName.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewNotificationForAdminAdd.CrewSeafarerIDWithName.PlaceHolder))"
        @Html.Raw(crewNotificationForAdminAdd.CrewSeafarerIDWithName.EditAttributes)>
        @(crewNotificationForAdminAdd.CrewSeafarerIDWithName.SelectOptionListHtml("x_CrewSeafarerIDWithName"))
    </select>
    @Html.Raw(crewNotificationForAdminAdd.CrewSeafarerIDWithName.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewNotificationForAdminAdd.CrewSeafarerIDWithName.GetErrorMessage())</div>
@Html.Raw(crewNotificationForAdminAdd.CrewSeafarerIDWithName.Lookup.GetParamTag(crewNotificationForAdminAdd, "p_x_CrewSeafarerIDWithName"))
<script>
loadjs.ready("fCrewNotificationForAdminadd", function() {
    var options = { name: "x_CrewSeafarerIDWithName", selectId: "fCrewNotificationForAdminadd_x_CrewSeafarerIDWithName" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewNotificationForAdminadd.lists.CrewSeafarerIDWithName?.lookupOptions.length) {
        options.data = { id: "x_CrewSeafarerIDWithName", form: "fCrewNotificationForAdminadd" };
    } else {
        options.ajax = { id: "x_CrewSeafarerIDWithName", form: "fCrewNotificationForAdminadd", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumInputLength = ew.selectMinimumInputLength;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewNotificationForAdmin.fields.CrewSeafarerIDWithName.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
</div></div>
    </div>
} @* crewNotificationForAdminAdd.CrewSeafarerIDWithName.Visible (end) *@
@if (crewNotificationForAdminAdd.Subject.Visible) { // crewNotificationForAdminAdd.Subject.Visible (begin)
    <div id="r_Subject" @Html.Raw(crewNotificationForAdminAdd.Subject.RowAttributes)>
        <label id="elh_CrewNotificationForAdmin_Subject" for="x_Subject" class="@(crewNotificationForAdminAdd.LeftColumnClass)">@Html.Raw(crewNotificationForAdminAdd.Subject.Caption)@Html.Raw(crewNotificationForAdminAdd.Subject.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(crewNotificationForAdminAdd.RightColumnClass)"><div @Html.Raw(crewNotificationForAdminAdd.Subject.CellAttributes)>
<span id="el_CrewNotificationForAdmin_Subject">
<input type="@(crewNotificationForAdminAdd.Subject.InputTextType)" name="x_Subject" id="x_Subject" data-table="CrewNotificationForAdmin" data-field="x_Subject" value="@Html.Raw(crewNotificationForAdminAdd.Subject.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewNotificationForAdminAdd.Subject.PlaceHolder))" data-format-pattern="@(crewNotificationForAdminAdd.Subject.FormatPattern)"@Html.Raw(crewNotificationForAdminAdd.Subject.EditAttributes) aria-describedby="x_Subject_help">
@Html.Raw(crewNotificationForAdminAdd.Subject.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewNotificationForAdminAdd.Subject.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* crewNotificationForAdminAdd.Subject.Visible (end) *@
@if (crewNotificationForAdminAdd.Body.Visible) { // crewNotificationForAdminAdd.Body.Visible (begin)
    <div id="r_Body" @Html.Raw(crewNotificationForAdminAdd.Body.RowAttributes)>
        <label id="elh_CrewNotificationForAdmin_Body" for="x_Body" class="@(crewNotificationForAdminAdd.LeftColumnClass)">@Html.Raw(crewNotificationForAdminAdd.Body.Caption)@Html.Raw(crewNotificationForAdminAdd.Body.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(crewNotificationForAdminAdd.RightColumnClass)"><div @Html.Raw(crewNotificationForAdminAdd.Body.CellAttributes)>
<span id="el_CrewNotificationForAdmin_Body">
<textarea data-table="CrewNotificationForAdmin" data-field="x_Body" name="x_Body" id="x_Body" cols="50" rows="10" placeholder="@Html.Raw(HtmlEncode(crewNotificationForAdminAdd.Body.PlaceHolder))"@Html.Raw(crewNotificationForAdminAdd.Body.EditAttributes) aria-describedby="x_Body_help">@(crewNotificationForAdminAdd.Body.EditValue)</textarea>
@Html.Raw(crewNotificationForAdminAdd.Body.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewNotificationForAdminAdd.Body.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* crewNotificationForAdminAdd.Body.Visible (end) *@
</div><!-- /page* -->
@{ crewNotificationForAdminAdd.CloseRecordset(); }
@Html.Raw(crewNotificationForAdminAdd.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(crewNotificationForAdminAdd.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fCrewNotificationForAdminadd">@Html.Raw(Language.Phrase("AddBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fCrewNotificationForAdminadd" data-href="@AppPath(crewNotificationForAdminAdd.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(crewNotificationForAdminAdd.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
@crewNotificationForAdminAdd.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("CrewNotificationForAdmin");
});
</script>
<script>
loadjs.ready("load", function() {
    // Startup script
    // Write your table-specific startup script here
    // document.write("page loaded");
    const selectedLanguage = ew.vars['languages']['languages'].filter(obj => obj.selected === true)[0];
    const formID = `fCrewNotificationForAdminadd`;
    $('.breadcrumb li.breadcrumb-item a:not(.ew-home)').attr('href', `${ew.PATH_BASE}NotificationForAdminList`);
    const customAddButton = $('<button/>', {
        'class': 'btn btn-primary ew-btn',
        'id': 'btn-custom-add',
        'type': 'button',
        'text': `${ew.language.phrase("AddBtn")}`
    }).click(function() {
        const subjectValue = $('#x_Subject').val();
        const bodyValue = $('#x_Body').val();
        const crewIDRawValue = $('#x_CrewSeafarerIDWithName').val();
        let formErrorCount = 0;
        const errorMessage = (selectedLanguage.id === 'en-US') ? "Please enter required field" : "Masukkan input yang dibutuhkan";
        if (subjectValue === '') {
            const subjectCaption = $(`label[for="x_Subject"]`).text();
            const errorMessageWithFieldName = `${errorMessage} - ${subjectCaption}`;
            window[formID].fields["Subject"].addError({ custom: errorMessageWithFieldName });
            window[formID].fields["Subject"].updateFeedback();
            window[formID].addError("Subject", { custom: errorMessageWithFieldName }); 
            formErrorCount += 1;
        }
        if (bodyValue === '') {
            const bodyCaption = $(`label[for="x_Body"]`).text();
            const errorMessageWithFieldName = `${errorMessage} - ${bodyCaption}`;
            window[formID].fields["Body"].addError({ custom: errorMessageWithFieldName });
            window[formID].fields["Body"].updateFeedback();
            window[formID].addError("Body", { custom: errorMessageWithFieldName });
            formErrorCount += 1;
        }
        if (formErrorCount > 0) {
            return;
        }
        const confirmationMessageEnglish = `<span>Notifications which are already posted cannot be edited.</span><br/><span>Do you want to post this notification?</span>`;
        const confirmationMessageIndonesian = `<span>Notifikasi yang sudah dikirim tidak bisa diubah.</span><br/><span>Apakah Anda yakin untuk mengirim notifikasi ini?</span>`;
        const confirmationMessage = (selectedLanguage.id === 'en-US') ? confirmationMessageEnglish : confirmationMessageIndonesian;
        ew.prompt(confirmationMessage, result => {
            if (result) {
                const crewIDValue = (crewIDRawValue === '' || crewIDRawValue === null) ? '' : crewIDRawValue;
                const addNotificationForAdminRequest = {
                    subject: subjectValue,
                    body: bodyValue,
                    crewID: crewIDValue,
                };
                const addNotificationForAdminApi = 'add-notification-for-admin';
                $.ajax({
                    url: `${ew.PATH_BASE}api/Registration/${addNotificationForAdminApi}`,
                    method: 'POST',
                    contentType: "application/json",
                    data: JSON.stringify(addNotificationForAdminRequest),
                    success: function(response) {
                        if (response.success) {
                            let successMessage = '';
                            if (selectedLanguage.id === 'en-US') {
                                successMessage = `Add Notification Successful`;
                            } else {
                                successMessage = `Menambahkan Notifikasi Berhasil`;
                            }
                            const baseUrl = new URL(window.location.href).origin;
                            const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}NotificationForAdminList`);
                            const encodedSuccessMessage = encodeURIComponent(successMessage);
                            const params = new URLSearchParams(targetUrl.search);
                            params.set('successMessage', encodedSuccessMessage);
                            targetUrl.search = params.toString();
                            window.location.href = targetUrl.href;
                        } else {
                            ew.showToast(response.errorMessage);
                        }
                    },
                    error: function(xhr, textStatus, errorThrown) {
                        ew.showToast(errorThrown);
                    }
                });
            }
        });
    });
    $('#btn-action').after(customAddButton);
    $('#btn-action').remove();
});
</script>
