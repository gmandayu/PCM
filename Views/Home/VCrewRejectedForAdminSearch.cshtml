@{
    // View
    View = this;

    // Check action result
    if (vCrewRejectedForAdminSearch.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!vCrewRejectedForAdminSearch.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(vCrewRejectedForAdminSearch.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { v_CrewRejectedForAdmin: currentTable } });
var currentPageID = ew.PAGE_ID = "search";
var currentForm;
var fv_CrewRejectedForAdminsearch, currentSearchForm, currentAdvancedSearchForm;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery,
        fields = currentTable.fields;

    // Form object for search
    let form = new ew.FormBuilder()
        .setId("fv_CrewRejectedForAdminsearch")
        .setPageId("search")
@if (vCrewRejectedForAdminSearch.IsModal && vCrewRejectedForAdminSearch.UseAjaxActions) {
        <text>.setSubmitWithFetch(true)</text>
}

        // Add fields
        .setFields([

            ["IndividualCodeNumber", [], fields.IndividualCodeNumber.isInvalid],
            ["EmployeeStatus", [], fields.EmployeeStatus.isInvalid],
            ["FullName", [], fields.FullName.isInvalid],
            ["RequiredPhoto", [], fields.RequiredPhoto.isInvalid],
            ["VisaPhoto", [], fields.VisaPhoto.isInvalid],
            ["CityOfBirth", [], fields.CityOfBirth.isInvalid],
            ["DateOfBirth", [ew.Validators.datetime(fields.DateOfBirth.clientFormatPattern)], fields.DateOfBirth.isInvalid],
            ["Gender", [], fields.Gender.isInvalid],
            ["RankAppliedFor_RankID", [ew.Validators.integer], fields.RankAppliedFor_RankID.isInvalid],
            ["WillAcceptLowRank", [], fields.WillAcceptLowRank.isInvalid],
            ["AvailableFrom", [ew.Validators.datetime(fields.AvailableFrom.clientFormatPattern)], fields.AvailableFrom.isInvalid],
            ["AvailableUntil", [ew.Validators.datetime(fields.AvailableUntil.clientFormatPattern)], fields.AvailableUntil.isInvalid]
        ])
        // Validate form
        .setValidate(
            async function () {
                if (!this.validateRequired)
                    return true; // Ignore validation
                let fobj = this.getForm();

                // Validate fields
                if (!this.validateFields())
                    return false;

                // Call Form_CustomValidate event
                if (!(await this.customValidate?.(fobj) ?? true)) {
                    this.focus();
                    return false;
                }
                return true;
            }
        )

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "RankAppliedFor_RankID": @Html.Raw(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.ToClientList(vCrewRejectedForAdminSearch)),
            "WillAcceptLowRank": @Html.Raw(vCrewRejectedForAdminSearch.WillAcceptLowRank.ToClientList(vCrewRejectedForAdminSearch)),
        })
        .build();
    window[form.id] = form;
@if (vCrewRejectedForAdminSearch.IsModal) {
    <text>currentAdvancedSearchForm = form;</text>
} else {
    <text>currentForm = form;</text>
}
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@vCrewRejectedForAdminSearch.ShowPageHeader()
@vCrewRejectedForAdminSearch.ShowMessages()
<form name="fv_CrewRejectedForAdminsearch" id="fv_CrewRejectedForAdminsearch" class="@(vCrewRejectedForAdminSearch.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="search">
@if (vCrewRejectedForAdminSearch.IsModal) {
<input type="hidden" name="modal" value="1">
}
<div class="ew-search-div"><!-- page* -->
@if (vCrewRejectedForAdminSearch.IndividualCodeNumber.Visible) { // vCrewRejectedForAdminSearch.IndividualCodeNumber.Visible (begin)
    <div id="r_IndividualCodeNumber" class="row" @Html.Raw(vCrewRejectedForAdminSearch.IndividualCodeNumber.RowAttributes)>
        <label for="x_IndividualCodeNumber" class="@(vCrewRejectedForAdminSearch.LeftColumnClass)"><span id="elh_v_CrewRejectedForAdmin_IndividualCodeNumber">@Html.Raw(vCrewRejectedForAdminSearch.IndividualCodeNumber.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("LIKE"))
<input type="hidden" name="z_IndividualCodeNumber" id="z_IndividualCodeNumber" value="LIKE">
</span>
        </label>
        <div class="@(vCrewRejectedForAdminSearch.RightColumnClass)">
            <div @Html.Raw(vCrewRejectedForAdminSearch.IndividualCodeNumber.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_v_CrewRejectedForAdmin_IndividualCodeNumber" class="ew-search-field ew-search-field-single">
<input type="@(vCrewRejectedForAdminSearch.IndividualCodeNumber.InputTextType)" name="x_IndividualCodeNumber" id="x_IndividualCodeNumber" data-table="v_CrewRejectedForAdmin" data-field="x_IndividualCodeNumber" value="@Html.Raw(vCrewRejectedForAdminSearch.IndividualCodeNumber.EditValue)" size="30" maxlength="20" placeholder="@Html.Raw(HtmlEncode(vCrewRejectedForAdminSearch.IndividualCodeNumber.PlaceHolder))" data-format-pattern="@(vCrewRejectedForAdminSearch.IndividualCodeNumber.FormatPattern)"@Html.Raw(vCrewRejectedForAdminSearch.IndividualCodeNumber.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(vCrewRejectedForAdminSearch.IndividualCodeNumber.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* vCrewRejectedForAdminSearch.IndividualCodeNumber.Visible (end) *@
@if (vCrewRejectedForAdminSearch.EmployeeStatus.Visible) { // vCrewRejectedForAdminSearch.EmployeeStatus.Visible (begin)
    <div id="r_EmployeeStatus" class="row" @Html.Raw(vCrewRejectedForAdminSearch.EmployeeStatus.RowAttributes)>
        <label for="x_EmployeeStatus" class="@(vCrewRejectedForAdminSearch.LeftColumnClass)"><span id="elh_v_CrewRejectedForAdmin_EmployeeStatus">@Html.Raw(vCrewRejectedForAdminSearch.EmployeeStatus.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("LIKE"))
<input type="hidden" name="z_EmployeeStatus" id="z_EmployeeStatus" value="LIKE">
</span>
        </label>
        <div class="@(vCrewRejectedForAdminSearch.RightColumnClass)">
            <div @Html.Raw(vCrewRejectedForAdminSearch.EmployeeStatus.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_v_CrewRejectedForAdmin_EmployeeStatus" class="ew-search-field ew-search-field-single">
<input type="@(vCrewRejectedForAdminSearch.EmployeeStatus.InputTextType)" name="x_EmployeeStatus" id="x_EmployeeStatus" data-table="v_CrewRejectedForAdmin" data-field="x_EmployeeStatus" value="@Html.Raw(vCrewRejectedForAdminSearch.EmployeeStatus.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(vCrewRejectedForAdminSearch.EmployeeStatus.PlaceHolder))" data-format-pattern="@(vCrewRejectedForAdminSearch.EmployeeStatus.FormatPattern)"@Html.Raw(vCrewRejectedForAdminSearch.EmployeeStatus.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(vCrewRejectedForAdminSearch.EmployeeStatus.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* vCrewRejectedForAdminSearch.EmployeeStatus.Visible (end) *@
@if (vCrewRejectedForAdminSearch.FullName.Visible) { // vCrewRejectedForAdminSearch.FullName.Visible (begin)
    <div id="r_FullName" class="row" @Html.Raw(vCrewRejectedForAdminSearch.FullName.RowAttributes)>
        <label for="x_FullName" class="@(vCrewRejectedForAdminSearch.LeftColumnClass)"><span id="elh_v_CrewRejectedForAdmin_FullName">@Html.Raw(vCrewRejectedForAdminSearch.FullName.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("LIKE"))
<input type="hidden" name="z_FullName" id="z_FullName" value="LIKE">
</span>
        </label>
        <div class="@(vCrewRejectedForAdminSearch.RightColumnClass)">
            <div @Html.Raw(vCrewRejectedForAdminSearch.FullName.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_v_CrewRejectedForAdmin_FullName" class="ew-search-field ew-search-field-single">
<input type="@(vCrewRejectedForAdminSearch.FullName.InputTextType)" name="x_FullName" id="x_FullName" data-table="v_CrewRejectedForAdmin" data-field="x_FullName" value="@Html.Raw(vCrewRejectedForAdminSearch.FullName.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(vCrewRejectedForAdminSearch.FullName.PlaceHolder))" data-format-pattern="@(vCrewRejectedForAdminSearch.FullName.FormatPattern)"@Html.Raw(vCrewRejectedForAdminSearch.FullName.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(vCrewRejectedForAdminSearch.FullName.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* vCrewRejectedForAdminSearch.FullName.Visible (end) *@
@if (vCrewRejectedForAdminSearch.RequiredPhoto.Visible) { // vCrewRejectedForAdminSearch.RequiredPhoto.Visible (begin)
    <div id="r_RequiredPhoto" class="row" @Html.Raw(vCrewRejectedForAdminSearch.RequiredPhoto.RowAttributes)>
        <label for="x_RequiredPhoto" class="@(vCrewRejectedForAdminSearch.LeftColumnClass)"><span id="elh_v_CrewRejectedForAdmin_RequiredPhoto">@Html.Raw(vCrewRejectedForAdminSearch.RequiredPhoto.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("LIKE"))
<input type="hidden" name="z_RequiredPhoto" id="z_RequiredPhoto" value="LIKE">
</span>
        </label>
        <div class="@(vCrewRejectedForAdminSearch.RightColumnClass)">
            <div @Html.Raw(vCrewRejectedForAdminSearch.RequiredPhoto.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_v_CrewRejectedForAdmin_RequiredPhoto" class="ew-search-field ew-search-field-single">
<input type="@(vCrewRejectedForAdminSearch.RequiredPhoto.InputTextType)" name="x_RequiredPhoto" id="x_RequiredPhoto" data-table="v_CrewRejectedForAdmin" data-field="x_RequiredPhoto" value="@Html.Raw(vCrewRejectedForAdminSearch.RequiredPhoto.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(vCrewRejectedForAdminSearch.RequiredPhoto.PlaceHolder))" data-format-pattern="@(vCrewRejectedForAdminSearch.RequiredPhoto.FormatPattern)"@Html.Raw(vCrewRejectedForAdminSearch.RequiredPhoto.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(vCrewRejectedForAdminSearch.RequiredPhoto.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* vCrewRejectedForAdminSearch.RequiredPhoto.Visible (end) *@
@if (vCrewRejectedForAdminSearch.VisaPhoto.Visible) { // vCrewRejectedForAdminSearch.VisaPhoto.Visible (begin)
    <div id="r_VisaPhoto" class="row" @Html.Raw(vCrewRejectedForAdminSearch.VisaPhoto.RowAttributes)>
        <label for="x_VisaPhoto" class="@(vCrewRejectedForAdminSearch.LeftColumnClass)"><span id="elh_v_CrewRejectedForAdmin_VisaPhoto">@Html.Raw(vCrewRejectedForAdminSearch.VisaPhoto.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("LIKE"))
<input type="hidden" name="z_VisaPhoto" id="z_VisaPhoto" value="LIKE">
</span>
        </label>
        <div class="@(vCrewRejectedForAdminSearch.RightColumnClass)">
            <div @Html.Raw(vCrewRejectedForAdminSearch.VisaPhoto.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_v_CrewRejectedForAdmin_VisaPhoto" class="ew-search-field ew-search-field-single">
<input type="@(vCrewRejectedForAdminSearch.VisaPhoto.InputTextType)" name="x_VisaPhoto" id="x_VisaPhoto" data-table="v_CrewRejectedForAdmin" data-field="x_VisaPhoto" value="@Html.Raw(vCrewRejectedForAdminSearch.VisaPhoto.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(vCrewRejectedForAdminSearch.VisaPhoto.PlaceHolder))" data-format-pattern="@(vCrewRejectedForAdminSearch.VisaPhoto.FormatPattern)"@Html.Raw(vCrewRejectedForAdminSearch.VisaPhoto.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(vCrewRejectedForAdminSearch.VisaPhoto.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* vCrewRejectedForAdminSearch.VisaPhoto.Visible (end) *@
@if (vCrewRejectedForAdminSearch.CityOfBirth.Visible) { // vCrewRejectedForAdminSearch.CityOfBirth.Visible (begin)
    <div id="r_CityOfBirth" class="row" @Html.Raw(vCrewRejectedForAdminSearch.CityOfBirth.RowAttributes)>
        <label for="x_CityOfBirth" class="@(vCrewRejectedForAdminSearch.LeftColumnClass)"><span id="elh_v_CrewRejectedForAdmin_CityOfBirth">@Html.Raw(vCrewRejectedForAdminSearch.CityOfBirth.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("LIKE"))
<input type="hidden" name="z_CityOfBirth" id="z_CityOfBirth" value="LIKE">
</span>
        </label>
        <div class="@(vCrewRejectedForAdminSearch.RightColumnClass)">
            <div @Html.Raw(vCrewRejectedForAdminSearch.CityOfBirth.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_v_CrewRejectedForAdmin_CityOfBirth" class="ew-search-field ew-search-field-single">
<input type="@(vCrewRejectedForAdminSearch.CityOfBirth.InputTextType)" name="x_CityOfBirth" id="x_CityOfBirth" data-table="v_CrewRejectedForAdmin" data-field="x_CityOfBirth" value="@Html.Raw(vCrewRejectedForAdminSearch.CityOfBirth.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(vCrewRejectedForAdminSearch.CityOfBirth.PlaceHolder))" data-format-pattern="@(vCrewRejectedForAdminSearch.CityOfBirth.FormatPattern)"@Html.Raw(vCrewRejectedForAdminSearch.CityOfBirth.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(vCrewRejectedForAdminSearch.CityOfBirth.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* vCrewRejectedForAdminSearch.CityOfBirth.Visible (end) *@
@if (vCrewRejectedForAdminSearch.DateOfBirth.Visible) { // vCrewRejectedForAdminSearch.DateOfBirth.Visible (begin)
    <div id="r_DateOfBirth" class="row" @Html.Raw(vCrewRejectedForAdminSearch.DateOfBirth.RowAttributes)>
        <label for="x_DateOfBirth" class="@(vCrewRejectedForAdminSearch.LeftColumnClass)"><span id="elh_v_CrewRejectedForAdmin_DateOfBirth">@Html.Raw(vCrewRejectedForAdminSearch.DateOfBirth.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("="))
<input type="hidden" name="z_DateOfBirth" id="z_DateOfBirth" value="=">
</span>
        </label>
        <div class="@(vCrewRejectedForAdminSearch.RightColumnClass)">
            <div @Html.Raw(vCrewRejectedForAdminSearch.DateOfBirth.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_v_CrewRejectedForAdmin_DateOfBirth" class="ew-search-field ew-search-field-single">
<input type="@(vCrewRejectedForAdminSearch.DateOfBirth.InputTextType)" name="x_DateOfBirth" id="x_DateOfBirth" data-table="v_CrewRejectedForAdmin" data-field="x_DateOfBirth" value="@Html.Raw(vCrewRejectedForAdminSearch.DateOfBirth.EditValue)" placeholder="@Html.Raw(HtmlEncode(vCrewRejectedForAdminSearch.DateOfBirth.PlaceHolder))" data-format-pattern="@(vCrewRejectedForAdminSearch.DateOfBirth.FormatPattern)"@Html.Raw(vCrewRejectedForAdminSearch.DateOfBirth.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(vCrewRejectedForAdminSearch.DateOfBirth.GetErrorMessage(false))</div>
@if (!vCrewRejectedForAdminSearch.DateOfBirth.ReadOnly && !vCrewRejectedForAdminSearch.DateOfBirth.Disabled && !vCrewRejectedForAdminSearch.DateOfBirth.EditAttrs.Is("readonly") && !vCrewRejectedForAdminSearch.DateOfBirth.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fv_CrewRejectedForAdminsearch", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fv_CrewRejectedForAdminsearch", "x_DateOfBirth", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
                </div>
            </div>
        </div>
    </div>
} @* vCrewRejectedForAdminSearch.DateOfBirth.Visible (end) *@
@if (vCrewRejectedForAdminSearch.Gender.Visible) { // vCrewRejectedForAdminSearch.Gender.Visible (begin)
    <div id="r_Gender" class="row" @Html.Raw(vCrewRejectedForAdminSearch.Gender.RowAttributes)>
        <label for="x_Gender" class="@(vCrewRejectedForAdminSearch.LeftColumnClass)"><span id="elh_v_CrewRejectedForAdmin_Gender">@Html.Raw(vCrewRejectedForAdminSearch.Gender.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("LIKE"))
<input type="hidden" name="z_Gender" id="z_Gender" value="LIKE">
</span>
        </label>
        <div class="@(vCrewRejectedForAdminSearch.RightColumnClass)">
            <div @Html.Raw(vCrewRejectedForAdminSearch.Gender.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_v_CrewRejectedForAdmin_Gender" class="ew-search-field ew-search-field-single">
<input type="@(vCrewRejectedForAdminSearch.Gender.InputTextType)" name="x_Gender" id="x_Gender" data-table="v_CrewRejectedForAdmin" data-field="x_Gender" value="@Html.Raw(vCrewRejectedForAdminSearch.Gender.EditValue)" size="30" maxlength="1" placeholder="@Html.Raw(HtmlEncode(vCrewRejectedForAdminSearch.Gender.PlaceHolder))" data-format-pattern="@(vCrewRejectedForAdminSearch.Gender.FormatPattern)"@Html.Raw(vCrewRejectedForAdminSearch.Gender.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(vCrewRejectedForAdminSearch.Gender.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* vCrewRejectedForAdminSearch.Gender.Visible (end) *@
@if (vCrewRejectedForAdminSearch.RankAppliedFor_RankID.Visible) { // vCrewRejectedForAdminSearch.RankAppliedFor_RankID.Visible (begin)
    <div id="r_RankAppliedFor_RankID" class="row" @Html.Raw(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.RowAttributes)>
        <label class="@(vCrewRejectedForAdminSearch.LeftColumnClass)"><span id="elh_v_CrewRejectedForAdmin_RankAppliedFor_RankID">@Html.Raw(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("="))
<input type="hidden" name="z_RankAppliedFor_RankID" id="z_RankAppliedFor_RankID" value="=">
</span>
        </label>
        <div class="@(vCrewRejectedForAdminSearch.RightColumnClass)">
            <div @Html.Raw(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_v_CrewRejectedForAdmin_RankAppliedFor_RankID" class="ew-search-field ew-search-field-single">
<span>@{
    if (IsRTL) {
        vCrewRejectedForAdminSearch.RankAppliedFor_RankID.EditAttrs["dir"] = "rtl";
    }
}</span>
<span id="as_x_RankAppliedFor_RankID" class="ew-auto-suggest">
    <input type="text" class="form-control" name="sv_x_RankAppliedFor_RankID" id="sv_x_RankAppliedFor_RankID" value="@(RemoveHtml(ConvertToString(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.EditValue)))" autocomplete="off" size="30" placeholder="@Html.Raw(HtmlEncode(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.PlaceHolder))" data-placeholder="@Html.Raw(HtmlEncode(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.PlaceHolder))" data-format-pattern="@(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.FormatPattern)" @Html.Raw(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.EditAttributes)>
</span>
<selection-list hidden class="form-control" data-table="v_CrewRejectedForAdmin" data-field="x_RankAppliedFor_RankID" data-input="sv_x_RankAppliedFor_RankID" data-value-separator="@(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.DisplayValueSeparatorAttribute)" name="x_RankAppliedFor_RankID" id="x_RankAppliedFor_RankID" value="@(HtmlEncode(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.AdvancedSearch.SearchValue))"></selection-list>
<div class="invalid-feedback">@Html.Raw(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.GetErrorMessage(false))</div>
<script>
loadjs.ready(["fv_CrewRejectedForAdminsearch"], function() {
    fv_CrewRejectedForAdminsearch.createAutoSuggest(Object.assign({"id":"x_RankAppliedFor_RankID","forceSelect":false}, { lookupAllDisplayFields: @(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.Lookup.LookupAllDisplayFields ? "true" : "false") }, ew.vars.tables.v_CrewRejectedForAdmin.fields.RankAppliedFor_RankID.autoSuggestOptions));
});
</script>
@Html.Raw(vCrewRejectedForAdminSearch.RankAppliedFor_RankID.Lookup.GetParamTag(vCrewRejectedForAdminSearch, "p_x_RankAppliedFor_RankID"))
</span>
                </div>
            </div>
        </div>
    </div>
} @* vCrewRejectedForAdminSearch.RankAppliedFor_RankID.Visible (end) *@
@if (vCrewRejectedForAdminSearch.WillAcceptLowRank.Visible) { // vCrewRejectedForAdminSearch.WillAcceptLowRank.Visible (begin)
    <div id="r_WillAcceptLowRank" class="row" @Html.Raw(vCrewRejectedForAdminSearch.WillAcceptLowRank.RowAttributes)>
        <label class="@(vCrewRejectedForAdminSearch.LeftColumnClass)"><span id="elh_v_CrewRejectedForAdmin_WillAcceptLowRank">@Html.Raw(vCrewRejectedForAdminSearch.WillAcceptLowRank.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("="))
<input type="hidden" name="z_WillAcceptLowRank" id="z_WillAcceptLowRank" value="=">
</span>
        </label>
        <div class="@(vCrewRejectedForAdminSearch.RightColumnClass)">
            <div @Html.Raw(vCrewRejectedForAdminSearch.WillAcceptLowRank.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_v_CrewRejectedForAdmin_WillAcceptLowRank" class="ew-search-field ew-search-field-single">
<div class="form-check d-inline-block">
    <input type="checkbox" class="form-check-input@(vCrewRejectedForAdminSearch.WillAcceptLowRank.IsInvalidClass)" data-table="v_CrewRejectedForAdmin" data-field="x_WillAcceptLowRank" data-boolean name="x_WillAcceptLowRank" id="x_WillAcceptLowRank" value="1" checked="@ConvertToBool(vCrewRejectedForAdminSearch.WillAcceptLowRank.AdvancedSearch.SearchValue)" @Html.Raw(vCrewRejectedForAdminSearch.WillAcceptLowRank.EditAttributes)>
    <div class="invalid-feedback">@Html.Raw(vCrewRejectedForAdminSearch.WillAcceptLowRank.GetErrorMessage(false))</div>
</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* vCrewRejectedForAdminSearch.WillAcceptLowRank.Visible (end) *@
@if (vCrewRejectedForAdminSearch.AvailableFrom.Visible) { // vCrewRejectedForAdminSearch.AvailableFrom.Visible (begin)
    <div id="r_AvailableFrom" class="row" @Html.Raw(vCrewRejectedForAdminSearch.AvailableFrom.RowAttributes)>
        <label for="x_AvailableFrom" class="@(vCrewRejectedForAdminSearch.LeftColumnClass)"><span id="elh_v_CrewRejectedForAdmin_AvailableFrom">@Html.Raw(vCrewRejectedForAdminSearch.AvailableFrom.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("="))
<input type="hidden" name="z_AvailableFrom" id="z_AvailableFrom" value="=">
</span>
        </label>
        <div class="@(vCrewRejectedForAdminSearch.RightColumnClass)">
            <div @Html.Raw(vCrewRejectedForAdminSearch.AvailableFrom.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_v_CrewRejectedForAdmin_AvailableFrom" class="ew-search-field ew-search-field-single">
<input type="@(vCrewRejectedForAdminSearch.AvailableFrom.InputTextType)" name="x_AvailableFrom" id="x_AvailableFrom" data-table="v_CrewRejectedForAdmin" data-field="x_AvailableFrom" value="@Html.Raw(vCrewRejectedForAdminSearch.AvailableFrom.EditValue)" placeholder="@Html.Raw(HtmlEncode(vCrewRejectedForAdminSearch.AvailableFrom.PlaceHolder))" data-format-pattern="@(vCrewRejectedForAdminSearch.AvailableFrom.FormatPattern)"@Html.Raw(vCrewRejectedForAdminSearch.AvailableFrom.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(vCrewRejectedForAdminSearch.AvailableFrom.GetErrorMessage(false))</div>
@if (!vCrewRejectedForAdminSearch.AvailableFrom.ReadOnly && !vCrewRejectedForAdminSearch.AvailableFrom.Disabled && !vCrewRejectedForAdminSearch.AvailableFrom.EditAttrs.Is("readonly") && !vCrewRejectedForAdminSearch.AvailableFrom.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fv_CrewRejectedForAdminsearch", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fv_CrewRejectedForAdminsearch", "x_AvailableFrom", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
                </div>
            </div>
        </div>
    </div>
} @* vCrewRejectedForAdminSearch.AvailableFrom.Visible (end) *@
@if (vCrewRejectedForAdminSearch.AvailableUntil.Visible) { // vCrewRejectedForAdminSearch.AvailableUntil.Visible (begin)
    <div id="r_AvailableUntil" class="row" @Html.Raw(vCrewRejectedForAdminSearch.AvailableUntil.RowAttributes)>
        <label for="x_AvailableUntil" class="@(vCrewRejectedForAdminSearch.LeftColumnClass)"><span id="elh_v_CrewRejectedForAdmin_AvailableUntil">@Html.Raw(vCrewRejectedForAdminSearch.AvailableUntil.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("="))
<input type="hidden" name="z_AvailableUntil" id="z_AvailableUntil" value="=">
</span>
        </label>
        <div class="@(vCrewRejectedForAdminSearch.RightColumnClass)">
            <div @Html.Raw(vCrewRejectedForAdminSearch.AvailableUntil.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_v_CrewRejectedForAdmin_AvailableUntil" class="ew-search-field ew-search-field-single">
<input type="@(vCrewRejectedForAdminSearch.AvailableUntil.InputTextType)" name="x_AvailableUntil" id="x_AvailableUntil" data-table="v_CrewRejectedForAdmin" data-field="x_AvailableUntil" value="@Html.Raw(vCrewRejectedForAdminSearch.AvailableUntil.EditValue)" placeholder="@Html.Raw(HtmlEncode(vCrewRejectedForAdminSearch.AvailableUntil.PlaceHolder))" data-format-pattern="@(vCrewRejectedForAdminSearch.AvailableUntil.FormatPattern)"@Html.Raw(vCrewRejectedForAdminSearch.AvailableUntil.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(vCrewRejectedForAdminSearch.AvailableUntil.GetErrorMessage(false))</div>
@if (!vCrewRejectedForAdminSearch.AvailableUntil.ReadOnly && !vCrewRejectedForAdminSearch.AvailableUntil.Disabled && !vCrewRejectedForAdminSearch.AvailableUntil.EditAttrs.Is("readonly") && !vCrewRejectedForAdminSearch.AvailableUntil.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fv_CrewRejectedForAdminsearch", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fv_CrewRejectedForAdminsearch", "x_AvailableUntil", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
                </div>
            </div>
        </div>
    </div>
} @* vCrewRejectedForAdminSearch.AvailableUntil.Visible (end) *@
</div><!-- /page* -->
@Html.Raw(vCrewRejectedForAdminSearch.IsModal ? Html.Raw("<template class=\"ew-modal-buttons\">") : Html.Raw("<div class=\"row ew-buttons\">"))<!-- buttons .row -->
    <div class="@(vCrewRejectedForAdminSearch.OffsetColumnClass)"><!-- buttons offset -->
        <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fv_CrewRejectedForAdminsearch">@Html.Raw(Language.Phrase("Search"))</button>
@if (vCrewRejectedForAdminSearch.IsModal) {
        <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fv_CrewRejectedForAdminsearch">@Html.Raw(Language.Phrase("Cancel"))</button>
} else {
        <button class="btn btn-default ew-btn" name="btn-reset" id="btn-reset" type="button" form="fv_CrewRejectedForAdminsearch" data-ew-action="reload">@Html.Raw(Language.Phrase("Reset"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(vCrewRejectedForAdminSearch.IsModal ? Html.Raw("</template>") : Html.Raw("</div>"))<!-- /buttons .row -->
</form>
@vCrewRejectedForAdminSearch.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("v_CrewRejectedForAdmin");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
