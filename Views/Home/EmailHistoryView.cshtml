@{
    // View
    View = this;

    // Check action result
    if (emailHistoryView.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!emailHistoryView.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
@if (!emailHistoryView.IsExport()) {
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
}
@if (!emailHistoryView.IsExport()) {
<div class="btn-toolbar ew-toolbar">
    @emailHistoryView.ExportOptions.RenderBody()
    @emailHistoryView.OtherOptions.RenderBody()
</div>
}
@emailHistoryView.ShowPageHeader()
@emailHistoryView.ShowMessages()
<main class="view">
<form name="fEmailHistoryview" id="fEmailHistoryview" class="ew-form ew-view-form overlay-wrapper" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (!emailHistoryView.IsExport()) {
<script>
var currentTable = @Html.Raw(ConvertToJson(emailHistoryView.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { EmailHistory: currentTable } });
var currentPageID = ew.PAGE_ID = "view";
var currentForm;
var fEmailHistoryview;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fEmailHistoryview")
        .setPageId("view")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
}
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="modal" value="@ConvertToInt(emailHistoryView.IsModal)">
<table class="@(emailHistoryView.TableClass)">
@if (emailHistoryView.CrewSeafarerIDWithName.Visible) { // emailHistoryView.CrewSeafarerIDWithName.Visible (begin)
    <tr id="r_CrewSeafarerIDWithName" @Html.Raw(emailHistoryView.CrewSeafarerIDWithName.RowAttributes)>
        <td class="@(emailHistoryView.TableLeftColumnClass)"><span id="elh_EmailHistory_CrewSeafarerIDWithName">@Html.Raw(emailHistoryView.CrewSeafarerIDWithName.Caption)</span></td>
        <td data-name="CrewSeafarerIDWithName" @Html.Raw(emailHistoryView.CrewSeafarerIDWithName.CellAttributes)>
<span id="el_EmailHistory_CrewSeafarerIDWithName">
<span @Html.Raw(emailHistoryView.CrewSeafarerIDWithName.ViewAttributes)>
@Html.Raw(emailHistoryView.CrewSeafarerIDWithName.GetViewValue())</span>
</span></td>
    </tr>
} @* emailHistoryView.CrewSeafarerIDWithName.Visible (end) *@
@if (emailHistoryView.To.Visible) { // emailHistoryView.To.Visible (begin)
    <tr id="r_To" @Html.Raw(emailHistoryView.To.RowAttributes)>
        <td class="@(emailHistoryView.TableLeftColumnClass)"><span id="elh_EmailHistory_To">@Html.Raw(emailHistoryView.To.Caption)</span></td>
        <td data-name="To" @Html.Raw(emailHistoryView.To.CellAttributes)>
<span id="el_EmailHistory_To">
<span @Html.Raw(emailHistoryView.To.ViewAttributes)>
@Html.Raw(emailHistoryView.To.GetViewValue())</span>
</span></td>
    </tr>
} @* emailHistoryView.To.Visible (end) *@
@if (emailHistoryView.Subject.Visible) { // emailHistoryView.Subject.Visible (begin)
    <tr id="r_Subject" @Html.Raw(emailHistoryView.Subject.RowAttributes)>
        <td class="@(emailHistoryView.TableLeftColumnClass)"><span id="elh_EmailHistory_Subject">@Html.Raw(emailHistoryView.Subject.Caption)</span></td>
        <td data-name="Subject" @Html.Raw(emailHistoryView.Subject.CellAttributes)>
<span id="el_EmailHistory_Subject">
<span @Html.Raw(emailHistoryView.Subject.ViewAttributes)>
@Html.Raw(emailHistoryView.Subject.GetViewValue())</span>
</span></td>
    </tr>
} @* emailHistoryView.Subject.Visible (end) *@
@if (emailHistoryView._Message.Visible) { // emailHistoryView._Message.Visible (begin)
    <tr id="r__Message" @Html.Raw(emailHistoryView._Message.RowAttributes)>
        <td class="@(emailHistoryView.TableLeftColumnClass)"><span id="elh_EmailHistory__Message">@Html.Raw(emailHistoryView._Message.Caption)</span></td>
        <td data-name="_Message" @Html.Raw(emailHistoryView._Message.CellAttributes)>
<span id="el_EmailHistory__Message">
<span @Html.Raw(emailHistoryView._Message.ViewAttributes)>
@Html.Raw(emailHistoryView._Message.GetViewValue())</span>
</span></td>
    </tr>
} @* emailHistoryView._Message.Visible (end) *@
@if (emailHistoryView.IsSent.Visible) { // emailHistoryView.IsSent.Visible (begin)
    <tr id="r_IsSent" @Html.Raw(emailHistoryView.IsSent.RowAttributes)>
        <td class="@(emailHistoryView.TableLeftColumnClass)"><span id="elh_EmailHistory_IsSent">@Html.Raw(emailHistoryView.IsSent.Caption)</span></td>
        <td data-name="IsSent" @Html.Raw(emailHistoryView.IsSent.CellAttributes)>
<span id="el_EmailHistory_IsSent">
<span @Html.Raw(emailHistoryView.IsSent.ViewAttributes)>
<div class="form-check d-inline-block">
    <input type="checkbox" id="x_IsSent_@(emailHistoryView.RowCount)" class="form-check-input" value="@(emailHistoryView.IsSent.GetViewValue())" disabled checked="@(ConvertToBool(emailHistoryView.IsSent.CurrentValue))">
    <label class="form-check-label" for="x_IsSent_@(emailHistoryView.RowCount)"></label>
</div></span>
</span></td>
    </tr>
} @* emailHistoryView.IsSent.Visible (end) *@
@if (emailHistoryView.SentDateTime.Visible) { // emailHistoryView.SentDateTime.Visible (begin)
    <tr id="r_SentDateTime" @Html.Raw(emailHistoryView.SentDateTime.RowAttributes)>
        <td class="@(emailHistoryView.TableLeftColumnClass)"><span id="elh_EmailHistory_SentDateTime">@Html.Raw(emailHistoryView.SentDateTime.Caption)</span></td>
        <td data-name="SentDateTime" @Html.Raw(emailHistoryView.SentDateTime.CellAttributes)>
<span id="el_EmailHistory_SentDateTime">
<span @Html.Raw(emailHistoryView.SentDateTime.ViewAttributes)>
@Html.Raw(emailHistoryView.SentDateTime.GetViewValue())</span>
</span></td>
    </tr>
} @* emailHistoryView.SentDateTime.Visible (end) *@
</table>
@{ emailHistoryView.CloseRecordset(); }
</form>
</main>
@emailHistoryView.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
@if (!emailHistoryView.IsExport()) {
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
}
