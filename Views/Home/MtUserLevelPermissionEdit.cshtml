@{
    // View
    View = this;

    // Check action result
    if (mtUserLevelPermissionEdit.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!mtUserLevelPermissionEdit.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@mtUserLevelPermissionEdit.ShowPageHeader()
@mtUserLevelPermissionEdit.ShowMessages()
<main class="edit">
<form name="fMTUserLevelPermissionedit" id="fMTUserLevelPermissionedit" class="@(mtUserLevelPermissionEdit.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
<script>
var currentTable = @Html.Raw(ConvertToJson(mtUserLevelPermissionEdit.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { MTUserLevelPermission: currentTable } });
var currentPageID = ew.PAGE_ID = "edit";
var currentForm;
var fMTUserLevelPermissionedit;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fMTUserLevelPermissionedit")
        .setPageId("edit")

        // Add fields
        .setFields([

            ["UserLevelID", [fields.UserLevelID.visible && fields.UserLevelID.required ? ew.Validators.required(fields.UserLevelID.caption) : null, ew.Validators.integer], fields.UserLevelID.isInvalid],
            ["_TableName", [fields._TableName.visible && fields._TableName.required ? ew.Validators.required(fields._TableName.caption) : null], fields._TableName.isInvalid],
            ["Permission", [fields.Permission.visible && fields.Permission.required ? ew.Validators.required(fields.Permission.caption) : null, ew.Validators.integer], fields.Permission.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "UserLevelID": @Html.Raw(mtUserLevelPermissionEdit.UserLevelID.ToClientList(mtUserLevelPermissionEdit)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="update">
<input type="hidden" name="modal" value="@ConvertToInt(mtUserLevelPermissionEdit.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(mtUserLevelPermissionEdit.OldKeyName)" value="@Html.Raw(mtUserLevelPermissionEdit.OldKey)">
<div class="ew-edit-div"><!-- page* -->
@if (mtUserLevelPermissionEdit.UserLevelID.Visible) { // mtUserLevelPermissionEdit.UserLevelID.Visible (begin)
    <div id="r_UserLevelID" @Html.Raw(mtUserLevelPermissionEdit.UserLevelID.RowAttributes)>
        <label id="elh_MTUserLevelPermission_UserLevelID" class="@(mtUserLevelPermissionEdit.LeftColumnClass)">@Html.Raw(mtUserLevelPermissionEdit.UserLevelID.Caption)@Html.Raw(mtUserLevelPermissionEdit.UserLevelID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserLevelPermissionEdit.RightColumnClass)"><div @Html.Raw(mtUserLevelPermissionEdit.UserLevelID.CellAttributes)>
<span id="el_MTUserLevelPermission_UserLevelID">
<span>@{
    if (IsRTL) {
        mtUserLevelPermissionEdit.UserLevelID.EditAttrs["dir"] = "rtl";
    }
}</span>
<span id="as_x_UserLevelID" class="ew-auto-suggest">
    <input type="text" class="form-control" name="sv_x_UserLevelID" id="sv_x_UserLevelID" value="@(RemoveHtml(ConvertToString(mtUserLevelPermissionEdit.UserLevelID.EditValue)))" autocomplete="off" size="30" placeholder="@Html.Raw(HtmlEncode(mtUserLevelPermissionEdit.UserLevelID.PlaceHolder))" data-placeholder="@Html.Raw(HtmlEncode(mtUserLevelPermissionEdit.UserLevelID.PlaceHolder))" data-format-pattern="@(mtUserLevelPermissionEdit.UserLevelID.FormatPattern)" @Html.Raw(mtUserLevelPermissionEdit.UserLevelID.EditAttributes) aria-describedby="x_UserLevelID_help">
</span>
<selection-list hidden class="form-control" data-table="MTUserLevelPermission" data-field="x_UserLevelID" data-input="sv_x_UserLevelID" data-value-separator="@(mtUserLevelPermissionEdit.UserLevelID.DisplayValueSeparatorAttribute)" name="x_UserLevelID" id="x_UserLevelID" value="@(HtmlEncode(mtUserLevelPermissionEdit.UserLevelID.CurrentValue))"></selection-list>
@Html.Raw(mtUserLevelPermissionEdit.UserLevelID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserLevelPermissionEdit.UserLevelID.GetErrorMessage())</div>
<script>
loadjs.ready(["fMTUserLevelPermissionedit"], function() {
    fMTUserLevelPermissionedit.createAutoSuggest(Object.assign({"id":"x_UserLevelID","forceSelect":false}, { lookupAllDisplayFields: @(mtUserLevelPermissionEdit.UserLevelID.Lookup.LookupAllDisplayFields ? "true" : "false") }, ew.vars.tables.MTUserLevelPermission.fields.UserLevelID.autoSuggestOptions));
});
</script>
@Html.Raw(mtUserLevelPermissionEdit.UserLevelID.Lookup.GetParamTag(mtUserLevelPermissionEdit, "p_x_UserLevelID"))
<input type="hidden" data-table="MTUserLevelPermission" data-field="x_UserLevelID" data-hidden="1" data-old name="o_UserLevelID" id="o_UserLevelID" value="@Html.Raw(HtmlEncode(mtUserLevelPermissionEdit.UserLevelID.OldValue ?? mtUserLevelPermissionEdit.UserLevelID.CurrentValue))">
</span>
</div></div>
    </div>
} @* mtUserLevelPermissionEdit.UserLevelID.Visible (end) *@
@if (mtUserLevelPermissionEdit._TableName.Visible) { // mtUserLevelPermissionEdit._TableName.Visible (begin)
    <div id="r__TableName" @Html.Raw(mtUserLevelPermissionEdit._TableName.RowAttributes)>
        <label id="elh_MTUserLevelPermission__TableName" for="x__TableName" class="@(mtUserLevelPermissionEdit.LeftColumnClass)">@Html.Raw(mtUserLevelPermissionEdit._TableName.Caption)@Html.Raw(mtUserLevelPermissionEdit._TableName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserLevelPermissionEdit.RightColumnClass)"><div @Html.Raw(mtUserLevelPermissionEdit._TableName.CellAttributes)>
<span id="el_MTUserLevelPermission__TableName">
<input type="@(mtUserLevelPermissionEdit._TableName.InputTextType)" name="x__TableName" id="x__TableName" data-table="MTUserLevelPermission" data-field="x__TableName" value="@Html.Raw(mtUserLevelPermissionEdit._TableName.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(mtUserLevelPermissionEdit._TableName.PlaceHolder))" data-format-pattern="@(mtUserLevelPermissionEdit._TableName.FormatPattern)"@Html.Raw(mtUserLevelPermissionEdit._TableName.EditAttributes) aria-describedby="x__TableName_help">
@Html.Raw(mtUserLevelPermissionEdit._TableName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserLevelPermissionEdit._TableName.GetErrorMessage())</div>
<input type="hidden" data-table="MTUserLevelPermission" data-field="x__TableName" data-hidden="1" data-old name="o__TableName" id="o__TableName" value="@Html.Raw(HtmlEncode(mtUserLevelPermissionEdit._TableName.OldValue ?? mtUserLevelPermissionEdit._TableName.CurrentValue))">
</span>
</div></div>
    </div>
} @* mtUserLevelPermissionEdit._TableName.Visible (end) *@
@if (mtUserLevelPermissionEdit.Permission.Visible) { // mtUserLevelPermissionEdit.Permission.Visible (begin)
    <div id="r_Permission" @Html.Raw(mtUserLevelPermissionEdit.Permission.RowAttributes)>
        <label id="elh_MTUserLevelPermission_Permission" for="x_Permission" class="@(mtUserLevelPermissionEdit.LeftColumnClass)">@Html.Raw(mtUserLevelPermissionEdit.Permission.Caption)@Html.Raw(mtUserLevelPermissionEdit.Permission.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserLevelPermissionEdit.RightColumnClass)"><div @Html.Raw(mtUserLevelPermissionEdit.Permission.CellAttributes)>
<span id="el_MTUserLevelPermission_Permission">
<input type="@(mtUserLevelPermissionEdit.Permission.InputTextType)" name="x_Permission" id="x_Permission" data-table="MTUserLevelPermission" data-field="x_Permission" value="@Html.Raw(mtUserLevelPermissionEdit.Permission.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(mtUserLevelPermissionEdit.Permission.PlaceHolder))" data-format-pattern="@(mtUserLevelPermissionEdit.Permission.FormatPattern)"@Html.Raw(mtUserLevelPermissionEdit.Permission.EditAttributes) aria-describedby="x_Permission_help">
@Html.Raw(mtUserLevelPermissionEdit.Permission.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserLevelPermissionEdit.Permission.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserLevelPermissionEdit.Permission.Visible (end) *@
</div><!-- /page* -->
@{ mtUserLevelPermissionEdit.CloseRecordset(); }
@Html.Raw(mtUserLevelPermissionEdit.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(mtUserLevelPermissionEdit.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fMTUserLevelPermissionedit">@Html.Raw(Language.Phrase("SaveBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fMTUserLevelPermissionedit" data-href="@AppPath(mtUserLevelPermissionEdit.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(mtUserLevelPermissionEdit.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
</main>
@mtUserLevelPermissionEdit.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("MTUserLevelPermission");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
