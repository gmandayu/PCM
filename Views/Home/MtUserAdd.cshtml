@{
    // View
    View = this;

    // Check action result
    if (mtUserAdd.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!mtUserAdd.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(mtUserAdd.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { MTUser: currentTable } });
var currentPageID = ew.PAGE_ID = "add";
var currentForm;
var fMTUseradd;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fMTUseradd")
        .setPageId("add")

        // Add fields
        .setFields([

            ["_Email", [fields._Email.visible && fields._Email.required ? ew.Validators.required(fields._Email.caption) : null, ew.Validators.email], fields._Email.isInvalid],
            ["Password", [fields.Password.visible && fields.Password.required ? ew.Validators.required(fields.Password.caption) : null], fields.Password.isInvalid],
            ["FullName", [fields.FullName.visible && fields.FullName.required ? ew.Validators.required(fields.FullName.caption) : null], fields.FullName.isInvalid],
            ["MTUserLevelID", [fields.MTUserLevelID.visible && fields.MTUserLevelID.required ? ew.Validators.required(fields.MTUserLevelID.caption) : null], fields.MTUserLevelID.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "MTUserLevelID": @Html.Raw(mtUserAdd.MTUserLevelID.ToClientList(mtUserAdd)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@mtUserAdd.ShowPageHeader()
@mtUserAdd.ShowMessages()
<form name="fMTUseradd" id="fMTUseradd" class="@(mtUserAdd.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="insert">
<input type="hidden" name="modal" value="@ConvertToInt(mtUserAdd.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(mtUserAdd.OldKeyName)" value="@Html.Raw(mtUserAdd.OldKey)">
<div class="ew-add-div"><!-- page* -->
@if (mtUserAdd._Email.Visible) { // mtUserAdd._Email.Visible (begin)
    <div id="r__Email" @Html.Raw(mtUserAdd._Email.RowAttributes)>
        <label id="elh_MTUser__Email" for="x__Email" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd._Email.Caption)@Html.Raw(mtUserAdd._Email.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd._Email.CellAttributes)>
<span id="el_MTUser__Email">
<input type="@(mtUserAdd._Email.InputTextType)" name="x__Email" id="x__Email" data-table="MTUser" data-field="x__Email" value="@Html.Raw(mtUserAdd._Email.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(mtUserAdd._Email.PlaceHolder))" data-format-pattern="@(mtUserAdd._Email.FormatPattern)"@Html.Raw(mtUserAdd._Email.EditAttributes) aria-describedby="x__Email_help">
@Html.Raw(mtUserAdd._Email.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserAdd._Email.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserAdd._Email.Visible (end) *@
@if (mtUserAdd.Password.Visible) { // mtUserAdd.Password.Visible (begin)
    <div id="r_Password" @Html.Raw(mtUserAdd.Password.RowAttributes)>
        <label id="elh_MTUser_Password" for="x_Password" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd.Password.Caption)@Html.Raw(mtUserAdd.Password.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd.Password.CellAttributes)>
<span id="el_MTUser_Password">
<div class="input-group">
    <input type="password" name="x_Password" id="x_Password" autocomplete="new-password" data-field="x_Password" size="30" maxlength="255" placeholder="@(HtmlEncode(mtUserAdd.Password.PlaceHolder))"@Html.Raw(mtUserAdd.Password.EditAttributes) aria-describedby="x_Password_help">
    <button type="button" class="btn btn-default ew-toggle-password rounded-end" data-ew-action="password"><i class="fa-solid fa-eye"></i></button>
</div>
@Html.Raw(mtUserAdd.Password.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserAdd.Password.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserAdd.Password.Visible (end) *@
@if (mtUserAdd.FullName.Visible) { // mtUserAdd.FullName.Visible (begin)
    <div id="r_FullName" @Html.Raw(mtUserAdd.FullName.RowAttributes)>
        <label id="elh_MTUser_FullName" for="x_FullName" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd.FullName.Caption)@Html.Raw(mtUserAdd.FullName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd.FullName.CellAttributes)>
<span id="el_MTUser_FullName">
<input type="@(mtUserAdd.FullName.InputTextType)" name="x_FullName" id="x_FullName" data-table="MTUser" data-field="x_FullName" value="@Html.Raw(mtUserAdd.FullName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(mtUserAdd.FullName.PlaceHolder))" data-format-pattern="@(mtUserAdd.FullName.FormatPattern)"@Html.Raw(mtUserAdd.FullName.EditAttributes) aria-describedby="x_FullName_help">
@Html.Raw(mtUserAdd.FullName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserAdd.FullName.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserAdd.FullName.Visible (end) *@
@if (mtUserAdd.MTUserLevelID.Visible) { // mtUserAdd.MTUserLevelID.Visible (begin)
    <div id="r_MTUserLevelID" @Html.Raw(mtUserAdd.MTUserLevelID.RowAttributes)>
        <label id="elh_MTUser_MTUserLevelID" for="x_MTUserLevelID" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd.MTUserLevelID.Caption)@Html.Raw(mtUserAdd.MTUserLevelID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd.MTUserLevelID.CellAttributes)>
@if (!Security.IsAdmin && Security.IsLoggedIn) { // Non system admin
<span id="el_MTUser_MTUserLevelID">
<span class="form-control-plaintext">@Html.Raw(mtUserAdd.MTUserLevelID.DisplayValue(mtUserAdd.MTUserLevelID.EditValue))</span>
</span>
} else {
<span id="el_MTUser_MTUserLevelID">
    <select
        id="x_MTUserLevelID"
        name="x_MTUserLevelID"
        class="form-select ew-select@(mtUserAdd.MTUserLevelID.IsInvalidClass)"
        data-select2-id="fMTUseradd_x_MTUserLevelID"
        data-table="MTUser"
        data-field="x_MTUserLevelID"
        data-value-separator="@(mtUserAdd.MTUserLevelID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(mtUserAdd.MTUserLevelID.PlaceHolder))"
        @Html.Raw(mtUserAdd.MTUserLevelID.EditAttributes)>
        @(mtUserAdd.MTUserLevelID.SelectOptionListHtml("x_MTUserLevelID"))
    </select>
    @Html.Raw(mtUserAdd.MTUserLevelID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(mtUserAdd.MTUserLevelID.GetErrorMessage())</div>
@Html.Raw(mtUserAdd.MTUserLevelID.Lookup.GetParamTag(mtUserAdd, "p_x_MTUserLevelID"))
<script>
loadjs.ready("fMTUseradd", function() {
    var options = { name: "x_MTUserLevelID", selectId: "fMTUseradd_x_MTUserLevelID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fMTUseradd.lists.MTUserLevelID?.lookupOptions.length) {
        options.data = { id: "x_MTUserLevelID", form: "fMTUseradd" };
    } else {
        options.ajax = { id: "x_MTUserLevelID", form: "fMTUseradd", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.MTUser.fields.MTUserLevelID.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
}
</div></div>
    </div>
} @* mtUserAdd.MTUserLevelID.Visible (end) *@
</div><!-- /page* -->
@{ mtUserAdd.CloseRecordset(); }
@Html.Raw(mtUserAdd.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(mtUserAdd.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fMTUseradd">@Html.Raw(Language.Phrase("AddBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fMTUseradd" data-href="@AppPath(mtUserAdd.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(mtUserAdd.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
@mtUserAdd.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("MTUser");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
