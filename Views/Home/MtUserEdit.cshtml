@{
    // View
    View = this;

    // Check action result
    if (mtUserEdit.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!mtUserEdit.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@mtUserEdit.ShowPageHeader()
@mtUserEdit.ShowMessages()
<main class="edit">
<form name="fMTUseredit" id="fMTUseredit" class="@(mtUserEdit.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
<script>
var currentTable = @Html.Raw(ConvertToJson(mtUserEdit.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { MTUser: currentTable } });
var currentPageID = ew.PAGE_ID = "edit";
var currentForm;
var fMTUseredit;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fMTUseredit")
        .setPageId("edit")

        // Add fields
        .setFields([

            ["_Email", [fields._Email.visible && fields._Email.required ? ew.Validators.required(fields._Email.caption) : null, ew.Validators.email], fields._Email.isInvalid],
            ["FullName", [fields.FullName.visible && fields.FullName.required ? ew.Validators.required(fields.FullName.caption) : null], fields.FullName.isInvalid],
            ["MTUserLevelID", [fields.MTUserLevelID.visible && fields.MTUserLevelID.required ? ew.Validators.required(fields.MTUserLevelID.caption) : null], fields.MTUserLevelID.isInvalid],
            ["SeafarerID", [fields.SeafarerID.visible && fields.SeafarerID.required ? ew.Validators.required(fields.SeafarerID.caption) : null], fields.SeafarerID.isInvalid],
            ["CrewAgency", [fields.CrewAgency.visible && fields.CrewAgency.required ? ew.Validators.required(fields.CrewAgency.caption) : null], fields.CrewAgency.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "MTUserLevelID": @Html.Raw(mtUserEdit.MTUserLevelID.ToClientList(mtUserEdit)),
            "CrewAgency": @Html.Raw(mtUserEdit.CrewAgency.ToClientList(mtUserEdit)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="update">
<input type="hidden" name="modal" value="@ConvertToInt(mtUserEdit.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(mtUserEdit.OldKeyName)" value="@Html.Raw(mtUserEdit.OldKey)">
<div class="ew-edit-div"><!-- page* -->
@if (mtUserEdit._Email.Visible) { // mtUserEdit._Email.Visible (begin)
    <div id="r__Email" @Html.Raw(mtUserEdit._Email.RowAttributes)>
        <label id="elh_MTUser__Email" for="x__Email" class="@(mtUserEdit.LeftColumnClass)">@Html.Raw(mtUserEdit._Email.Caption)@Html.Raw(mtUserEdit._Email.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserEdit.RightColumnClass)"><div @Html.Raw(mtUserEdit._Email.CellAttributes)>
<span id="el_MTUser__Email">
<input type="@(mtUserEdit._Email.InputTextType)" name="x__Email" id="x__Email" data-table="MTUser" data-field="x__Email" value="@Html.Raw(mtUserEdit._Email.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(mtUserEdit._Email.PlaceHolder))" data-format-pattern="@(mtUserEdit._Email.FormatPattern)"@Html.Raw(mtUserEdit._Email.EditAttributes) aria-describedby="x__Email_help">
@Html.Raw(mtUserEdit._Email.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserEdit._Email.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserEdit._Email.Visible (end) *@
@if (mtUserEdit.FullName.Visible) { // mtUserEdit.FullName.Visible (begin)
    <div id="r_FullName" @Html.Raw(mtUserEdit.FullName.RowAttributes)>
        <label id="elh_MTUser_FullName" for="x_FullName" class="@(mtUserEdit.LeftColumnClass)">@Html.Raw(mtUserEdit.FullName.Caption)@Html.Raw(mtUserEdit.FullName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserEdit.RightColumnClass)"><div @Html.Raw(mtUserEdit.FullName.CellAttributes)>
<span id="el_MTUser_FullName">
<input type="@(mtUserEdit.FullName.InputTextType)" name="x_FullName" id="x_FullName" data-table="MTUser" data-field="x_FullName" value="@Html.Raw(mtUserEdit.FullName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(mtUserEdit.FullName.PlaceHolder))" data-format-pattern="@(mtUserEdit.FullName.FormatPattern)"@Html.Raw(mtUserEdit.FullName.EditAttributes) aria-describedby="x_FullName_help">
@Html.Raw(mtUserEdit.FullName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserEdit.FullName.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserEdit.FullName.Visible (end) *@
@if (mtUserEdit.MTUserLevelID.Visible) { // mtUserEdit.MTUserLevelID.Visible (begin)
    <div id="r_MTUserLevelID" @Html.Raw(mtUserEdit.MTUserLevelID.RowAttributes)>
        <label id="elh_MTUser_MTUserLevelID" for="x_MTUserLevelID" class="@(mtUserEdit.LeftColumnClass)">@Html.Raw(mtUserEdit.MTUserLevelID.Caption)@Html.Raw(mtUserEdit.MTUserLevelID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserEdit.RightColumnClass)"><div @Html.Raw(mtUserEdit.MTUserLevelID.CellAttributes)>
@if (!Security.IsAdmin && Security.IsLoggedIn) { // Non system admin
<span id="el_MTUser_MTUserLevelID">
<span class="form-control-plaintext">@Html.Raw(mtUserEdit.MTUserLevelID.DisplayValue(mtUserEdit.MTUserLevelID.EditValue))</span>
</span>
} else {
<span id="el_MTUser_MTUserLevelID">
    <select
        id="x_MTUserLevelID"
        name="x_MTUserLevelID"
        class="form-select ew-select@(mtUserEdit.MTUserLevelID.IsInvalidClass)"
        data-select2-id="fMTUseredit_x_MTUserLevelID"
        data-table="MTUser"
        data-field="x_MTUserLevelID"
        data-value-separator="@(mtUserEdit.MTUserLevelID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(mtUserEdit.MTUserLevelID.PlaceHolder))"
        @Html.Raw(mtUserEdit.MTUserLevelID.EditAttributes)>
        @(mtUserEdit.MTUserLevelID.SelectOptionListHtml("x_MTUserLevelID"))
    </select>
    @Html.Raw(mtUserEdit.MTUserLevelID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(mtUserEdit.MTUserLevelID.GetErrorMessage())</div>
@Html.Raw(mtUserEdit.MTUserLevelID.Lookup.GetParamTag(mtUserEdit, "p_x_MTUserLevelID"))
<script>
loadjs.ready("fMTUseredit", function() {
    var options = { name: "x_MTUserLevelID", selectId: "fMTUseredit_x_MTUserLevelID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fMTUseredit.lists.MTUserLevelID?.lookupOptions.length) {
        options.data = { id: "x_MTUserLevelID", form: "fMTUseredit" };
    } else {
        options.ajax = { id: "x_MTUserLevelID", form: "fMTUseredit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.MTUser.fields.MTUserLevelID.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
}
</div></div>
    </div>
} @* mtUserEdit.MTUserLevelID.Visible (end) *@
@if (mtUserEdit.SeafarerID.Visible) { // mtUserEdit.SeafarerID.Visible (begin)
    <div id="r_SeafarerID" @Html.Raw(mtUserEdit.SeafarerID.RowAttributes)>
        <label id="elh_MTUser_SeafarerID" for="x_SeafarerID" class="@(mtUserEdit.LeftColumnClass)">@Html.Raw(mtUserEdit.SeafarerID.Caption)@Html.Raw(mtUserEdit.SeafarerID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserEdit.RightColumnClass)"><div @Html.Raw(mtUserEdit.SeafarerID.CellAttributes)>
<span id="el_MTUser_SeafarerID">
<input type="@(mtUserEdit.SeafarerID.InputTextType)" name="x_SeafarerID" id="x_SeafarerID" data-table="MTUser" data-field="x_SeafarerID" value="@Html.Raw(mtUserEdit.SeafarerID.EditValue)" size="30" maxlength="20" placeholder="@Html.Raw(HtmlEncode(mtUserEdit.SeafarerID.PlaceHolder))" data-format-pattern="@(mtUserEdit.SeafarerID.FormatPattern)"@Html.Raw(mtUserEdit.SeafarerID.EditAttributes) aria-describedby="x_SeafarerID_help">
@Html.Raw(mtUserEdit.SeafarerID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserEdit.SeafarerID.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserEdit.SeafarerID.Visible (end) *@
@if (mtUserEdit.CrewAgency.Visible) { // mtUserEdit.CrewAgency.Visible (begin)
    <div id="r_CrewAgency" @Html.Raw(mtUserEdit.CrewAgency.RowAttributes)>
        <label id="elh_MTUser_CrewAgency" for="x_CrewAgency" class="@(mtUserEdit.LeftColumnClass)">@Html.Raw(mtUserEdit.CrewAgency.Caption)@Html.Raw(mtUserEdit.CrewAgency.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserEdit.RightColumnClass)"><div @Html.Raw(mtUserEdit.CrewAgency.CellAttributes)>
<span id="el_MTUser_CrewAgency">
    <select
        id="x_CrewAgency"
        name="x_CrewAgency"
        class="form-select ew-select@(mtUserEdit.CrewAgency.IsInvalidClass)"
        data-select2-id="fMTUseredit_x_CrewAgency"
        data-table="MTUser"
        data-field="x_CrewAgency"
        data-value-separator="@(mtUserEdit.CrewAgency.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(mtUserEdit.CrewAgency.PlaceHolder))"
        @Html.Raw(mtUserEdit.CrewAgency.EditAttributes)>
        @(mtUserEdit.CrewAgency.SelectOptionListHtml("x_CrewAgency"))
    </select>
    @Html.Raw(mtUserEdit.CrewAgency.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(mtUserEdit.CrewAgency.GetErrorMessage())</div>
<script>
loadjs.ready("fMTUseredit", function() {
    var options = { name: "x_CrewAgency", selectId: "fMTUseredit_x_CrewAgency" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fMTUseredit.lists.CrewAgency?.lookupOptions.length) {
        options.data = { id: "x_CrewAgency", form: "fMTUseredit" };
    } else {
        options.ajax = { id: "x_CrewAgency", form: "fMTUseredit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.MTUser.fields.CrewAgency.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
</div></div>
    </div>
} @* mtUserEdit.CrewAgency.Visible (end) *@
</div><!-- /page* -->
    <input type="hidden" data-table="MTUser" data-field="x_ID" data-hidden="1" name="x_ID" id="x_ID" value="@Html.Raw(HtmlEncode(mtUserEdit.ID.CurrentValue))">
@{ mtUserEdit.CloseRecordset(); }
@Html.Raw(mtUserEdit.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(mtUserEdit.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fMTUseredit">@Html.Raw(Language.Phrase("SaveBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fMTUseredit" data-href="@AppPath(mtUserEdit.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(mtUserEdit.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
</main>
@mtUserEdit.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("MTUser");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
