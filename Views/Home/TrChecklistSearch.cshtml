@{
    // View
    View = this;

    // Check action result
    if (trChecklistSearch.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!trChecklistSearch.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(trChecklistSearch.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { TRChecklist: currentTable } });
var currentPageID = ew.PAGE_ID = "search";
var currentForm;
var fTRChecklistsearch, currentSearchForm, currentAdvancedSearchForm;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery,
        fields = currentTable.fields;

    // Form object for search
    let form = new ew.FormBuilder()
        .setId("fTRChecklistsearch")
        .setPageId("search")
@if (trChecklistSearch.IsModal && trChecklistSearch.UseAjaxActions) {
        <text>.setSubmitWithFetch(true)</text>
}

        // Add fields
        .setFields([

            ["DocumentDate", [ew.Validators.datetime(fields.DocumentDate.clientFormatPattern)], fields.DocumentDate.isInvalid],
            ["InterviewedByPersonOneDate", [ew.Validators.datetime(fields.InterviewedByPersonOneDate.clientFormatPattern)], fields.InterviewedByPersonOneDate.isInvalid],
            ["InterviewedByPersonTwoDate", [ew.Validators.datetime(fields.InterviewedByPersonTwoDate.clientFormatPattern)], fields.InterviewedByPersonTwoDate.isInvalid],
            ["InterviewedByPersonThreeDate", [ew.Validators.datetime(fields.InterviewedByPersonThreeDate.clientFormatPattern)], fields.InterviewedByPersonThreeDate.isInvalid],
            ["InterviewedByPersonOneAttachment", [], fields.InterviewedByPersonOneAttachment.isInvalid],
            ["InterviewedByPersonTwoAttachment", [], fields.InterviewedByPersonTwoAttachment.isInvalid],
            ["InterviewedByPersonThreeAttachment", [], fields.InterviewedByPersonThreeAttachment.isInvalid],
            ["ApprovedByUserID1", [ew.Validators.integer], fields.ApprovedByUserID1.isInvalid],
            ["ApprovedByUserID2", [ew.Validators.integer], fields.ApprovedByUserID2.isInvalid]
        ])
        // Validate form
        .setValidate(
            async function () {
                if (!this.validateRequired)
                    return true; // Ignore validation
                let fobj = this.getForm();

                // Validate fields
                if (!this.validateFields())
                    return false;

                // Call Form_CustomValidate event
                if (!(await this.customValidate?.(fobj) ?? true)) {
                    this.focus();
                    return false;
                }
                return true;
            }
        )

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
        })
        .build();
    window[form.id] = form;
@if (trChecklistSearch.IsModal) {
    <text>currentAdvancedSearchForm = form;</text>
} else {
    <text>currentForm = form;</text>
}
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@trChecklistSearch.ShowPageHeader()
@trChecklistSearch.ShowMessages()
<form name="fTRChecklistsearch" id="fTRChecklistsearch" class="@(trChecklistSearch.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="search">
@if (trChecklistSearch.IsModal) {
<input type="hidden" name="modal" value="1">
}
<div class="ew-search-div"><!-- page* -->
@if (trChecklistSearch.DocumentDate.Visible) { // trChecklistSearch.DocumentDate.Visible (begin)
    <div id="r_DocumentDate" class="row" @Html.Raw(trChecklistSearch.DocumentDate.RowAttributes)>
        <label for="x_DocumentDate" class="@(trChecklistSearch.LeftColumnClass)"><span id="elh_TRChecklist_DocumentDate">@Html.Raw(trChecklistSearch.DocumentDate.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("="))
<input type="hidden" name="z_DocumentDate" id="z_DocumentDate" value="=">
</span>
        </label>
        <div class="@(trChecklistSearch.RightColumnClass)">
            <div @Html.Raw(trChecklistSearch.DocumentDate.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_TRChecklist_DocumentDate" class="ew-search-field ew-search-field-single">
<input type="@(trChecklistSearch.DocumentDate.InputTextType)" name="x_DocumentDate" id="x_DocumentDate" data-table="TRChecklist" data-field="x_DocumentDate" value="@Html.Raw(trChecklistSearch.DocumentDate.EditValue)" placeholder="@Html.Raw(HtmlEncode(trChecklistSearch.DocumentDate.PlaceHolder))" data-format-pattern="@(trChecklistSearch.DocumentDate.FormatPattern)"@Html.Raw(trChecklistSearch.DocumentDate.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(trChecklistSearch.DocumentDate.GetErrorMessage(false))</div>
@if (!trChecklistSearch.DocumentDate.ReadOnly && !trChecklistSearch.DocumentDate.Disabled && !trChecklistSearch.DocumentDate.EditAttrs.Is("readonly") && !trChecklistSearch.DocumentDate.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fTRChecklistsearch", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fTRChecklistsearch", "x_DocumentDate", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
                </div>
            </div>
        </div>
    </div>
} @* trChecklistSearch.DocumentDate.Visible (end) *@
@if (trChecklistSearch.InterviewedByPersonOneDate.Visible) { // trChecklistSearch.InterviewedByPersonOneDate.Visible (begin)
    <div id="r_InterviewedByPersonOneDate" class="row" @Html.Raw(trChecklistSearch.InterviewedByPersonOneDate.RowAttributes)>
        <label for="x_InterviewedByPersonOneDate" class="@(trChecklistSearch.LeftColumnClass)"><span id="elh_TRChecklist_InterviewedByPersonOneDate">@Html.Raw(trChecklistSearch.InterviewedByPersonOneDate.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("="))
<input type="hidden" name="z_InterviewedByPersonOneDate" id="z_InterviewedByPersonOneDate" value="=">
</span>
        </label>
        <div class="@(trChecklistSearch.RightColumnClass)">
            <div @Html.Raw(trChecklistSearch.InterviewedByPersonOneDate.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_TRChecklist_InterviewedByPersonOneDate" class="ew-search-field ew-search-field-single">
<input type="@(trChecklistSearch.InterviewedByPersonOneDate.InputTextType)" name="x_InterviewedByPersonOneDate" id="x_InterviewedByPersonOneDate" data-table="TRChecklist" data-field="x_InterviewedByPersonOneDate" value="@Html.Raw(trChecklistSearch.InterviewedByPersonOneDate.EditValue)" placeholder="@Html.Raw(HtmlEncode(trChecklistSearch.InterviewedByPersonOneDate.PlaceHolder))" data-format-pattern="@(trChecklistSearch.InterviewedByPersonOneDate.FormatPattern)"@Html.Raw(trChecklistSearch.InterviewedByPersonOneDate.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(trChecklistSearch.InterviewedByPersonOneDate.GetErrorMessage(false))</div>
@if (!trChecklistSearch.InterviewedByPersonOneDate.ReadOnly && !trChecklistSearch.InterviewedByPersonOneDate.Disabled && !trChecklistSearch.InterviewedByPersonOneDate.EditAttrs.Is("readonly") && !trChecklistSearch.InterviewedByPersonOneDate.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fTRChecklistsearch", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fTRChecklistsearch", "x_InterviewedByPersonOneDate", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
                </div>
            </div>
        </div>
    </div>
} @* trChecklistSearch.InterviewedByPersonOneDate.Visible (end) *@
@if (trChecklistSearch.InterviewedByPersonTwoDate.Visible) { // trChecklistSearch.InterviewedByPersonTwoDate.Visible (begin)
    <div id="r_InterviewedByPersonTwoDate" class="row" @Html.Raw(trChecklistSearch.InterviewedByPersonTwoDate.RowAttributes)>
        <label for="x_InterviewedByPersonTwoDate" class="@(trChecklistSearch.LeftColumnClass)"><span id="elh_TRChecklist_InterviewedByPersonTwoDate">@Html.Raw(trChecklistSearch.InterviewedByPersonTwoDate.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("="))
<input type="hidden" name="z_InterviewedByPersonTwoDate" id="z_InterviewedByPersonTwoDate" value="=">
</span>
        </label>
        <div class="@(trChecklistSearch.RightColumnClass)">
            <div @Html.Raw(trChecklistSearch.InterviewedByPersonTwoDate.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_TRChecklist_InterviewedByPersonTwoDate" class="ew-search-field ew-search-field-single">
<input type="@(trChecklistSearch.InterviewedByPersonTwoDate.InputTextType)" name="x_InterviewedByPersonTwoDate" id="x_InterviewedByPersonTwoDate" data-table="TRChecklist" data-field="x_InterviewedByPersonTwoDate" value="@Html.Raw(trChecklistSearch.InterviewedByPersonTwoDate.EditValue)" placeholder="@Html.Raw(HtmlEncode(trChecklistSearch.InterviewedByPersonTwoDate.PlaceHolder))" data-format-pattern="@(trChecklistSearch.InterviewedByPersonTwoDate.FormatPattern)"@Html.Raw(trChecklistSearch.InterviewedByPersonTwoDate.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(trChecklistSearch.InterviewedByPersonTwoDate.GetErrorMessage(false))</div>
@if (!trChecklistSearch.InterviewedByPersonTwoDate.ReadOnly && !trChecklistSearch.InterviewedByPersonTwoDate.Disabled && !trChecklistSearch.InterviewedByPersonTwoDate.EditAttrs.Is("readonly") && !trChecklistSearch.InterviewedByPersonTwoDate.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fTRChecklistsearch", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fTRChecklistsearch", "x_InterviewedByPersonTwoDate", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
                </div>
            </div>
        </div>
    </div>
} @* trChecklistSearch.InterviewedByPersonTwoDate.Visible (end) *@
@if (trChecklistSearch.InterviewedByPersonThreeDate.Visible) { // trChecklistSearch.InterviewedByPersonThreeDate.Visible (begin)
    <div id="r_InterviewedByPersonThreeDate" class="row" @Html.Raw(trChecklistSearch.InterviewedByPersonThreeDate.RowAttributes)>
        <label for="x_InterviewedByPersonThreeDate" class="@(trChecklistSearch.LeftColumnClass)"><span id="elh_TRChecklist_InterviewedByPersonThreeDate">@Html.Raw(trChecklistSearch.InterviewedByPersonThreeDate.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("="))
<input type="hidden" name="z_InterviewedByPersonThreeDate" id="z_InterviewedByPersonThreeDate" value="=">
</span>
        </label>
        <div class="@(trChecklistSearch.RightColumnClass)">
            <div @Html.Raw(trChecklistSearch.InterviewedByPersonThreeDate.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_TRChecklist_InterviewedByPersonThreeDate" class="ew-search-field ew-search-field-single">
<input type="@(trChecklistSearch.InterviewedByPersonThreeDate.InputTextType)" name="x_InterviewedByPersonThreeDate" id="x_InterviewedByPersonThreeDate" data-table="TRChecklist" data-field="x_InterviewedByPersonThreeDate" value="@Html.Raw(trChecklistSearch.InterviewedByPersonThreeDate.EditValue)" placeholder="@Html.Raw(HtmlEncode(trChecklistSearch.InterviewedByPersonThreeDate.PlaceHolder))" data-format-pattern="@(trChecklistSearch.InterviewedByPersonThreeDate.FormatPattern)"@Html.Raw(trChecklistSearch.InterviewedByPersonThreeDate.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(trChecklistSearch.InterviewedByPersonThreeDate.GetErrorMessage(false))</div>
@if (!trChecklistSearch.InterviewedByPersonThreeDate.ReadOnly && !trChecklistSearch.InterviewedByPersonThreeDate.Disabled && !trChecklistSearch.InterviewedByPersonThreeDate.EditAttrs.Is("readonly") && !trChecklistSearch.InterviewedByPersonThreeDate.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fTRChecklistsearch", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fTRChecklistsearch", "x_InterviewedByPersonThreeDate", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
                </div>
            </div>
        </div>
    </div>
} @* trChecklistSearch.InterviewedByPersonThreeDate.Visible (end) *@
@if (trChecklistSearch.InterviewedByPersonOneAttachment.Visible) { // trChecklistSearch.InterviewedByPersonOneAttachment.Visible (begin)
    <div id="r_InterviewedByPersonOneAttachment" class="row" @Html.Raw(trChecklistSearch.InterviewedByPersonOneAttachment.RowAttributes)>
        <label for="x_InterviewedByPersonOneAttachment" class="@(trChecklistSearch.LeftColumnClass)"><span id="elh_TRChecklist_InterviewedByPersonOneAttachment">@Html.Raw(trChecklistSearch.InterviewedByPersonOneAttachment.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("LIKE"))
<input type="hidden" name="z_InterviewedByPersonOneAttachment" id="z_InterviewedByPersonOneAttachment" value="LIKE">
</span>
        </label>
        <div class="@(trChecklistSearch.RightColumnClass)">
            <div @Html.Raw(trChecklistSearch.InterviewedByPersonOneAttachment.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_TRChecklist_InterviewedByPersonOneAttachment" class="ew-search-field ew-search-field-single">
<input type="@(trChecklistSearch.InterviewedByPersonOneAttachment.InputTextType)" name="x_InterviewedByPersonOneAttachment" id="x_InterviewedByPersonOneAttachment" data-table="TRChecklist" data-field="x_InterviewedByPersonOneAttachment" value="@Html.Raw(trChecklistSearch.InterviewedByPersonOneAttachment.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(trChecklistSearch.InterviewedByPersonOneAttachment.PlaceHolder))" data-format-pattern="@(trChecklistSearch.InterviewedByPersonOneAttachment.FormatPattern)"@Html.Raw(trChecklistSearch.InterviewedByPersonOneAttachment.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(trChecklistSearch.InterviewedByPersonOneAttachment.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* trChecklistSearch.InterviewedByPersonOneAttachment.Visible (end) *@
@if (trChecklistSearch.InterviewedByPersonTwoAttachment.Visible) { // trChecklistSearch.InterviewedByPersonTwoAttachment.Visible (begin)
    <div id="r_InterviewedByPersonTwoAttachment" class="row" @Html.Raw(trChecklistSearch.InterviewedByPersonTwoAttachment.RowAttributes)>
        <label for="x_InterviewedByPersonTwoAttachment" class="@(trChecklistSearch.LeftColumnClass)"><span id="elh_TRChecklist_InterviewedByPersonTwoAttachment">@Html.Raw(trChecklistSearch.InterviewedByPersonTwoAttachment.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("LIKE"))
<input type="hidden" name="z_InterviewedByPersonTwoAttachment" id="z_InterviewedByPersonTwoAttachment" value="LIKE">
</span>
        </label>
        <div class="@(trChecklistSearch.RightColumnClass)">
            <div @Html.Raw(trChecklistSearch.InterviewedByPersonTwoAttachment.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_TRChecklist_InterviewedByPersonTwoAttachment" class="ew-search-field ew-search-field-single">
<input type="@(trChecklistSearch.InterviewedByPersonTwoAttachment.InputTextType)" name="x_InterviewedByPersonTwoAttachment" id="x_InterviewedByPersonTwoAttachment" data-table="TRChecklist" data-field="x_InterviewedByPersonTwoAttachment" value="@Html.Raw(trChecklistSearch.InterviewedByPersonTwoAttachment.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(trChecklistSearch.InterviewedByPersonTwoAttachment.PlaceHolder))" data-format-pattern="@(trChecklistSearch.InterviewedByPersonTwoAttachment.FormatPattern)"@Html.Raw(trChecklistSearch.InterviewedByPersonTwoAttachment.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(trChecklistSearch.InterviewedByPersonTwoAttachment.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* trChecklistSearch.InterviewedByPersonTwoAttachment.Visible (end) *@
@if (trChecklistSearch.InterviewedByPersonThreeAttachment.Visible) { // trChecklistSearch.InterviewedByPersonThreeAttachment.Visible (begin)
    <div id="r_InterviewedByPersonThreeAttachment" class="row" @Html.Raw(trChecklistSearch.InterviewedByPersonThreeAttachment.RowAttributes)>
        <label for="x_InterviewedByPersonThreeAttachment" class="@(trChecklistSearch.LeftColumnClass)"><span id="elh_TRChecklist_InterviewedByPersonThreeAttachment">@Html.Raw(trChecklistSearch.InterviewedByPersonThreeAttachment.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("LIKE"))
<input type="hidden" name="z_InterviewedByPersonThreeAttachment" id="z_InterviewedByPersonThreeAttachment" value="LIKE">
</span>
        </label>
        <div class="@(trChecklistSearch.RightColumnClass)">
            <div @Html.Raw(trChecklistSearch.InterviewedByPersonThreeAttachment.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_TRChecklist_InterviewedByPersonThreeAttachment" class="ew-search-field ew-search-field-single">
<input type="@(trChecklistSearch.InterviewedByPersonThreeAttachment.InputTextType)" name="x_InterviewedByPersonThreeAttachment" id="x_InterviewedByPersonThreeAttachment" data-table="TRChecklist" data-field="x_InterviewedByPersonThreeAttachment" value="@Html.Raw(trChecklistSearch.InterviewedByPersonThreeAttachment.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(trChecklistSearch.InterviewedByPersonThreeAttachment.PlaceHolder))" data-format-pattern="@(trChecklistSearch.InterviewedByPersonThreeAttachment.FormatPattern)"@Html.Raw(trChecklistSearch.InterviewedByPersonThreeAttachment.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(trChecklistSearch.InterviewedByPersonThreeAttachment.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* trChecklistSearch.InterviewedByPersonThreeAttachment.Visible (end) *@
@if (trChecklistSearch.ApprovedByUserID1.Visible) { // trChecklistSearch.ApprovedByUserID1.Visible (begin)
    <div id="r_ApprovedByUserID1" class="row" @Html.Raw(trChecklistSearch.ApprovedByUserID1.RowAttributes)>
        <label for="x_ApprovedByUserID1" class="@(trChecklistSearch.LeftColumnClass)"><span id="elh_TRChecklist_ApprovedByUserID1">@Html.Raw(trChecklistSearch.ApprovedByUserID1.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("="))
<input type="hidden" name="z_ApprovedByUserID1" id="z_ApprovedByUserID1" value="=">
</span>
        </label>
        <div class="@(trChecklistSearch.RightColumnClass)">
            <div @Html.Raw(trChecklistSearch.ApprovedByUserID1.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_TRChecklist_ApprovedByUserID1" class="ew-search-field ew-search-field-single">
<input type="@(trChecklistSearch.ApprovedByUserID1.InputTextType)" name="x_ApprovedByUserID1" id="x_ApprovedByUserID1" data-table="TRChecklist" data-field="x_ApprovedByUserID1" value="@Html.Raw(trChecklistSearch.ApprovedByUserID1.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(trChecklistSearch.ApprovedByUserID1.PlaceHolder))" data-format-pattern="@(trChecklistSearch.ApprovedByUserID1.FormatPattern)"@Html.Raw(trChecklistSearch.ApprovedByUserID1.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(trChecklistSearch.ApprovedByUserID1.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* trChecklistSearch.ApprovedByUserID1.Visible (end) *@
@if (trChecklistSearch.ApprovedByUserID2.Visible) { // trChecklistSearch.ApprovedByUserID2.Visible (begin)
    <div id="r_ApprovedByUserID2" class="row" @Html.Raw(trChecklistSearch.ApprovedByUserID2.RowAttributes)>
        <label for="x_ApprovedByUserID2" class="@(trChecklistSearch.LeftColumnClass)"><span id="elh_TRChecklist_ApprovedByUserID2">@Html.Raw(trChecklistSearch.ApprovedByUserID2.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("="))
<input type="hidden" name="z_ApprovedByUserID2" id="z_ApprovedByUserID2" value="=">
</span>
        </label>
        <div class="@(trChecklistSearch.RightColumnClass)">
            <div @Html.Raw(trChecklistSearch.ApprovedByUserID2.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_TRChecklist_ApprovedByUserID2" class="ew-search-field ew-search-field-single">
<input type="@(trChecklistSearch.ApprovedByUserID2.InputTextType)" name="x_ApprovedByUserID2" id="x_ApprovedByUserID2" data-table="TRChecklist" data-field="x_ApprovedByUserID2" value="@Html.Raw(trChecklistSearch.ApprovedByUserID2.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(trChecklistSearch.ApprovedByUserID2.PlaceHolder))" data-format-pattern="@(trChecklistSearch.ApprovedByUserID2.FormatPattern)"@Html.Raw(trChecklistSearch.ApprovedByUserID2.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(trChecklistSearch.ApprovedByUserID2.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* trChecklistSearch.ApprovedByUserID2.Visible (end) *@
</div><!-- /page* -->
@Html.Raw(trChecklistSearch.IsModal ? Html.Raw("<template class=\"ew-modal-buttons\">") : Html.Raw("<div class=\"row ew-buttons\">"))<!-- buttons .row -->
    <div class="@(trChecklistSearch.OffsetColumnClass)"><!-- buttons offset -->
        <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fTRChecklistsearch">@Html.Raw(Language.Phrase("Search"))</button>
@if (trChecklistSearch.IsModal) {
        <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fTRChecklistsearch">@Html.Raw(Language.Phrase("Cancel"))</button>
} else {
        <button class="btn btn-default ew-btn" name="btn-reset" id="btn-reset" type="button" form="fTRChecklistsearch" data-ew-action="reload">@Html.Raw(Language.Phrase("Reset"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(trChecklistSearch.IsModal ? Html.Raw("</template>") : Html.Raw("</div>"))<!-- /buttons .row -->
</form>
@trChecklistSearch.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("TRChecklist");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
