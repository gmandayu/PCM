@{
    // View
    View = this;

    // Check action result
    if (trChecklistSearch.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!trChecklistSearch.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(trChecklistSearch.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { TRChecklist: currentTable } });
var currentPageID = ew.PAGE_ID = "search";
var currentForm;
var fTRChecklistsearch, currentSearchForm, currentAdvancedSearchForm;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery,
        fields = currentTable.fields;

    // Form object for search
    let form = new ew.FormBuilder()
        .setId("fTRChecklistsearch")
        .setPageId("search")
@if (trChecklistSearch.IsModal && trChecklistSearch.UseAjaxActions) {
        <text>.setSubmitWithFetch(true)</text>
}

        // Add fields
        .setFields([

            ["ApprovedByUserID1", [ew.Validators.integer], fields.ApprovedByUserID1.isInvalid],
            ["ApprovedByUserID2", [ew.Validators.integer], fields.ApprovedByUserID2.isInvalid]
        ])
        // Validate form
        .setValidate(
            async function () {
                if (!this.validateRequired)
                    return true; // Ignore validation
                let fobj = this.getForm();

                // Validate fields
                if (!this.validateFields())
                    return false;

                // Call Form_CustomValidate event
                if (!(await this.customValidate?.(fobj) ?? true)) {
                    this.focus();
                    return false;
                }
                return true;
            }
        )

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
        })
        .build();
    window[form.id] = form;
@if (trChecklistSearch.IsModal) {
    <text>currentAdvancedSearchForm = form;</text>
} else {
    <text>currentForm = form;</text>
}
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@trChecklistSearch.ShowPageHeader()
@trChecklistSearch.ShowMessages()
<form name="fTRChecklistsearch" id="fTRChecklistsearch" class="@(trChecklistSearch.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="search">
@if (trChecklistSearch.IsModal) {
<input type="hidden" name="modal" value="1">
}
<div class="ew-search-div"><!-- page* -->
@if (trChecklistSearch.ApprovedByUserID1.Visible) { // trChecklistSearch.ApprovedByUserID1.Visible (begin)
    <div id="r_ApprovedByUserID1" class="row" @Html.Raw(trChecklistSearch.ApprovedByUserID1.RowAttributes)>
        <label for="x_ApprovedByUserID1" class="@(trChecklistSearch.LeftColumnClass)"><span id="elh_TRChecklist_ApprovedByUserID1">@Html.Raw(trChecklistSearch.ApprovedByUserID1.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("="))
<input type="hidden" name="z_ApprovedByUserID1" id="z_ApprovedByUserID1" value="=">
</span>
        </label>
        <div class="@(trChecklistSearch.RightColumnClass)">
            <div @Html.Raw(trChecklistSearch.ApprovedByUserID1.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_TRChecklist_ApprovedByUserID1" class="ew-search-field ew-search-field-single">
<input type="@(trChecklistSearch.ApprovedByUserID1.InputTextType)" name="x_ApprovedByUserID1" id="x_ApprovedByUserID1" data-table="TRChecklist" data-field="x_ApprovedByUserID1" value="@Html.Raw(trChecklistSearch.ApprovedByUserID1.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(trChecklistSearch.ApprovedByUserID1.PlaceHolder))" data-format-pattern="@(trChecklistSearch.ApprovedByUserID1.FormatPattern)"@Html.Raw(trChecklistSearch.ApprovedByUserID1.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(trChecklistSearch.ApprovedByUserID1.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* trChecklistSearch.ApprovedByUserID1.Visible (end) *@
@if (trChecklistSearch.ApprovedByUserID2.Visible) { // trChecklistSearch.ApprovedByUserID2.Visible (begin)
    <div id="r_ApprovedByUserID2" class="row" @Html.Raw(trChecklistSearch.ApprovedByUserID2.RowAttributes)>
        <label for="x_ApprovedByUserID2" class="@(trChecklistSearch.LeftColumnClass)"><span id="elh_TRChecklist_ApprovedByUserID2">@Html.Raw(trChecklistSearch.ApprovedByUserID2.Caption)</span>
        <span class="ew-search-operator">
@Html.Raw(Language.Phrase("="))
<input type="hidden" name="z_ApprovedByUserID2" id="z_ApprovedByUserID2" value="=">
</span>
        </label>
        <div class="@(trChecklistSearch.RightColumnClass)">
            <div @Html.Raw(trChecklistSearch.ApprovedByUserID2.CellAttributes)>
                <div class="d-flex align-items-start">
                <span id="el_TRChecklist_ApprovedByUserID2" class="ew-search-field ew-search-field-single">
<input type="@(trChecklistSearch.ApprovedByUserID2.InputTextType)" name="x_ApprovedByUserID2" id="x_ApprovedByUserID2" data-table="TRChecklist" data-field="x_ApprovedByUserID2" value="@Html.Raw(trChecklistSearch.ApprovedByUserID2.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(trChecklistSearch.ApprovedByUserID2.PlaceHolder))" data-format-pattern="@(trChecklistSearch.ApprovedByUserID2.FormatPattern)"@Html.Raw(trChecklistSearch.ApprovedByUserID2.EditAttributes)>
<div class="invalid-feedback">@Html.Raw(trChecklistSearch.ApprovedByUserID2.GetErrorMessage(false))</div>
</span>
                </div>
            </div>
        </div>
    </div>
} @* trChecklistSearch.ApprovedByUserID2.Visible (end) *@
</div><!-- /page* -->
@Html.Raw(trChecklistSearch.IsModal ? Html.Raw("<template class=\"ew-modal-buttons\">") : Html.Raw("<div class=\"row ew-buttons\">"))<!-- buttons .row -->
    <div class="@(trChecklistSearch.OffsetColumnClass)"><!-- buttons offset -->
        <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fTRChecklistsearch">@Html.Raw(Language.Phrase("Search"))</button>
@if (trChecklistSearch.IsModal) {
        <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fTRChecklistsearch">@Html.Raw(Language.Phrase("Cancel"))</button>
} else {
        <button class="btn btn-default ew-btn" name="btn-reset" id="btn-reset" type="button" form="fTRChecklistsearch" data-ew-action="reload">@Html.Raw(Language.Phrase("Reset"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(trChecklistSearch.IsModal ? Html.Raw("</template>") : Html.Raw("</div>"))<!-- /buttons .row -->
</form>
@trChecklistSearch.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("TRChecklist");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
