@{
    // View
    View = this;

    // Check action result
    if (crewDocumentForAdminAdd.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!crewDocumentForAdminAdd.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(crewDocumentForAdminAdd.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { CrewDocumentForAdmin: currentTable } });
var currentPageID = ew.PAGE_ID = "add";
var currentForm;
var fCrewDocumentForAdminadd;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fCrewDocumentForAdminadd")
        .setPageId("add")

        // Add fields
        .setFields([

            ["MTCrewID", [fields.MTCrewID.visible && fields.MTCrewID.required ? ew.Validators.required(fields.MTCrewID.caption) : null], fields.MTCrewID.isInvalid],
            ["MTDocumentID", [fields.MTDocumentID.visible && fields.MTDocumentID.required ? ew.Validators.required(fields.MTDocumentID.caption) : null], fields.MTDocumentID.isInvalid],
            ["Number", [fields.Number.visible && fields.Number.required ? ew.Validators.required(fields.Number.caption) : null], fields.Number.isInvalid],
            ["CountryOfIssue_CountryID", [fields.CountryOfIssue_CountryID.visible && fields.CountryOfIssue_CountryID.required ? ew.Validators.required(fields.CountryOfIssue_CountryID.caption) : null], fields.CountryOfIssue_CountryID.isInvalid],
            ["DateOfIssue", [fields.DateOfIssue.visible && fields.DateOfIssue.required ? ew.Validators.required(fields.DateOfIssue.caption) : null, ew.Validators.datetime(fields.DateOfIssue.clientFormatPattern)], fields.DateOfIssue.isInvalid],
            ["PlaceOfIssue", [fields.PlaceOfIssue.visible && fields.PlaceOfIssue.required ? ew.Validators.required(fields.PlaceOfIssue.caption) : null], fields.PlaceOfIssue.isInvalid],
            ["DateValidUntil", [fields.DateValidUntil.visible && fields.DateValidUntil.required ? ew.Validators.required(fields.DateValidUntil.caption) : null, ew.Validators.datetime(fields.DateValidUntil.clientFormatPattern)], fields.DateValidUntil.isInvalid],
            ["Image", [fields.Image.visible && fields.Image.required ? ew.Validators.fileRequired(fields.Image.caption) : null], fields.Image.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "CountryOfIssue_CountryID": @Html.Raw(crewDocumentForAdminAdd.CountryOfIssue_CountryID.ToClientList(crewDocumentForAdminAdd)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@crewDocumentForAdminAdd.ShowPageHeader()
@crewDocumentForAdminAdd.ShowMessages()
<form name="fCrewDocumentForAdminadd" id="fCrewDocumentForAdminadd" class="@(crewDocumentForAdminAdd.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="insert">
<input type="hidden" name="modal" value="@ConvertToInt(crewDocumentForAdminAdd.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(crewDocumentForAdminAdd.OldKeyName)" value="@Html.Raw(crewDocumentForAdminAdd.OldKey)">
<div class="ew-add-div d-none"><!-- page* -->
@if (crewDocumentForAdminAdd.MTCrewID.Visible) { // crewDocumentForAdminAdd.MTCrewID.Visible (begin)
    <div id="r_MTCrewID" @Html.Raw(crewDocumentForAdminAdd.MTCrewID.RowAttributes)>
        <label id="elh_CrewDocumentForAdmin_MTCrewID" for="x_MTCrewID" class="@(crewDocumentForAdminAdd.LeftColumnClass)"><template id="tpc_CrewDocumentForAdmin_MTCrewID">@Html.Raw(crewDocumentForAdminAdd.MTCrewID.Caption)@Html.Raw(crewDocumentForAdminAdd.MTCrewID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewDocumentForAdminAdd.RightColumnClass)"><div @Html.Raw(crewDocumentForAdminAdd.MTCrewID.CellAttributes)>
<template id="tpx_CrewDocumentForAdmin_MTCrewID"><span id="el_CrewDocumentForAdmin_MTCrewID">
<input type="@(crewDocumentForAdminAdd.MTCrewID.InputTextType)" name="x_MTCrewID" id="x_MTCrewID" data-table="CrewDocumentForAdmin" data-field="x_MTCrewID" value="@Html.Raw(crewDocumentForAdminAdd.MTCrewID.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(crewDocumentForAdminAdd.MTCrewID.PlaceHolder))" data-format-pattern="@(crewDocumentForAdminAdd.MTCrewID.FormatPattern)"@Html.Raw(crewDocumentForAdminAdd.MTCrewID.EditAttributes) aria-describedby="x_MTCrewID_help">
@Html.Raw(crewDocumentForAdminAdd.MTCrewID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewDocumentForAdminAdd.MTCrewID.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewDocumentForAdminAdd.MTCrewID.Visible (end) *@
@if (crewDocumentForAdminAdd.MTDocumentID.Visible) { // crewDocumentForAdminAdd.MTDocumentID.Visible (begin)
    <div id="r_MTDocumentID" @Html.Raw(crewDocumentForAdminAdd.MTDocumentID.RowAttributes)>
        <label id="elh_CrewDocumentForAdmin_MTDocumentID" for="x_MTDocumentID" class="@(crewDocumentForAdminAdd.LeftColumnClass)"><template id="tpc_CrewDocumentForAdmin_MTDocumentID">@Html.Raw(crewDocumentForAdminAdd.MTDocumentID.Caption)@Html.Raw(crewDocumentForAdminAdd.MTDocumentID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewDocumentForAdminAdd.RightColumnClass)"><div @Html.Raw(crewDocumentForAdminAdd.MTDocumentID.CellAttributes)>
<template id="tpx_CrewDocumentForAdmin_MTDocumentID"><span id="el_CrewDocumentForAdmin_MTDocumentID">
<input type="@(crewDocumentForAdminAdd.MTDocumentID.InputTextType)" name="x_MTDocumentID" id="x_MTDocumentID" data-table="CrewDocumentForAdmin" data-field="x_MTDocumentID" value="@Html.Raw(crewDocumentForAdminAdd.MTDocumentID.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(crewDocumentForAdminAdd.MTDocumentID.PlaceHolder))" data-format-pattern="@(crewDocumentForAdminAdd.MTDocumentID.FormatPattern)"@Html.Raw(crewDocumentForAdminAdd.MTDocumentID.EditAttributes) aria-describedby="x_MTDocumentID_help">
@Html.Raw(crewDocumentForAdminAdd.MTDocumentID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewDocumentForAdminAdd.MTDocumentID.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewDocumentForAdminAdd.MTDocumentID.Visible (end) *@
@if (crewDocumentForAdminAdd.Number.Visible) { // crewDocumentForAdminAdd.Number.Visible (begin)
    <div id="r_Number" @Html.Raw(crewDocumentForAdminAdd.Number.RowAttributes)>
        <label id="elh_CrewDocumentForAdmin_Number" for="x_Number" class="@(crewDocumentForAdminAdd.LeftColumnClass)"><template id="tpc_CrewDocumentForAdmin_Number">@Html.Raw(crewDocumentForAdminAdd.Number.Caption)@Html.Raw(crewDocumentForAdminAdd.Number.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewDocumentForAdminAdd.RightColumnClass)"><div @Html.Raw(crewDocumentForAdminAdd.Number.CellAttributes)>
<template id="tpx_CrewDocumentForAdmin_Number"><span id="el_CrewDocumentForAdmin_Number">
<input type="@(crewDocumentForAdminAdd.Number.InputTextType)" name="x_Number" id="x_Number" data-table="CrewDocumentForAdmin" data-field="x_Number" value="@Html.Raw(crewDocumentForAdminAdd.Number.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewDocumentForAdminAdd.Number.PlaceHolder))" data-format-pattern="@(crewDocumentForAdminAdd.Number.FormatPattern)"@Html.Raw(crewDocumentForAdminAdd.Number.EditAttributes) aria-describedby="x_Number_help">
@Html.Raw(crewDocumentForAdminAdd.Number.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewDocumentForAdminAdd.Number.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewDocumentForAdminAdd.Number.Visible (end) *@
@if (crewDocumentForAdminAdd.CountryOfIssue_CountryID.Visible) { // crewDocumentForAdminAdd.CountryOfIssue_CountryID.Visible (begin)
    <div id="r_CountryOfIssue_CountryID" @Html.Raw(crewDocumentForAdminAdd.CountryOfIssue_CountryID.RowAttributes)>
        <label id="elh_CrewDocumentForAdmin_CountryOfIssue_CountryID" for="x_CountryOfIssue_CountryID" class="@(crewDocumentForAdminAdd.LeftColumnClass)"><template id="tpc_CrewDocumentForAdmin_CountryOfIssue_CountryID">@Html.Raw(crewDocumentForAdminAdd.CountryOfIssue_CountryID.Caption)@Html.Raw(crewDocumentForAdminAdd.CountryOfIssue_CountryID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewDocumentForAdminAdd.RightColumnClass)"><div @Html.Raw(crewDocumentForAdminAdd.CountryOfIssue_CountryID.CellAttributes)>
<template id="tpx_CrewDocumentForAdmin_CountryOfIssue_CountryID"><span id="el_CrewDocumentForAdmin_CountryOfIssue_CountryID">
    <select
        id="x_CountryOfIssue_CountryID"
        name="x_CountryOfIssue_CountryID"
        class="form-select ew-select@(crewDocumentForAdminAdd.CountryOfIssue_CountryID.IsInvalidClass)"
        data-select2-id="fCrewDocumentForAdminadd_x_CountryOfIssue_CountryID"
        data-table="CrewDocumentForAdmin"
        data-field="x_CountryOfIssue_CountryID"
        data-value-separator="@(crewDocumentForAdminAdd.CountryOfIssue_CountryID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewDocumentForAdminAdd.CountryOfIssue_CountryID.PlaceHolder))"
        @Html.Raw(crewDocumentForAdminAdd.CountryOfIssue_CountryID.EditAttributes)>
        @(crewDocumentForAdminAdd.CountryOfIssue_CountryID.SelectOptionListHtml("x_CountryOfIssue_CountryID"))
    </select>
    @Html.Raw(crewDocumentForAdminAdd.CountryOfIssue_CountryID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewDocumentForAdminAdd.CountryOfIssue_CountryID.GetErrorMessage())</div>
@Html.Raw(crewDocumentForAdminAdd.CountryOfIssue_CountryID.Lookup.GetParamTag(crewDocumentForAdminAdd, "p_x_CountryOfIssue_CountryID"))
<script>
loadjs.ready("fCrewDocumentForAdminadd", function() {
    var options = { name: "x_CountryOfIssue_CountryID", selectId: "fCrewDocumentForAdminadd_x_CountryOfIssue_CountryID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewDocumentForAdminadd.lists.CountryOfIssue_CountryID?.lookupOptions.length) {
        options.data = { id: "x_CountryOfIssue_CountryID", form: "fCrewDocumentForAdminadd" };
    } else {
        options.ajax = { id: "x_CountryOfIssue_CountryID", form: "fCrewDocumentForAdminadd", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumInputLength = ew.selectMinimumInputLength;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewDocumentForAdmin.fields.CountryOfIssue_CountryID.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewDocumentForAdminAdd.CountryOfIssue_CountryID.Visible (end) *@
@if (crewDocumentForAdminAdd.DateOfIssue.Visible) { // crewDocumentForAdminAdd.DateOfIssue.Visible (begin)
    <div id="r_DateOfIssue" @Html.Raw(crewDocumentForAdminAdd.DateOfIssue.RowAttributes)>
        <label id="elh_CrewDocumentForAdmin_DateOfIssue" for="x_DateOfIssue" class="@(crewDocumentForAdminAdd.LeftColumnClass)"><template id="tpc_CrewDocumentForAdmin_DateOfIssue">@Html.Raw(crewDocumentForAdminAdd.DateOfIssue.Caption)@Html.Raw(crewDocumentForAdminAdd.DateOfIssue.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewDocumentForAdminAdd.RightColumnClass)"><div @Html.Raw(crewDocumentForAdminAdd.DateOfIssue.CellAttributes)>
<template id="tpx_CrewDocumentForAdmin_DateOfIssue"><span id="el_CrewDocumentForAdmin_DateOfIssue">
<input type="@(crewDocumentForAdminAdd.DateOfIssue.InputTextType)" name="x_DateOfIssue" id="x_DateOfIssue" data-table="CrewDocumentForAdmin" data-field="x_DateOfIssue" value="@Html.Raw(crewDocumentForAdminAdd.DateOfIssue.EditValue)" placeholder="@Html.Raw(HtmlEncode(crewDocumentForAdminAdd.DateOfIssue.PlaceHolder))" data-format-pattern="@(crewDocumentForAdminAdd.DateOfIssue.FormatPattern)"@Html.Raw(crewDocumentForAdminAdd.DateOfIssue.EditAttributes) aria-describedby="x_DateOfIssue_help">
@Html.Raw(crewDocumentForAdminAdd.DateOfIssue.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewDocumentForAdminAdd.DateOfIssue.GetErrorMessage())</div>
@if (!crewDocumentForAdminAdd.DateOfIssue.ReadOnly && !crewDocumentForAdminAdd.DateOfIssue.Disabled && !crewDocumentForAdminAdd.DateOfIssue.EditAttrs.Is("readonly") && !crewDocumentForAdminAdd.DateOfIssue.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fCrewDocumentForAdminadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fCrewDocumentForAdminadd", "x_DateOfIssue", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span></template>
</div></div>
    </div>
} @* crewDocumentForAdminAdd.DateOfIssue.Visible (end) *@
@if (crewDocumentForAdminAdd.PlaceOfIssue.Visible) { // crewDocumentForAdminAdd.PlaceOfIssue.Visible (begin)
    <div id="r_PlaceOfIssue" @Html.Raw(crewDocumentForAdminAdd.PlaceOfIssue.RowAttributes)>
        <label id="elh_CrewDocumentForAdmin_PlaceOfIssue" for="x_PlaceOfIssue" class="@(crewDocumentForAdminAdd.LeftColumnClass)"><template id="tpc_CrewDocumentForAdmin_PlaceOfIssue">@Html.Raw(crewDocumentForAdminAdd.PlaceOfIssue.Caption)@Html.Raw(crewDocumentForAdminAdd.PlaceOfIssue.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewDocumentForAdminAdd.RightColumnClass)"><div @Html.Raw(crewDocumentForAdminAdd.PlaceOfIssue.CellAttributes)>
<template id="tpx_CrewDocumentForAdmin_PlaceOfIssue"><span id="el_CrewDocumentForAdmin_PlaceOfIssue">
<input type="@(crewDocumentForAdminAdd.PlaceOfIssue.InputTextType)" name="x_PlaceOfIssue" id="x_PlaceOfIssue" data-table="CrewDocumentForAdmin" data-field="x_PlaceOfIssue" value="@Html.Raw(crewDocumentForAdminAdd.PlaceOfIssue.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewDocumentForAdminAdd.PlaceOfIssue.PlaceHolder))" data-format-pattern="@(crewDocumentForAdminAdd.PlaceOfIssue.FormatPattern)"@Html.Raw(crewDocumentForAdminAdd.PlaceOfIssue.EditAttributes) aria-describedby="x_PlaceOfIssue_help">
@Html.Raw(crewDocumentForAdminAdd.PlaceOfIssue.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewDocumentForAdminAdd.PlaceOfIssue.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewDocumentForAdminAdd.PlaceOfIssue.Visible (end) *@
@if (crewDocumentForAdminAdd.DateValidUntil.Visible) { // crewDocumentForAdminAdd.DateValidUntil.Visible (begin)
    <div id="r_DateValidUntil" @Html.Raw(crewDocumentForAdminAdd.DateValidUntil.RowAttributes)>
        <label id="elh_CrewDocumentForAdmin_DateValidUntil" for="x_DateValidUntil" class="@(crewDocumentForAdminAdd.LeftColumnClass)"><template id="tpc_CrewDocumentForAdmin_DateValidUntil">@Html.Raw(crewDocumentForAdminAdd.DateValidUntil.Caption)@Html.Raw(crewDocumentForAdminAdd.DateValidUntil.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewDocumentForAdminAdd.RightColumnClass)"><div @Html.Raw(crewDocumentForAdminAdd.DateValidUntil.CellAttributes)>
<template id="tpx_CrewDocumentForAdmin_DateValidUntil"><span id="el_CrewDocumentForAdmin_DateValidUntil">
<input type="@(crewDocumentForAdminAdd.DateValidUntil.InputTextType)" name="x_DateValidUntil" id="x_DateValidUntil" data-table="CrewDocumentForAdmin" data-field="x_DateValidUntil" value="@Html.Raw(crewDocumentForAdminAdd.DateValidUntil.EditValue)" placeholder="@Html.Raw(HtmlEncode(crewDocumentForAdminAdd.DateValidUntil.PlaceHolder))" data-format-pattern="@(crewDocumentForAdminAdd.DateValidUntil.FormatPattern)"@Html.Raw(crewDocumentForAdminAdd.DateValidUntil.EditAttributes) aria-describedby="x_DateValidUntil_help">
@Html.Raw(crewDocumentForAdminAdd.DateValidUntil.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewDocumentForAdminAdd.DateValidUntil.GetErrorMessage())</div>
@if (!crewDocumentForAdminAdd.DateValidUntil.ReadOnly && !crewDocumentForAdminAdd.DateValidUntil.Disabled && !crewDocumentForAdminAdd.DateValidUntil.EditAttrs.Is("readonly") && !crewDocumentForAdminAdd.DateValidUntil.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fCrewDocumentForAdminadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fCrewDocumentForAdminadd", "x_DateValidUntil", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span></template>
</div></div>
    </div>
} @* crewDocumentForAdminAdd.DateValidUntil.Visible (end) *@
@if (crewDocumentForAdminAdd.Image.Visible) { // crewDocumentForAdminAdd.Image.Visible (begin)
    <div id="r_Image" @Html.Raw(crewDocumentForAdminAdd.Image.RowAttributes)>
        <label id="elh_CrewDocumentForAdmin_Image" class="@(crewDocumentForAdminAdd.LeftColumnClass)"><template id="tpc_CrewDocumentForAdmin_Image">@Html.Raw(crewDocumentForAdminAdd.Image.Caption)@Html.Raw(crewDocumentForAdminAdd.Image.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewDocumentForAdminAdd.RightColumnClass)"><div @Html.Raw(crewDocumentForAdminAdd.Image.CellAttributes)>
<template id="tpx_CrewDocumentForAdmin_Image"><span id="el_CrewDocumentForAdmin_Image">
<div id="fd_x_Image" class="fileinput-button ew-file-drop-zone">
    <input
        type="file"
        id="x_Image"
        name="x_Image"
        class="form-control ew-file-input"
        title="@(crewDocumentForAdminAdd.Image.Title)"
        lang="@(CurrentLanguageID)"
        data-table="CrewDocumentForAdmin"
        data-field="x_Image"
        data-size="100"
        data-accept-file-types="@(crewDocumentForAdminAdd.Image.AcceptFileTypes)"
        data-max-file-size="@(crewDocumentForAdminAdd.Image.UploadMaxFileSize)"
        data-max-number-of-files="null"
        data-disable-image-crop="@(crewDocumentForAdminAdd.Image.ImageCropper ? 0 : 1)"
        aria-describedby="x_Image_help"
        @Html.Raw((crewDocumentForAdminAdd.Image.ReadOnly || crewDocumentForAdminAdd.Image.Disabled) ? " disabled" : "")
        @Html.Raw(crewDocumentForAdminAdd.Image.EditAttributes)
    >
    <div class="text-muted ew-file-text">@Html.Raw(Language.Phrase("ChooseFile"))</div>
</div>
@Html.Raw(crewDocumentForAdminAdd.Image.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewDocumentForAdminAdd.Image.GetErrorMessage())</div>
<input type="hidden" name="fn_x_Image" id= "fn_x_Image" value="@(crewDocumentForAdminAdd.Image.Upload.FileName)">
<input type="hidden" name="fa_x_Image" id= "fa_x_Image" value="0">
<table id="ft_x_Image" class="table table-sm float-start ew-upload-table"><tbody class="files"></tbody></table>
</span></template>
</div></div>
    </div>
} @* crewDocumentForAdminAdd.Image.Visible (end) *@
</div><!-- /page* -->
<div id="tpd_CrewDocumentForAdminadd" class="ew-custom-template"></div>
<template id="tpm_CrewDocumentForAdminadd">
<div id="ct_crewDocumentForAdminAdd">    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewPersonalDataForAdminEdit")">
                @(CurrentLanguage == "en-US" ? "PERSONAL DATA" : "DATA PERSONAL")
            </a>     
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewDocumentForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "DOCUMENTS" : "DOKUMEN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewBankAccountForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "BANK ACCOUNT" : "REKENING BANK")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFamilyForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "FAMILY" : "KELUARGA")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFormalEducationForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "FORMAL EDUCATION" : "PENDIDIKAN FORMAL")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalCertificateForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "MEDICAL CERTIFICATE / TEST" : "SERTIFIKAT / TES MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewCertificateForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "CERTIFICATES AND QUALIFICATIONS" : "SERTIFIKAT DAN KUALIFIKASI")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewExperienceForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "SEA EXPERIENCE" : "PENGALAMAN BERLAYAR")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewAppraisalForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "APPRAISALS" : "PENILAIAN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalHistoryForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "MEDICAL HISTORY" : "RIWAYAT MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewGeneralDataForAdminEdit")">
                @(CurrentLanguage == "en-US" ? "GENERAL" : "UMUM")
            </a>
        </li>
    </ul>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_MTDocumentID" class="mb-2 row">
                <label for="x_MTDocumentID" class="col-form-label">@Html.Raw(crewDocumentForAdminAdd.MTDocumentID.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div>
                    <span id="el_CrewDocumentForAdmin_MTDocumentID">
                        <select
                            id="x_MTDocumentID"
                            name="x_MTDocumentID"
                            class="form-select ew-select@(crewDocumentForAdminAdd.MTDocumentID.IsInvalidClass)"
                            data-select2-id="fCrewDocumentForAdminadd_x_MTDocumentID"
                            data-table="CrewDocumentForAdmin"
                            data-field="x_MTDocumentID"
                            data-value-separator="@(crewDocumentForAdminAdd.MTDocumentID.DisplayValueSeparatorAttribute)"
                            data-placeholder="@(HtmlEncode(crewDocumentForAdminAdd.MTDocumentID.PlaceHolder))"
                            @Html.Raw(crewDocumentForAdminAdd.MTDocumentID.EditAttributes)>
                        </select>
                        @Html.Raw(crewDocumentForAdminAdd.MTDocumentID.GetCustomMessage)
                        <div class="invalid-feedback">@Html.Raw(crewDocumentForAdminAdd.MTDocumentID.GetErrorMessage())</div>
                        @Html.Raw(crewDocumentForAdminAdd.MTDocumentID.Lookup.GetParamTag(crewDocumentForAdminAdd, "p_x_MTDocumentID"))
                    </span>
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_Number" class="mb-2 row">
                <label for="x_Number" class="col-form-label">@Html.Raw(crewDocumentForAdminAdd.Number.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewDocumentForAdmin_Number"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_CountryOfIssue_CountryID" class="mb-2 row">
                <label for="x_CountryOfIssue_CountryID" class="col-form-label">@Html.Raw(crewDocumentForAdminAdd.CountryOfIssue_CountryID.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewDocumentForAdmin_CountryOfIssue_CountryID"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_PlaceOfIssue" class="mb-2 row">
                <label for="x_PlaceOfIssue" class="col-form-label">@Html.Raw(crewDocumentForAdminAdd.PlaceOfIssue.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewDocumentForAdmin_PlaceOfIssue"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-6">
                    <div id="r_DateOfIssue" class="mb-2 row">
                        <label for="x_DateOfIssue" class="col-form-label">@Html.Raw(crewDocumentForAdminAdd.DateOfIssue.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                        <div><slot class="ew-slot" name="tpx_CrewDocumentForAdmin_DateOfIssue"></slot></div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div id="r_DateValidUntil" class="mb-2 row">
                        <label for="x_DateValidUntil" class="col-form-label">@Html.Raw(crewDocumentForAdminAdd.DateValidUntil.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                        <div><slot class="ew-slot" name="tpx_CrewDocumentForAdmin_DateValidUntil"></slot></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_Image" class="mb-2 row">
                <label for="x_Image" class="col-form-label">
                    @Html.Raw(crewDocumentForAdminAdd.Image.Caption) @(CurrentLanguage == "en-US" ? "(jpg/jpeg/png/pdf max 2 MB)" : "(jpg/jpeg/png/pdf maks 2 MB)")<i class="fa-solid fa-asterisk ew-required"></i>
                </label>
                <div><slot class="ew-slot" name="tpx_CrewDocumentForAdmin_Image"></slot></div>
            </div>
        </div>
    </div>
    <div class="row"><!-- buttons .row -->
        <div class="d-flex mb-2"><!-- buttons offset -->
            <button class="btn btn-primary ew-btn ms-auto primary-black-clr gray-bg" name="btn-add-entry" id="btn-add-entry">
                @(CurrentLanguage == "en-US" ? "Add Entry" : "Tambah")
            </button>
        </div><!-- /buttons offset -->
    </div>
    <div class="table-responsive">
        <table class="table table-bordered table-hover table-sm ew-table table-head-fixed" id="ForAdminTable" data-isset="true">
            <thead>
                <tr class="ew-table-header">
                    <th class="ew-list-option-header w-1" data-name="button"></th>
                    <th class="ew-list-option-header text-nowrap" data-name="sequence"><span></span></th>
                    <th data-name="MTDocumentID" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewDocumentForAdminAdd.MTDocumentID.Caption)
                    </th>
                    <th data-name="Number" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewDocumentForAdminAdd.Number.Caption)
                    </th>
                    <th data-name="CountryOfIssue_CountryID" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewDocumentForAdminAdd.CountryOfIssue_CountryID.Caption)
                    </th>              
                    <th data-name="DateOfIssue" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewDocumentForAdminAdd.DateOfIssue.Caption)
                    </th>
                    <th data-name="PlaceOfIssue" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewDocumentForAdminAdd.PlaceOfIssue.Caption)
                    </th>
                    <th data-name="DateValidUntil" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewDocumentForAdminAdd.DateValidUntil.Caption)
                    </th>
                    <th data-name="Image" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewDocumentForAdminAdd.Image.Caption)
                    </th>              
                    <th data-name="CreatedByUserID" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewDocumentForAdminAdd.CreatedByUserID.Caption)
                    </th>
                    <th data-name="CreatedDateTime" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewDocumentForAdminAdd.CreatedDateTime.Caption)
                    </th>
                    <th data-name="LastUpdatedByUserID" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewDocumentForAdminAdd.LastUpdatedByUserID.Caption)
                    </th>
                    <th data-name="LastUpdatedDateTime" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewDocumentForAdminAdd.LastUpdatedDateTime.Caption)
                    </th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
    <div id="r_MTCrewID" class="mb-3 row">
        <label for="x_MTCrewID" class="col-sm-2 col-form-label">@Html.Raw(crewDocumentForAdminAdd.MTCrewID.Caption)</label>
        <div class="col-sm-10"><slot class="ew-slot" name="tpx_CrewDocumentForAdmin_MTCrewID"></slot></div>
    </div>
    <div id="proceed-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="proceed-modal-dialog-title" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="proceed-modal-dialog-title" class="modal-title">
                        @(CurrentLanguage == "en-US" ? "Warning" : "Peringatan")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p> 
                        @{
                            if (CurrentLanguage == "en-US")
                            {
                                <span>There are error(s) in this tab.</span><br/>
                                <span>If you choose to Proceed, any unsaved data will be lost.</span><br/>
                                <span>Do you want to Proceed?</span>
                            }
                            else
                            {
                                <span>Masih ada error di tab ini.</span><br/>
                                <span>Jika Anda memilih Lanjutkan, data yang belum disimpan akan hilang.</span><br/>
                                <span>Apakah Anda ingin melanjutkan?</span>
                            }
                        }
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger ew-btn" id="btn-proceed" type="button">
                        @(CurrentLanguage == "en-US" ? "Proceed" : "Lanjutkan")
                    </button>
                    <button class="btn btn-default ew-btn" id="btn-proceed-cancel" type="button" data-bs-dismiss="modal">
                        @(CurrentLanguage == "en-US" ? "Cancel" : "Batal")
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div id="loading-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-center mb-0">
                        @(CurrentLanguage == "en-US" ? "Saving..." : "Menyimpan...")
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div id="delete-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="delete-modal-dialog-title" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="delete-modal-dialog-title" class="modal-title">
                        @(CurrentLanguage == "en-US" ? "Confirmation" : "Konfirmasi")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        @(CurrentLanguage == "en-US" ? "Are you sure you want to delete?" : "Anda yakin ingin menghapus?")
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary ew-btn" id="btn-delete" type="button">
                        @(CurrentLanguage == "en-US" ? "Yes" : "Iya")
                    </button>
                    <button class="btn btn-default ew-btn" id="btn-delete-cancel" type="button" data-bs-dismiss="modal">
                        @(CurrentLanguage == "en-US" ? "No" : "Tidak")
                    </button>
                </div>
            </div>
        </div>
    </div>
    </div>
</template>
@{ crewDocumentForAdminAdd.CloseRecordset(); }
@Html.Raw(crewDocumentForAdminAdd.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(crewDocumentForAdminAdd.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fCrewDocumentForAdminadd">@Html.Raw(Language.Phrase("AddBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fCrewDocumentForAdminadd" data-href="@AppPath(crewDocumentForAdminAdd.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(crewDocumentForAdminAdd.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
<script class="ew-apply-template">
loadjs.ready(ew.applyTemplateId, function() {
    var $ = jQuery;
    ew.templateData = { rows: @Html.Raw(ConvertToJson(crewDocumentForAdminAdd.Rows)) };
    ew.applyTemplate("tpd_CrewDocumentForAdminadd", "tpm_CrewDocumentForAdminadd", "CrewDocumentForAdminadd", "@(crewDocumentForAdminAdd.Export)", "CrewDocumentForAdmin", ew.templateData.rows[0], @(crewDocumentForAdminAdd.IsModal ? "true" : "false"));
    loadjs.done("customtemplate");
});
</script>
@crewDocumentForAdminAdd.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("CrewDocumentForAdmin");
});
</script>
<script>
loadjs.ready("load", function() {
    // Startup script
    // Write your table-specific startup script here
    // document.write("page loaded");

    // Get the current URL
    const currentUrlObject = new URL(window.location.href);
    // get the current URL without Add or Edit for assigning active class in tabs
    const currentUrlWithoutAddEdit = currentUrlObject.href.replace(/Add|Edit/g, "");
    // Create a new URLSearchParams object based on the current URL's search parameters
    const urlQueryParams = new URLSearchParams(currentUrlObject.search);
    // Extract the value of the crewID query parameter
    const currentlyEditedCrewID = urlQueryParams.get('crewID');
    const selectedLanguage = ew.vars['languages']['languages'].filter(obj => obj.selected === true)[0];
    const parentUrl = ew.PATH_BASE;
    const tableName = "CrewDocumentForAdmin";
    const pageType = "add";
    const pageTypeCapital = "Add";
    const formID = `f${tableName}${pageType}`;
    const addEntryUrl = `${parentUrl}${tableName}${pageTypeCapital}?crewID=${currentlyEditedCrewID}`;
    let isChangeTabApproved = false;
    const adminAndEmployeeStatusApi = 'get-admin-and-employee-status';
    $.ajax({
        url: `${parentUrl}api/Registration/${adminAndEmployeeStatusApi}`,
        method: 'GET',
        data: {
            crewID: currentlyEditedCrewID
        },
        success: function(response) {
            if (response.success) {
                const isAdmin = response.data.IsAdmin;
                if (isAdmin) {
                    if (currentlyEditedCrewID === null) {
                        window.location.replace(`${ew.PATH_BASE}RegistrationEdit/-1`);
                    }
                    const customCancelButton = $('<button/>', {
                        'class': 'btn btn-danger ew-btn ms-auto primary-red-bg primary-white-clr',
                        'id': 'btn-custom-cancel',
                        'type': 'button',
                        'text': `${ew.language.phrase("CancelBtn")}`,
                    }).click(function() {
                        if (window[formID].modified) {
                            ew.prompt(ew.language.phrase("ConfirmCancel"), result => {
                                if (result) {
                                    isChangeTabApproved = true;
                                    window.location.href = `${ew.PATH_BASE}RegistrationList`;
                                }
                              });
                        } else {
                            isChangeTabApproved = true;
                            window.location.href = `${ew.PATH_BASE}RegistrationList`;
                        }
                    });
                    $('#btn-cancel').after(customCancelButton);
                    $('#btn-cancel').remove();
                } else {
                    if (currentlyEditedCrewID === null) {
                        window.location.replace(`${ew.PATH_BASE}index`);
                    }
                    $('#btn-cancel').remove();
                }
            } else {
                ew.showToast(response.errorMessage);
            }
        },
        error: function(xhr, textStatus, errorThrown) {
            ew.showToast(errorThrown);
        }
    });
    const entryButton = $('<button/>', {
        'class': 'btn btn-primary ew-btn ms-auto primary-black-clr gray-bg',
        'id': 'btn-entry',
        'type': 'button',
        'text': (selectedLanguage.id === 'en-US') ? `Add Entry` : `Tambah`
    }).click(function() {
        const validateAddEntryResult = validateAddEntry({ isAllEmptyAllowed: false });
        if (validateAddEntryResult === 'valid') {
            $('#loading-modal-dialog').modal('show');
            const targetUrlRelative = addEntryUrl;
            addEntry({ redirectUrlWhenSuccess: targetUrlRelative });
        } else {
            scrollToFirstInvalidInput();
        }
    });
    $('#btn-add-entry').after(entryButton);
    $('#btn-add-entry').remove();
    $('#btn-delete').click(function() {
        const crewDocumentID = $(this).attr('crew-document-id');
        $.ajax({
            url: `${parentUrl}api/delete/${tableName}/${crewDocumentID}`,
            type: 'GET',
            success: function(res) {
                if (res && res.success) {
                    $('#delete-modal-dialog').modal('hide');
                    isChangeTabApproved = true;
                    proceedToLink(addEntryUrl);
                } else {
                    $('#delete-modal-dialog').modal('hide');
                    ew.showToast(res.failureMessage);
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                ew.showToast(errorThrown);
                $('#delete-modal-dialog').modal('hide');
            }
        });
    });

    // to auto clear error message when focus for file fields
    $('#x_Image').on('focus', function() {
        $(this).removeClass('is-invalid');
    });
    $('#ft_x_Image button').on("click", function () {
      window[formID].modified = true;
    });

    // Iterate over each anchor element inside the nav-tabs
    $(".nav-tabs .nav-item a").each(function() {
        const href = $(this).attr("href");
        const hrefWithoutAddEdit = href.replace(/Add|Edit/g, "");
        // Check if the href contains current page's url
        if (currentUrlWithoutAddEdit.includes(hrefWithoutAddEdit)) {
            // add class and attribute
            $(this).addClass("active");
            $(this).attr("aria-current", "page");
        }
        // Check if the href contains "Edit" or "Add"
        if (href.includes("Edit")) {
            // Add "/" and the currently edited crew ID to the href
            const newHref = href + "/" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        } else if (href.includes("Add")) {
            // Add "?crewID=" and the currently edited crew ID to the href
            const newHref = href + "?crewID=" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        }
    });

    // get bpjs number from api
    const bpjsNumberApi = 'get-bpjs-number';
    function getBPJSNumber(documentTypeText) {
        if (documentTypeText === 'BPJS Kesehatan' || documentTypeText === 'BPJS Ketenagakerjaan') {
            $.ajax({
                url: `${parentUrl}api/Registration/${bpjsNumberApi}`,
                method: 'GET',
                data: { crewID: currentlyEditedCrewID },
                success: function(response) {
                    if (response.success) {
                        const bpjsKesehatanNumber = response.data.bpjsKesehatanNumber;
                        const bpjsKetenagakerjaanNumber = response.data.bpjsKetenagakerjaanNumber;
                        $("#x_Number").prop("readonly", true);
                        if (documentTypeText === 'BPJS Kesehatan') {
                            if (bpjsKesehatanNumber === '') {
                                const errorMessage = (selectedLanguage.id === 'en-US') ? "Please fill BPJS Kesehatan Number in the Personal Data tab first" : "Silahkan mengisi dahulu Nomor BPJS Kesehatan di tab Data Personal";
                                ew.showToast(errorMessage);
                            } else {
                                $("#x_Number").val(bpjsKesehatanNumber);
                            }
                        } else { // documentTypeText === 'BPJS Ketenagakerjaan'
                            if (bpjsKetenagakerjaanNumber === '') {
                                const errorMessage = (selectedLanguage.id === 'en-US') ? "Please fill BPJS Ketenagakerjaan Number in the Personal Data tab first" : "Silahkan mengisi dahulu Nomor BPJS Ketenagakerjaan di tab Data Personal";
                                ew.showToast(errorMessage);
                            } else {
                                $("#x_Number").val(bpjsKetenagakerjaanNumber);
                            }
                        }
                    } else {
                        ew.showToast(response.errorMessage);
                    }
                },
                error: (xhr, textStatus, errorThrown) => ew.showToast(errorThrown),
            });
        } else {
            $("#x_Number").prop("readonly", false);
        }
    }

    // initialize select options START
    let options = { name: "x_MTDocumentID", selectId: `${formID}_x_MTDocumentID` };
    const el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    options.minimumInputLength = ew.selectMinimumInputLength;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables[tableName].fields.MTDocumentID.selectOptions);
    ew.createSelect(options);
    const documentOptionsAddPageApi = 'crew-document-options-add';
    $.ajax({
        url: `${parentUrl}api/Registration/${documentOptionsAddPageApi}`,
        method: 'GET',
        data: {
            crewID: currentlyEditedCrewID
        },
        success: function(response) {
            if (response.success) {
                const documents = response.data;
                for (const document of documents) {
                    $('#x_MTDocumentID').append(new Option(document.Type, document.ID, false, false)).trigger('change');
                }
                $('#x_MTDocumentID').val(null).trigger('change');
                window[formID].modified = false;
                $('#x_MTDocumentID').on('select2:select', (e) => getBPJSNumber(e.params.data.text));
            } else {
                ew.showToast(response.errorMessage);
            }
        },
        error: function(xhr, textStatus, errorThrown) {
            ew.showToast(errorThrown);
        }
    });
    // initialize select options END

    // start code for auto capitalize first letter of each word
    $('#x_PlaceOfIssue').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    // end code for auto capitalize first letter of each word

    // Target the ol element that has breadcrumb class
    const $breadCrumbOl = $('.breadcrumb').first();

    // Delete the ol element that has breadcrumb class
    $breadCrumbOl.remove();
    $('#btn-action').remove();
    $('.ew-buttons > .col-sm-10').removeClass('col-sm-10').addClass('d-flex mb-3');
    $('.ew-buttons > .offset-sm-2').removeClass('offset-sm-2');

    //  programatically change the value of MTCrewID input and then hide it
    $('#x_MTCrewID').val(currentlyEditedCrewID);
    $('div#r_MTCrewID').hide();

    // get list of crew documents via API
    const uploadFolderName = "uploads";
    const baseUrl = currentUrlObject.origin + ew.PATH_BASE;
    const apiEndpoint = 'crew-document-for-admin';
    $.ajax({
      url: `${parentUrl}api/Registration/${apiEndpoint}`,
      method: 'GET',
      data: {
        crewID: currentlyEditedCrewID
      },
      success: function(response) {
        if (response.success) {
          // Parse the data in the response
          const dataArray = response.data;
          const tbody = $('#ForAdminTable tbody'); // select the tbody element
          if (dataArray.length > 0) {
              const tableName = "CrewDocumentForAdmin";
              for (let rowIndex = 0; rowIndex < dataArray.length; rowIndex++) {
                const row = dataArray[rowIndex];
                const rowID = row['ID'];
                delete row['ID']; // delete ID for easier looping for table columns
                const tr = $('<tr>'); // create a new tr element 

                // first td for dropdown
                const buttonsTd = $('<td>').addClass('ew-list-option-body w-1');
                const buttonDropdownDiv = $('<div>').addClass('btn-group btn-group-sm ew-btn-dropdown');
                const dropdownButton = $('<button>')
                    .addClass('btn-default btn dropdown-toggle')
                    .attr('type', 'button')
                    .attr('data-title', 'Options')
                    .attr('data-bs-toggle', 'dropdown')
                    .attr('data-bs-auto-close', 'true');
                const dropdownButtonIcon = $('<i>').addClass('fa-solid fa-bars ew-icon').attr('data-phrase', 'ButtonListOptions');
                const dropdownButtonIconSpan = $('<span>').addClass('visually-hidden').text('Options');
                const dropdownUl = $('<ul>').addClass('dropdown-menu ew-dropdown-menu ew-list-options');
                const firstDropdownLi = $('<li>');
                const editUrl = `${parentUrl}${tableName}Edit/${rowID}?crewID=${currentlyEditedCrewID}`;
                const editAnchor = $('<a>')
                    .addClass('ew-row-link ew-edit dropdown-item')
                    .attr('data-caption', ew.language.phrase("EditLink"))
                    .attr('href', editUrl)
                    .on('click', function(event) {
                        event.preventDefault();
                        isChangeTabApproved = true;
                        proceedToLink(editUrl);
                    });
                const editAnchorIcon = $('<i>').addClass('fa-solid fa-pen ew-icon me-2').attr('data-phrase', 'EditLink');
                const editAnchorSpan = $('<span>').addClass('visually-hidden').text(ew.language.phrase("EditLink"));
                const editAnchorText= ew.language.phrase("EditLink");
                const secondDropdownLi = $('<li>');
                const deleteAnchor = $('<a>')
                    .addClass('ew-row-link dropdown-item')
                    .attr('data-caption', ew.language.phrase("DeleteLink"))
                    .on('click', function(event) {
                        event.preventDefault();
                        $('#btn-delete').attr('crew-document-id', rowID);
                        $('#delete-modal-dialog').modal('show');
                    });
                const deleteAnchorIcon = $('<i>').addClass('fa-solid fa-trash ew-icon me-2').attr('data-phrase', 'DeleteLink');
                const deleteAnchorSpan = $('<span>').addClass('visually-hidden').text(ew.language.phrase("DeleteLink"));
                const deleteAnchorText= ew.language.phrase("DeleteLink");
                deleteAnchorIcon.append(deleteAnchorSpan);
                deleteAnchor.append(deleteAnchorIcon);
                deleteAnchor.append(deleteAnchorText);
                secondDropdownLi.append(deleteAnchor);
                editAnchorIcon.append(editAnchorSpan);
                editAnchor.append(editAnchorIcon);
                editAnchor.append(editAnchorText);
                firstDropdownLi.append(editAnchor);
                dropdownUl.append(firstDropdownLi);
                dropdownUl.append(secondDropdownLi);
                dropdownButtonIcon.append(dropdownButtonIconSpan);
                dropdownButton.append(dropdownButtonIcon);
                buttonDropdownDiv.append(dropdownButton);
                buttonDropdownDiv.append(dropdownUl);
                buttonsTd.append(buttonDropdownDiv);
                tr.append(buttonsTd);

                // second td for sequence
                const sequenceTd = $('<td>').addClass('ew-list-option-body text-nowrap').attr('data-name', 'sequence');
                const sequenceNumberString = (rowIndex + 1).toString() + '.';
                const sequenceSpan = $('<span>').text(sequenceNumberString);
                sequenceTd.append(sequenceSpan);
                tr.append(sequenceTd);

                // remaining td for each column
                for (const columnName of Object.keys(row)) {
                  const dataTd = $('<td>');
                  const columnValue = row[columnName];
                  if (columnName === "Image") {
                    dataTd.addClass("text-center");
                    const individualCodeNumber = columnValue.split('-')[0];
                    const imageUrl = `${baseUrl}${uploadFolderName}/${individualCodeNumber}/${columnValue}`;
                    const anchorLink = $('<a>', {
                      href: imageUrl,
                      target: '_blank'
                    });
                    anchorLink.text("Image");
                    dataTd.append(anchorLink);
                  } else if (columnName === 'DateOfIssue' || columnName === 'DateValidUntil') {
                    const dataSpan = $('<span class="text-nowrap">').text(columnValue);
                    dataTd.append(dataSpan);
                  } else {
                    const dataSpan = $('<span>').text(columnValue);
                    dataTd.append(dataSpan);
                  }
                  tr.append(dataTd);
                }
                tbody.append(tr);
              }
          } else {
              const columnsCount = $('#ForAdminTable th.ew-table-header-cell').length;
              for (let rowIndex = 0; rowIndex < 3; rowIndex++) {
                const tr = $('<tr>'); // create a new tr element 

                // 1 is for buttons dropdown(for edit) column and 1 for sequence number column
                const emptyTdWithColspan = $('<td>').html('&nbsp;').attr('colspan', 2); 
                tr.append(emptyTdWithColspan);
                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {
                  const emptyTd = $('<td>').html('&nbsp;');
                  tr.append(emptyTd);
                }
                tbody.append(tr);
              }
          }
        } else {
          // Handle the error
          ew.showToast(response.errorMessage);
        }
      },
      error: function(xhr, textStatus, errorThrown) {
        // Handle the error
        ew.showToast(errorThrown);
      }
    });
    const errorMessage = urlQueryParams.get('errorMessage');
    if (errorMessage !== null) {
        const decodedErrorMessage = decodeURIComponent(errorMessage);
        ew.showToast(decodedErrorMessage);
        urlQueryParams.delete('errorMessage');
        currentUrlObject.search = urlQueryParams.toString();
        history.pushState(null, '', currentUrlObject);
    }

    // AUTO SAVE WHEN MOVING FROM THIS TAB
    $(window).on('beforeunload', function(event) {
        if (!isChangeTabApproved && window[formID].modified) {
            event.preventDefault();
            event.returnValue = '';
            return '';
        }
    });
    $("#btn-proceed").click(function() {
        isChangeTabApproved = true;
        const targetUrlRelative = $(this).attr('target-url-relative');
        $('#approve-modal-dialog').modal('hide');
        proceedToLink(targetUrlRelative);
    });
    $('ul.nav.nav-tabs li.nav-item a.nav-link').on('click', function(event) {
        event.preventDefault();
        const targetUrlRelative = $(this).attr('href');
        if (window[formID].modified) {
            const validateAddEntryResult = validateAddEntry({ isAllEmptyAllowed: true });
            if (validateAddEntryResult === 'valid') {
                $('#loading-modal-dialog').modal('show');
                addEntry({ redirectUrlWhenSuccess: targetUrlRelative });
            } else if (validateAddEntryResult === 'empty') {
                isChangeTabApproved = true;
                proceedToLink(targetUrlRelative);
            } else if (validateAddEntryResult === 'invalid') {
                scrollToFirstInvalidInput();
                $('#btn-proceed').attr('target-url-relative', targetUrlRelative);
                $('#proceed-modal-dialog').modal('show');
            }
        } else {
            isChangeTabApproved = true;
            proceedToLink(targetUrlRelative);
        }
    });
    function proceedToLink(targetUrlRelative) {
        const baseUrl = new URL(window.location.href).origin;
        const targetUrl = new URL(baseUrl + targetUrlRelative);
        window.location.href = targetUrl.href;
    }
    function scrollToFirstInvalidInput() {
        const invalidInput = $("input.is-invalid:first");
        if (invalidInput.length > 0) { // Check if an invalid input is found
            const offset = invalidInput.offset().top; // Calculate the offset of the invalid input element from the top of the page
            const windowHeight = $(window).height(); // Calculate the height of the viewport
            const scrollPosition = offset - (windowHeight / 2); // Calculate the scroll position to center the invalid input element
            $("html, body").animate({ // Animate the scroll to the center position
                scrollTop: scrollPosition
            }, 1000); // Adjust the duration as needed (in milliseconds)
        }
    }
    function addEntry({ redirectUrlWhenSuccess }) {
        isChangeTabApproved = true;
        let formData = $(`form#${formID}`).serialize();
        $('input[type="checkbox"]').each(function() {
            // Jika checkbox tidak dicentang dan tidak ada di hasil serialize(),
            // tambahkan nilai 0 ke hasil serialize()
            if (!this.checked && formData.indexOf(this.name) === -1) {
                formData += '&' + this.name + '=0';
            }
        });
        $.ajax({
            url: addEntryUrl,
            type: 'POST',
            data: formData,
            success: function(res) {
                const $errorDiv = $(res).find('div.ew-error'); // res is a string containing html document
                $('#loading-modal-dialog').modal('hide');
                if ($errorDiv.length > 0) {
                    ew.showToast($errorDiv.text());
                } else {
                    proceedToLink(redirectUrlWhenSuccess);
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                $('#loading-modal-dialog').modal('hide');
                isChangeTabApproved = false;
                ew.showToast(errorThrown);
            }
        });
    }
    function validateAddEntry({ isAllEmptyAllowed }) {
        let formErrorCount = 0;
        let formEmptyCount = 0;
        let isNotEmpty = true;
        const emptyFieldNames = [];
        const emptyFileFieldNames = [];
        function validateRequiredField(fieldName) {
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (fieldValue === '' || fieldValue === null) {
                return false;
            } else {
                return true;
            }
        }
        function validateRequiredFileField(fieldName) {
            const fieldNameWithPrefix = `fn_x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (fieldValue === '') {
                return false;
            } else {
                return true;
            }
        }
        function validateDateField(fieldName) {
            const errorMessage = (selectedLanguage.id === 'en-US') ? 'Incorrect date (dd MMM yyyy)' : 'Tanggal tidak benar (dd MMM yyyy)';
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            const dateParts = fieldValue.split(' ');
            const day = parseInt(dateParts[0], 10);
            const monthNamesEnglish = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            const monthNamesIndonesian = ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Agu', 'Sep', 'Okt', 'Nov', 'Des'];
            const month = (selectedLanguage.id === 'en-US') ? monthNamesEnglish.indexOf(dateParts[1]) : monthNamesIndonesian.indexOf(dateParts[1]);
            const year = parseInt(dateParts[2], 10);
            let valid = false;
            if (year >= 1900 && year <= 9999 && month >= 0 && day >= 1 && day <= 31) {
                switch (month) {
                    case 1: // February
                        // Check for leap year
                        valid = day <= (((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) ? 29 : 28);
                        break;
                    case 3: // April
                    case 5: // June
                    case 8: // September
                    case 10: // November
                        valid = day <= 30;
                        break;
                    default:
                        valid = true;
                        break;
                }
            }
            if (!valid) {
                window[formID].fields[fieldName].addError({ custom: errorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessage });
                return false;
            } else {
                return true;
            }
        }
        function validateFieldWithRegex(fieldName, errorMessage, regex) {
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (!regex.test(fieldValue)) {  
                window[formID].fields[fieldName].addError({ custom: errorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessage });
                return false;
            } else {
                return true;
            }
        }
        function displayRequiredFieldError(fieldName) {
            const errorMessage = (selectedLanguage.id === 'en-US') ? "Please enter required field" : "Masukkan input yang dibutuhkan";
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldCaption = $(`label[for=${fieldNameWithPrefix}]`).text();
            const errorMessageWithFieldName = `${errorMessage} - ${fieldCaption}`;
            window[formID].fields[fieldName].addError({ custom: errorMessageWithFieldName });
            window[formID].fields[fieldName].updateFeedback();
            window[formID].addError(fieldName, { custom: errorMessageWithFieldName });
        }
        function displayRequiredFileFieldError(fieldName) {
            displayRequiredFieldError(fieldName);
            const fieldNameWithPrefix = `x_${fieldName}`;
            $(`#${fieldNameWithPrefix}`).addClass('is-invalid');
        }
        const noDigitsRegex = /^[^0-9]+$/;
        const noDigitsRegexErrorMessage = (selectedLanguage.id === 'en-US') ? "Must not contain digits" : "Tidak boleh mengandung angka";
        isNotEmpty = validateRequiredField("MTDocumentID");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("MTDocumentID");
            } else {
                displayRequiredFieldError("MTDocumentID");
            }
        }
        isNotEmpty = validateRequiredField("Number");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("Number");
            } else {
                displayRequiredFieldError("Number");
            }
        }
        isNotEmpty = validateRequiredField("CountryOfIssue_CountryID");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("CountryOfIssue_CountryID");
            } else {
                displayRequiredFieldError("CountryOfIssue_CountryID");
            }
        }
        isNotEmpty = validateRequiredField("PlaceOfIssue");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("PlaceOfIssue");
            } else {
                displayRequiredFieldError("PlaceOfIssue");
            }
        } else {
            formErrorCount += validateFieldWithRegex("PlaceOfIssue",  noDigitsRegexErrorMessage, noDigitsRegex) ? 0 : 1;
        }
        isNotEmpty = validateRequiredField("DateOfIssue");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("DateOfIssue");
            } else {
                displayRequiredFieldError("DateOfIssue");
            }
        } else {
            formErrorCount += validateDateField("DateOfIssue") ? 0 : 1;
        }
        isNotEmpty = validateRequiredField("DateValidUntil");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("DateValidUntil");
            } else {
                displayRequiredFieldError("DateValidUntil");
            }
        } else {
            formErrorCount += validateDateField("DateValidUntil") ? 0 : 1;
        }
        isNotEmpty = validateRequiredFileField("Image");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFileFieldNames.push("Image");
            } else {
                displayRequiredFileFieldError("Image");
            }
        }
        if (formEmptyCount === 7) {
            return 'empty';
        }
        if (emptyFieldNames.length > 0) {
            for (const fieldName of emptyFieldNames) {
                displayRequiredFieldError(fieldName);
            }
        }
        if (emptyFileFieldNames.length > 0) {
            for (const fieldName of emptyFileFieldNames) {
                displayRequiredFileFieldError(fieldName);
            }
        }
        if (formErrorCount > 0) {
            return 'invalid';
        } else {
            return 'valid';
        }
    }

    // gmandayu: notification need to read.
    const getUnreadNotificationUrl = `${parentUrl}api/Notification/unread-notification`;
    function loadPage() {
        $.ajax({
            url: getUnreadNotificationUrl,
            method: 'GET',
            success: function(response) {
                const notificationIcon = document.querySelector('.nav-icon.fa-bell');
                if(response.success)
                {
                    notificationIcon.classList.add('animate');
                }
                else 
                {
                    notificationIcon.classList.remove('animate');
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                console.error('Kesalahan saat memuat notifikasi:', errorThrown);
            }
        });
    }
    $(document).ready(function() {
        loadPage();
    });
});
</script>
