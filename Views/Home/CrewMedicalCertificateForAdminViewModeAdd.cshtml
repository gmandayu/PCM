@{
    // View
    View = this;

    // Check action result
    if (crewMedicalCertificateForAdminViewModeAdd.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!crewMedicalCertificateForAdminViewModeAdd.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(crewMedicalCertificateForAdminViewModeAdd.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { CrewMedicalCertificateForAdminViewMode: currentTable } });
var currentPageID = ew.PAGE_ID = "add";
var currentForm;
var fCrewMedicalCertificateForAdminViewModeadd;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fCrewMedicalCertificateForAdminViewModeadd")
        .setPageId("add")

        // Add fields
        .setFields([

            ["MTMedicalCertificateID", [fields.MTMedicalCertificateID.visible && fields.MTMedicalCertificateID.required ? ew.Validators.required(fields.MTMedicalCertificateID.caption) : null], fields.MTMedicalCertificateID.isInvalid],
            ["Number", [fields.Number.visible && fields.Number.required ? ew.Validators.required(fields.Number.caption) : null], fields.Number.isInvalid],
            ["PlaceOfIssue", [fields.PlaceOfIssue.visible && fields.PlaceOfIssue.required ? ew.Validators.required(fields.PlaceOfIssue.caption) : null], fields.PlaceOfIssue.isInvalid],
            ["DateOfIssue", [fields.DateOfIssue.visible && fields.DateOfIssue.required ? ew.Validators.required(fields.DateOfIssue.caption) : null, ew.Validators.datetime(fields.DateOfIssue.clientFormatPattern)], fields.DateOfIssue.isInvalid],
            ["ExpirationDate", [fields.ExpirationDate.visible && fields.ExpirationDate.required ? ew.Validators.required(fields.ExpirationDate.caption) : null, ew.Validators.datetime(fields.ExpirationDate.clientFormatPattern)], fields.ExpirationDate.isInvalid],
            ["Attachment", [fields.Attachment.visible && fields.Attachment.required ? ew.Validators.fileRequired(fields.Attachment.caption) : null], fields.Attachment.isInvalid],
            ["MTCrewID", [fields.MTCrewID.visible && fields.MTCrewID.required ? ew.Validators.required(fields.MTCrewID.caption) : null], fields.MTCrewID.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "MTMedicalCertificateID": @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.ToClientList(crewMedicalCertificateForAdminViewModeAdd)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@crewMedicalCertificateForAdminViewModeAdd.ShowPageHeader()
@crewMedicalCertificateForAdminViewModeAdd.ShowMessages()
<form name="fCrewMedicalCertificateForAdminViewModeadd" id="fCrewMedicalCertificateForAdminViewModeadd" class="@(crewMedicalCertificateForAdminViewModeAdd.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="insert">
<input type="hidden" name="modal" value="@ConvertToInt(crewMedicalCertificateForAdminViewModeAdd.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(crewMedicalCertificateForAdminViewModeAdd.OldKeyName)" value="@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.OldKey)">
<div class="ew-add-div d-none"><!-- page* -->
@if (crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.Visible) { // crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.Visible (begin)
    <div id="r_MTMedicalCertificateID" @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.RowAttributes)>
        <label id="elh_CrewMedicalCertificateForAdminViewMode_MTMedicalCertificateID" for="x_MTMedicalCertificateID" class="@(crewMedicalCertificateForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalCertificateForAdminViewMode_MTMedicalCertificateID">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.Caption)@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalCertificateForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.CellAttributes)>
<template id="tpx_CrewMedicalCertificateForAdminViewMode_MTMedicalCertificateID"><span id="el_CrewMedicalCertificateForAdminViewMode_MTMedicalCertificateID">
    <select
        id="x_MTMedicalCertificateID"
        name="x_MTMedicalCertificateID"
        class="form-select ew-select@(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.IsInvalidClass)"
        data-select2-id="fCrewMedicalCertificateForAdminViewModeadd_x_MTMedicalCertificateID"
        data-table="CrewMedicalCertificateForAdminViewMode"
        data-field="x_MTMedicalCertificateID"
        data-value-separator="@(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.PlaceHolder))"
        @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.EditAttributes)>
        @(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.SelectOptionListHtml("x_MTMedicalCertificateID"))
    </select>
    @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.GetErrorMessage())</div>
@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.Lookup.GetParamTag(crewMedicalCertificateForAdminViewModeAdd, "p_x_MTMedicalCertificateID"))
<script>
loadjs.ready("fCrewMedicalCertificateForAdminViewModeadd", function() {
    var options = { name: "x_MTMedicalCertificateID", selectId: "fCrewMedicalCertificateForAdminViewModeadd_x_MTMedicalCertificateID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewMedicalCertificateForAdminViewModeadd.lists.MTMedicalCertificateID?.lookupOptions.length) {
        options.data = { id: "x_MTMedicalCertificateID", form: "fCrewMedicalCertificateForAdminViewModeadd" };
    } else {
        options.ajax = { id: "x_MTMedicalCertificateID", form: "fCrewMedicalCertificateForAdminViewModeadd", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewMedicalCertificateForAdminViewMode.fields.MTMedicalCertificateID.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.Visible (end) *@
@if (crewMedicalCertificateForAdminViewModeAdd.Number.Visible) { // crewMedicalCertificateForAdminViewModeAdd.Number.Visible (begin)
    <div id="r_Number" @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Number.RowAttributes)>
        <label id="elh_CrewMedicalCertificateForAdminViewMode_Number" for="x_Number" class="@(crewMedicalCertificateForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalCertificateForAdminViewMode_Number">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Number.Caption)@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Number.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalCertificateForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Number.CellAttributes)>
<template id="tpx_CrewMedicalCertificateForAdminViewMode_Number"><span id="el_CrewMedicalCertificateForAdminViewMode_Number">
<input type="@(crewMedicalCertificateForAdminViewModeAdd.Number.InputTextType)" name="x_Number" id="x_Number" data-table="CrewMedicalCertificateForAdminViewMode" data-field="x_Number" value="@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Number.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewMedicalCertificateForAdminViewModeAdd.Number.PlaceHolder))" data-format-pattern="@(crewMedicalCertificateForAdminViewModeAdd.Number.FormatPattern)"@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Number.EditAttributes) aria-describedby="x_Number_help">
@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Number.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Number.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewMedicalCertificateForAdminViewModeAdd.Number.Visible (end) *@
@if (crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.Visible) { // crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.Visible (begin)
    <div id="r_PlaceOfIssue" @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.RowAttributes)>
        <label id="elh_CrewMedicalCertificateForAdminViewMode_PlaceOfIssue" for="x_PlaceOfIssue" class="@(crewMedicalCertificateForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalCertificateForAdminViewMode_PlaceOfIssue">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.Caption)@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalCertificateForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.CellAttributes)>
<template id="tpx_CrewMedicalCertificateForAdminViewMode_PlaceOfIssue"><span id="el_CrewMedicalCertificateForAdminViewMode_PlaceOfIssue">
<input type="@(crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.InputTextType)" name="x_PlaceOfIssue" id="x_PlaceOfIssue" data-table="CrewMedicalCertificateForAdminViewMode" data-field="x_PlaceOfIssue" value="@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.PlaceHolder))" data-format-pattern="@(crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.FormatPattern)"@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.EditAttributes) aria-describedby="x_PlaceOfIssue_help">
@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.Visible (end) *@
@if (crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.Visible) { // crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.Visible (begin)
    <div id="r_DateOfIssue" @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.RowAttributes)>
        <label id="elh_CrewMedicalCertificateForAdminViewMode_DateOfIssue" for="x_DateOfIssue" class="@(crewMedicalCertificateForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalCertificateForAdminViewMode_DateOfIssue">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.Caption)@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalCertificateForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.CellAttributes)>
<template id="tpx_CrewMedicalCertificateForAdminViewMode_DateOfIssue"><span id="el_CrewMedicalCertificateForAdminViewMode_DateOfIssue">
<input type="@(crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.InputTextType)" name="x_DateOfIssue" id="x_DateOfIssue" data-table="CrewMedicalCertificateForAdminViewMode" data-field="x_DateOfIssue" value="@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.EditValue)" placeholder="@Html.Raw(HtmlEncode(crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.PlaceHolder))" data-format-pattern="@(crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.FormatPattern)"@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.EditAttributes) aria-describedby="x_DateOfIssue_help">
@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.GetErrorMessage())</div>
@if (!crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.ReadOnly && !crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.Disabled && !crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.EditAttrs.Is("readonly") && !crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fCrewMedicalCertificateForAdminViewModeadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fCrewMedicalCertificateForAdminViewModeadd", "x_DateOfIssue", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span></template>
</div></div>
    </div>
} @* crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.Visible (end) *@
@if (crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.Visible) { // crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.Visible (begin)
    <div id="r_ExpirationDate" @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.RowAttributes)>
        <label id="elh_CrewMedicalCertificateForAdminViewMode_ExpirationDate" for="x_ExpirationDate" class="@(crewMedicalCertificateForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalCertificateForAdminViewMode_ExpirationDate">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.Caption)@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalCertificateForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.CellAttributes)>
<template id="tpx_CrewMedicalCertificateForAdminViewMode_ExpirationDate"><span id="el_CrewMedicalCertificateForAdminViewMode_ExpirationDate">
<input type="@(crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.InputTextType)" name="x_ExpirationDate" id="x_ExpirationDate" data-table="CrewMedicalCertificateForAdminViewMode" data-field="x_ExpirationDate" value="@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.EditValue)" placeholder="@Html.Raw(HtmlEncode(crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.PlaceHolder))" data-format-pattern="@(crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.FormatPattern)"@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.EditAttributes) aria-describedby="x_ExpirationDate_help">
@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.GetErrorMessage())</div>
@if (!crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.ReadOnly && !crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.Disabled && !crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.EditAttrs.Is("readonly") && !crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fCrewMedicalCertificateForAdminViewModeadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fCrewMedicalCertificateForAdminViewModeadd", "x_ExpirationDate", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span></template>
</div></div>
    </div>
} @* crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.Visible (end) *@
@if (crewMedicalCertificateForAdminViewModeAdd.Attachment.Visible) { // crewMedicalCertificateForAdminViewModeAdd.Attachment.Visible (begin)
    <div id="r_Attachment" @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Attachment.RowAttributes)>
        <label id="elh_CrewMedicalCertificateForAdminViewMode_Attachment" class="@(crewMedicalCertificateForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalCertificateForAdminViewMode_Attachment">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Attachment.Caption)@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Attachment.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalCertificateForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Attachment.CellAttributes)>
<template id="tpx_CrewMedicalCertificateForAdminViewMode_Attachment"><span id="el_CrewMedicalCertificateForAdminViewMode_Attachment">
<div id="fd_x_Attachment" class="fileinput-button ew-file-drop-zone">
    <input
        type="file"
        id="x_Attachment"
        name="x_Attachment"
        class="form-control ew-file-input"
        title="@(crewMedicalCertificateForAdminViewModeAdd.Attachment.Title)"
        lang="@(CurrentLanguageID)"
        data-table="CrewMedicalCertificateForAdminViewMode"
        data-field="x_Attachment"
        data-size="150"
        data-accept-file-types="@(crewMedicalCertificateForAdminViewModeAdd.Attachment.AcceptFileTypes)"
        data-max-file-size="@(crewMedicalCertificateForAdminViewModeAdd.Attachment.UploadMaxFileSize)"
        data-max-number-of-files="null"
        data-disable-image-crop="@(crewMedicalCertificateForAdminViewModeAdd.Attachment.ImageCropper ? 0 : 1)"
        aria-describedby="x_Attachment_help"
        @Html.Raw((crewMedicalCertificateForAdminViewModeAdd.Attachment.ReadOnly || crewMedicalCertificateForAdminViewModeAdd.Attachment.Disabled) ? " disabled" : "")
        @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Attachment.EditAttributes)
    >
    <div class="text-muted ew-file-text">@Html.Raw(Language.Phrase("ChooseFile"))</div>
</div>
@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Attachment.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Attachment.GetErrorMessage())</div>
<input type="hidden" name="fn_x_Attachment" id= "fn_x_Attachment" value="@(crewMedicalCertificateForAdminViewModeAdd.Attachment.Upload.FileName)">
<input type="hidden" name="fa_x_Attachment" id= "fa_x_Attachment" value="0">
<table id="ft_x_Attachment" class="table table-sm float-start ew-upload-table"><tbody class="files"></tbody></table>
</span></template>
</div></div>
    </div>
} @* crewMedicalCertificateForAdminViewModeAdd.Attachment.Visible (end) *@
@if (crewMedicalCertificateForAdminViewModeAdd.MTCrewID.Visible) { // crewMedicalCertificateForAdminViewModeAdd.MTCrewID.Visible (begin)
    <div id="r_MTCrewID" @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTCrewID.RowAttributes)>
        <label id="elh_CrewMedicalCertificateForAdminViewMode_MTCrewID" for="x_MTCrewID" class="@(crewMedicalCertificateForAdminViewModeAdd.LeftColumnClass)"><template id="tpc_CrewMedicalCertificateForAdminViewMode_MTCrewID">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTCrewID.Caption)@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTCrewID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewMedicalCertificateForAdminViewModeAdd.RightColumnClass)"><div @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTCrewID.CellAttributes)>
<template id="tpx_CrewMedicalCertificateForAdminViewMode_MTCrewID"><span id="el_CrewMedicalCertificateForAdminViewMode_MTCrewID">
<input type="@(crewMedicalCertificateForAdminViewModeAdd.MTCrewID.InputTextType)" name="x_MTCrewID" id="x_MTCrewID" data-table="CrewMedicalCertificateForAdminViewMode" data-field="x_MTCrewID" value="@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTCrewID.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(crewMedicalCertificateForAdminViewModeAdd.MTCrewID.PlaceHolder))" data-format-pattern="@(crewMedicalCertificateForAdminViewModeAdd.MTCrewID.FormatPattern)"@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTCrewID.EditAttributes) aria-describedby="x_MTCrewID_help">
@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTCrewID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTCrewID.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewMedicalCertificateForAdminViewModeAdd.MTCrewID.Visible (end) *@
</div><!-- /page* -->
<div id="tpd_CrewMedicalCertificateForAdminViewModeadd" class="ew-custom-template"></div>
<template id="tpm_CrewMedicalCertificateForAdminViewModeadd">
<div id="ct_crewMedicalCertificateForAdminViewModeAdd">    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewPersonalDataForAdminViewModeView")">
                @(CurrentLanguage == "en-US" ? "PERSONAL DATA" : "DATA PERSONAL")
            </a>     
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewDocumentForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "DOCUMENTS" : "DOKUMEN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewBankAccountForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "BANK ACCOUNT" : "REKENING BANK")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFamilyForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "FAMILY" : "KELUARGA")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFormalEducationForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "FORMAL EDUCATION" : "PENDIDIKAN FORMAL")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalCertificateForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "MEDICAL CERTIFICATE / TEST" : "SERTIFIKAT / TES MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewCertificateForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "CERTIFICATES AND QUALIFICATIONS" : "SERTIFIKAT DAN KUALIFIKASI")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewExperienceForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "SEA EXPERIENCE" : "PENGALAMAN BERLAYAR")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewAppraisalForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "APPRAISALS" : "PENILAIAN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalHistoryForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "MEDICAL HISTORY" : "RIWAYAT MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewGeneralDataForAdminViewModeView")">
                @(CurrentLanguage == "en-US" ? "GENERAL" : "UMUM")
            </a>
        </li>
    </ul> 
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_MTMedicalCertificateID" class="mb-2 row">
                <label for="x_MTMedicalCertificateID" class="col-form-label">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTMedicalCertificateID.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalCertificateForAdminViewMode_MTMedicalCertificateID"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_Number" class="mb-2 row">
                <label for="x_Number" class="col-form-label">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Number.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalCertificateForAdminViewMode_Number"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_PlaceOfIssue" class="mb-2 row">
                <label for="x_PlaceOfIssue" class="col-form-label">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.PlaceOfIssue.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalCertificateForAdminViewMode_PlaceOfIssue"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_DateOfIssue" class="mb-2 row">
                <label for="x_DateOfIssue" class="col-form-label">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.DateOfIssue.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalCertificateForAdminViewMode_DateOfIssue"></slot></div>
            </div>
        </div>
    </div>
     <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_ExpirationDate" class="mb-2 row">
                <label for="x_ExpirationDate" class="col-form-label">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.ExpirationDate.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalCertificateForAdminViewMode_ExpirationDate"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_Attachment" class="mb-2 row">
                <label for="x_Attachment" class="col-form-label">
                    @Html.Raw(crewMedicalCertificateForAdminViewModeAdd.Attachment.Caption) @(CurrentLanguage == "en-US" ? "(jpg/jpeg/png/pdf max 2 MB)" : "(jpg/jpeg/png/pdf maks 2 MB)")<i class="fa-solid fa-asterisk ew-required"></i>
                </label>
                <div><slot class="ew-slot" name="tpx_CrewMedicalCertificateForAdminViewMode_Attachment"></slot></div>
            </div>
        </div>
    </div>
    <div class="row"><!-- buttons .row -->
        <div class="d-flex mb-2"><!-- buttons offset -->
            <button class="btn btn-primary ew-btn ms-auto primary-black-clr gray-bg" id="btn-add-entry">
                @(CurrentLanguage == "en-US" ? "Add Entry" : "Tambah")
            </button>
        </div><!-- /buttons offset -->
    </div>
    <div id="r_MTCrewID" class="mb-3 row">
        <label for="x_MTCrewID" class="col-sm-2 col-form-label">@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.MTCrewID.Caption)</label>
        <div class="col-sm-10"><slot class="ew-slot" name="tpx_CrewMedicalCertificateForAdminViewMode_MTCrewID"></slot></div>
    </div>
    <div id="proceed-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="proceed-modal-dialog-title" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="proceed-modal-dialog-title" class="modal-title">
                        @(CurrentLanguage == "en-US" ? "Warning" : "Peringatan")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p> 
                        @{
                            if (CurrentLanguage == "en-US")
                            {
                                <span>There are error(s) in this tab.</span><br/>
                                <span>If you choose to Proceed, any unsaved data will be lost.</span><br/>
                                <span>Do you want to Proceed?</span>
                            }
                            else
                            {
                                <span>Masih ada error di tab ini.</span><br/>
                                <span>Jika Anda memilih Lanjutkan, data yang belum disimpan akan hilang.</span><br/>
                                <span>Apakah Anda ingin melanjutkan?</span>
                            }
                        }
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger ew-btn" id="btn-proceed" type="button">
                        @(CurrentLanguage == "en-US" ? "Proceed" : "Lanjutkan")
                    </button>
                    <button class="btn btn-default ew-btn" id="btn-proceed-cancel" type="button" data-bs-dismiss="modal">
                        @(CurrentLanguage == "en-US" ? "Cancel" : "Batal")
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div id="loading-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-center mb-0">
                        @(CurrentLanguage == "en-US" ? "Saving..." : "Menyimpan...")
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div id="delete-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="delete-modal-dialog-title" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="delete-modal-dialog-title" class="modal-title">
                        @(CurrentLanguage == "en-US" ? "Confirmation" : "Konfirmasi")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        @(CurrentLanguage == "en-US" ? "Are you sure you want to delete?" : "Anda yakin ingin menghapus?")
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary ew-btn" id="btn-delete" type="button">
                        @(CurrentLanguage == "en-US" ? "Yes" : "Iya")
                    </button>
                    <button class="btn btn-default ew-btn" id="btn-delete-cancel" type="button" data-bs-dismiss="modal">
                        @(CurrentLanguage == "en-US" ? "No" : "Tidak")
                    </button>
                </div>
            </div>
        </div>
    </div></div>
</template>
@{ crewMedicalCertificateForAdminViewModeAdd.CloseRecordset(); }
@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(crewMedicalCertificateForAdminViewModeAdd.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fCrewMedicalCertificateForAdminViewModeadd">@Html.Raw(Language.Phrase("AddBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fCrewMedicalCertificateForAdminViewModeadd" data-href="@AppPath(crewMedicalCertificateForAdminViewModeAdd.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(crewMedicalCertificateForAdminViewModeAdd.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
<script class="ew-apply-template">
loadjs.ready(ew.applyTemplateId, function() {
    var $ = jQuery;
    ew.templateData = { rows: @Html.Raw(ConvertToJson(crewMedicalCertificateForAdminViewModeAdd.Rows)) };
    ew.applyTemplate("tpd_CrewMedicalCertificateForAdminViewModeadd", "tpm_CrewMedicalCertificateForAdminViewModeadd", "CrewMedicalCertificateForAdminViewModeadd", "@(crewMedicalCertificateForAdminViewModeAdd.Export)", "CrewMedicalCertificateForAdminViewMode", ew.templateData.rows[0], @(crewMedicalCertificateForAdminViewModeAdd.IsModal ? "true" : "false"));
    loadjs.done("customtemplate");
});
</script>
@crewMedicalCertificateForAdminViewModeAdd.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("CrewMedicalCertificateForAdminViewMode");
});
</script>
<script>
loadjs.ready("load", function() {
    // Startup script
    // Write your table-specific startup script here
    // document.write("page loaded");

    // Get the current URL
    const currentUrlObject = new URL(window.location.href);
    // get the current URL without Add or Edit for assigning active class in tabs
    const currentUrlWithoutAddEditListView = currentUrlObject.href.replace(/Add|Edit|List|View/g, "");
    // Create a new URLSearchParams object based on the current URL's search parameters
    const urlQueryParams = new URLSearchParams(currentUrlObject.search);
    // Extract the value of the crewID query parameter
    const currentlyEditedCrewID = urlQueryParams.get('crewID');
    const selectedLanguage = ew.vars['languages']['languages'].filter(obj => obj.selected === true)[0];
    const parentUrl = ew.PATH_BASE;
    const tableName = "CrewMedicalCertificateForAdminViewMode";
    const pageType = "add";
    const pageTypeCapital = "Add";
    const formID = `f${tableName}${pageType}`;
    const addEntryUrl = `${parentUrl}${tableName}${pageTypeCapital}?crewID=${currentlyEditedCrewID}`;
    const listPageUrl = `${parentUrl}${tableName}List?crewID=${currentlyEditedCrewID}`;
    let isChangeTabApproved = false;
    const adminAndEmployeeStatusApi = 'get-admin-and-employee-status';
    $.ajax({
        url: `${parentUrl}api/Registration/${adminAndEmployeeStatusApi}`,
        method: 'GET',
        data: {
            crewID: currentlyEditedCrewID
        },
        success: function(response) {
            if (response.success) {
                // Parse the data in the response
                const isAdmin = response.data.IsAdmin;
                const employeeStatus = response.data.EmployeeStatus;
                if (currentlyEditedCrewID === null) {
                    if (isAdmin) {
                        // redirect to list page with error message: record not found
                        if (employeeStatus === 'Candidate - Draft') {
                            window.location.replace(`${ew.PATH_BASE}RegistrationEdit/-1`);
                        } else if (employeeStatus === 'Candidate - Submitted') {
                            window.location.replace(`${ew.PATH_BASE}VWaitingForPdeReviewView/-1`);
                        }
                    } else {
                        window.location.replace(`${ew.PATH_BASE}index`);
                    }
                }
            } else {
                // Handle the error
                ew.showToast(response.errorMessage);
            }
        },
        error: function(xhr, textStatus, errorThrown) {
            // Handle the error
            ew.showToast(errorThrown);
        }
    });

    // Iterate over each anchor element inside the nav-tabs
    $(".nav-tabs .nav-item a").each(function() {
        const href = $(this).attr("href");
        const hrefWithoutAddEditListView = href.replace(/Add|Edit|List|View/g, "");
        // Check if the href contains current page's url
        if (currentUrlWithoutAddEditListView.includes(hrefWithoutAddEditListView)) {
            // add class and attribute
            $(this).addClass("active");
            $(this).attr("aria-current", "page");
        }
        // Check if the href contains "Edit" or "Add"
        if (href.includes("ViewModeView")) {
            // Add "/" and the currently edited crew ID to the href
            const newHref = href + "/" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        } else if (href.includes("ViewModeList")) {
            // Add "?crewID=" and the currently edited crew ID to the href
            const newHref = href + "?crewID=" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        }
    });

    // start code for auto capitalize first letter of each word
    $('#x_PlaceOfIssue').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    // end code for auto capitalize first letter of each word
    const entryButton = $('<button/>', {
        'class': 'btn btn-primary ew-btn ms-auto primary-black-clr gray-bg',
        'id': 'btn-entry',
        'type': 'button',
        'text': (selectedLanguage.id === 'en-US') ? `Add Entry` : `Tambah`
    }).click(function() {
        const validateAddEntryResult = validateAddEntry({ isAllEmptyAllowed: false });
        if (validateAddEntryResult === 'valid') {
            $('#loading-modal-dialog').modal('show');
            const targetUrlRelative = listPageUrl;
            addEntry({ redirectUrlWhenSuccess: targetUrlRelative });
        } else {
            scrollToFirstInvalidInput();
        }
    });
    $('#btn-add-entry').after(entryButton);
    $('#btn-add-entry').remove();

    // to auto clear error message when focus for file fields
    $('#x_Attachment').on('focus', function() {
        $(this).removeClass('is-invalid');
    });
    $('#ft_x_Attachment button').on("click", function () {
      window[formID].modified = true;
    });
    const customCancelButton = $('<button/>', {
        'class': 'btn btn-danger ew-btn ms-auto primary-red-bg primary-white-clr',
        'id': 'btn-custom-cancel',
        'type': 'button',
        'text': `${ew.language.phrase("CancelBtn")}`,
    }).click(function() {
        if (window[formID].modified) {
            ew.prompt(ew.language.phrase("ConfirmCancel"), result => {
                if (result) {
                    isChangeTabApproved = true;
                    proceedToLink(listPageUrl);
                }
            });
        } else {
            isChangeTabApproved = true;
            proceedToLink(listPageUrl);
        }
    });
    $('#btn-cancel').after(customCancelButton);
    $('#btn-cancel').remove();

    // Target the ol element that has breadcrumb class
    const $breadCrumbOl = $('.breadcrumb').first();

    // Delete the ol element that has breadcrumb class
    $breadCrumbOl.remove();
    $('#btn-action').remove();
    $('.ew-buttons > .col-sm-10').removeClass('col-sm-10').addClass('d-flex mb-3');
    $('.ew-buttons > .offset-sm-2').removeClass('offset-sm-2');

    //  programatically change the value of MTCrewID input and then hide it
    $('#x_MTCrewID').val(currentlyEditedCrewID);
    $('div#r_MTCrewID').hide();

    // AUTO SAVE WHEN MOVING FROM THIS TAB
    $(window).on('beforeunload', function(event) {
        if (!isChangeTabApproved && window[formID].modified) {
            event.preventDefault();
            event.returnValue = '';
            return '';
        }
    });
    $("#btn-proceed").click(function() {
        isChangeTabApproved = true;
        const targetUrlRelative = $(this).attr('target-url-relative');
        $('#approve-modal-dialog').modal('hide');
        proceedToLink(targetUrlRelative);
    });
    $('ul.nav.nav-tabs li.nav-item a.nav-link').on('click', function(event) {
        event.preventDefault();
        const targetUrlRelative = $(this).attr('href');
        if (window[formID].modified) {
            const validateAddEntryResult = validateAddEntry({ isAllEmptyAllowed: true });
            if (validateAddEntryResult === 'valid') {
                $('#loading-modal-dialog').modal('show');
                addEntry({ redirectUrlWhenSuccess: targetUrlRelative });
            } else if (validateAddEntryResult === 'empty') {
                isChangeTabApproved = true;
                proceedToLink(targetUrlRelative);
            } else if (validateAddEntryResult === 'invalid') {
                scrollToFirstInvalidInput();
                $('#btn-proceed').attr('target-url-relative', targetUrlRelative);
                $('#proceed-modal-dialog').modal('show');
            }
        } else {
            isChangeTabApproved = true;
            proceedToLink(targetUrlRelative);
        }
    });
    function proceedToLink(targetUrlRelative) {
        const baseUrl = new URL(window.location.href).origin;
        const targetUrl = new URL(baseUrl + targetUrlRelative);
        window.location.href = targetUrl.href;
    }
    function scrollToFirstInvalidInput() {
        const invalidInput = $("input.is-invalid:first");
        if (invalidInput.length > 0) { // Check if an invalid input is found
            const offset = invalidInput.offset().top; // Calculate the offset of the invalid input element from the top of the page
            const windowHeight = $(window).height(); // Calculate the height of the viewport
            const scrollPosition = offset - (windowHeight / 2); // Calculate the scroll position to center the invalid input element
            $("html, body").animate({ // Animate the scroll to the center position
                scrollTop: scrollPosition
            }, 1000); // Adjust the duration as needed (in milliseconds)
        }
    }
    function addEntry({ redirectUrlWhenSuccess }) {
        isChangeTabApproved = true;
        let formData = $(`form#${formID}`).serialize();
        $('input[type="checkbox"]').each(function() {
            // Jika checkbox tidak dicentang dan tidak ada di hasil serialize(),
            // tambahkan nilai 0 ke hasil serialize()
            if (!this.checked && formData.indexOf(this.name) === -1) {
                formData += '&' + this.name + '=0';
            }
        });
        $.ajax({
            url: addEntryUrl,
            type: 'POST',
            data: formData,
            success: function(res) {
                const $errorDiv = $(res).find('div.ew-error'); // res is a string containing html document
                $('#loading-modal-dialog').modal('hide');
                if ($errorDiv.length > 0) {
                    ew.showToast($errorDiv.text());
                } else {
                    proceedToLink(redirectUrlWhenSuccess);
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                $('#loading-modal-dialog').modal('hide');
                isChangeTabApproved = false;
                ew.showToast(errorThrown);
            }
        });
    }
    function validateAddEntry({ isAllEmptyAllowed }) {
        let formErrorCount = 0;
        let formEmptyCount = 0;
        let isNotEmpty = true;
        const emptyFieldNames = [];
        const emptyFileFieldNames = [];
        function validateRequiredField(fieldName) {
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (fieldValue === '' || fieldValue === null) {
                return false;
            } else {
                return true;
            }
        }
        function validateRequiredFileField(fieldName) {
            const fieldNameWithPrefix = `fn_x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (fieldValue === '') {
                return false;
            } else {
                return true;
            }
        }
        function validateDateField(fieldName) {
            const errorMessage = (selectedLanguage.id === 'en-US') ? 'Incorrect date (dd MMM yyyy)' : 'Tanggal tidak benar (dd MMM yyyy)';
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            const dateParts = fieldValue.split(' ');
            const day = parseInt(dateParts[0], 10);
            const monthNamesEnglish = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            const monthNamesIndonesian = ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Agu', 'Sep', 'Okt', 'Nov', 'Des'];
            const month = (selectedLanguage.id === 'en-US') ? monthNamesEnglish.indexOf(dateParts[1]) : monthNamesIndonesian.indexOf(dateParts[1]);
            const year = parseInt(dateParts[2], 10);
            let valid = false;
            if (year >= 1900 && year <= 9999 && month >= 0 && day >= 1 && day <= 31) {
                switch (month) {
                    case 1: // February
                        // Check for leap year
                        valid = day <= (((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) ? 29 : 28);
                        break;
                    case 3: // April
                    case 5: // June
                    case 8: // September
                    case 10: // November
                        valid = day <= 30;
                        break;
                    default:
                        valid = true;
                        break;
                }
            }
            if (!valid) {
                window[formID].fields[fieldName].addError({ custom: errorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessage });
                return false;
            } else {
                return true;
            }
        }
        function validateFieldWithRegex(fieldName, errorMessage, regex) {
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (!regex.test(fieldValue)) {  
                window[formID].fields[fieldName].addError({ custom: errorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessage });
                return false;
            } else {
                return true;
            }
        }
        function displayRequiredFieldError(fieldName) {
            const errorMessage = (selectedLanguage.id === 'en-US') ? "Please enter required field" : "Masukkan input yang dibutuhkan";
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldCaption = $(`label[for=${fieldNameWithPrefix}]`).text();
            const errorMessageWithFieldName = `${errorMessage} - ${fieldCaption}`;
            window[formID].fields[fieldName].addError({ custom: errorMessageWithFieldName });
            window[formID].fields[fieldName].updateFeedback();
            window[formID].addError(fieldName, { custom: errorMessageWithFieldName });
        }
        function displayRequiredFileFieldError(fieldName) {
            displayRequiredFieldError(fieldName);
            const fieldNameWithPrefix = `x_${fieldName}`;
            $(`#${fieldNameWithPrefix}`).addClass('is-invalid');
        }
        const noDigitsRegex = /^[^0-9]+$/;
        const noDigitsRegexErrorMessage = (selectedLanguage.id === 'en-US') ? "Must not contain digits" : "Tidak boleh mengandung angka";
        isNotEmpty = validateRequiredField("MTMedicalCertificateID");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("MTMedicalCertificateID");
            } else {
                displayRequiredFieldError("MTMedicalCertificateID");
            }
        }
        isNotEmpty = validateRequiredField("Number");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("Number");
            } else {
                displayRequiredFieldError("Number");
            }
        }
        isNotEmpty = validateRequiredField("PlaceOfIssue");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("PlaceOfIssue");
            } else {
                displayRequiredFieldError("PlaceOfIssue");
            }
        } else {
            formErrorCount += validateFieldWithRegex("PlaceOfIssue",  noDigitsRegexErrorMessage, noDigitsRegex) ? 0 : 1;
        }
        isNotEmpty = validateRequiredField("DateOfIssue");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("DateOfIssue");
            } else {
                displayRequiredFieldError("DateOfIssue");
            }
        } else {
            formErrorCount += validateDateField("DateOfIssue") ? 0 : 1;
        }
        isNotEmpty = validateRequiredField("ExpirationDate");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("ExpirationDate");
            } else {
                displayRequiredFieldError("ExpirationDate");
            }
        } else {
            formErrorCount += validateDateField("ExpirationDate") ? 0 : 1;
        }
        isNotEmpty = validateRequiredFileField("Attachment");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFileFieldNames.push("Attachment");
            } else {
                displayRequiredFileFieldError("Attachment");
            }
        }
        if (formEmptyCount === 6) {
            return 'empty';
        }
        if (emptyFieldNames.length > 0) {
            for (const fieldName of emptyFieldNames) {
                displayRequiredFieldError(fieldName);
            }
        }
        if (emptyFileFieldNames.length > 0) {
            for (const fieldName of emptyFileFieldNames) {
                displayRequiredFileFieldError(fieldName);
            }
        }
        if (formErrorCount > 0) {
            return 'invalid';
        } else {
            return 'valid';
        }
    }
});
</script>
