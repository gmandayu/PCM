@{
    // View
    View = this;

    // Check action result
    if (crewFormalEducationForAdminAdd.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!crewFormalEducationForAdminAdd.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(crewFormalEducationForAdminAdd.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { CrewFormalEducationForAdmin: currentTable } });
var currentPageID = ew.PAGE_ID = "add";
var currentForm;
var fCrewFormalEducationForAdminadd;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fCrewFormalEducationForAdminadd")
        .setPageId("add")

        // Add fields
        .setFields([

            ["EducationLevel", [fields.EducationLevel.visible && fields.EducationLevel.required ? ew.Validators.required(fields.EducationLevel.caption) : null], fields.EducationLevel.isInvalid],
            ["SchoolName", [fields.SchoolName.visible && fields.SchoolName.required ? ew.Validators.required(fields.SchoolName.caption) : null], fields.SchoolName.isInvalid],
            ["City", [fields.City.visible && fields.City.required ? ew.Validators.required(fields.City.caption) : null], fields.City.isInvalid],
            ["Attachment", [fields.Attachment.visible && fields.Attachment.required ? ew.Validators.fileRequired(fields.Attachment.caption) : null], fields.Attachment.isInvalid],
            ["StartDate", [fields.StartDate.visible && fields.StartDate.required ? ew.Validators.required(fields.StartDate.caption) : null], fields.StartDate.isInvalid],
            ["EndDate", [fields.EndDate.visible && fields.EndDate.required ? ew.Validators.required(fields.EndDate.caption) : null], fields.EndDate.isInvalid],
            ["MTCrewID", [fields.MTCrewID.visible && fields.MTCrewID.required ? ew.Validators.required(fields.MTCrewID.caption) : null], fields.MTCrewID.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "EducationLevel": @Html.Raw(crewFormalEducationForAdminAdd.EducationLevel.ToClientList(crewFormalEducationForAdminAdd)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@crewFormalEducationForAdminAdd.ShowPageHeader()
@crewFormalEducationForAdminAdd.ShowMessages()
<form name="fCrewFormalEducationForAdminadd" id="fCrewFormalEducationForAdminadd" class="@(crewFormalEducationForAdminAdd.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="insert">
<input type="hidden" name="modal" value="@ConvertToInt(crewFormalEducationForAdminAdd.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(crewFormalEducationForAdminAdd.OldKeyName)" value="@Html.Raw(crewFormalEducationForAdminAdd.OldKey)">
<div class="ew-add-div d-none"><!-- page* -->
@if (crewFormalEducationForAdminAdd.EducationLevel.Visible) { // crewFormalEducationForAdminAdd.EducationLevel.Visible (begin)
    <div id="r_EducationLevel" @Html.Raw(crewFormalEducationForAdminAdd.EducationLevel.RowAttributes)>
        <label id="elh_CrewFormalEducationForAdmin_EducationLevel" for="x_EducationLevel" class="@(crewFormalEducationForAdminAdd.LeftColumnClass)"><template id="tpc_CrewFormalEducationForAdmin_EducationLevel">@Html.Raw(crewFormalEducationForAdminAdd.EducationLevel.Caption)@Html.Raw(crewFormalEducationForAdminAdd.EducationLevel.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFormalEducationForAdminAdd.RightColumnClass)"><div @Html.Raw(crewFormalEducationForAdminAdd.EducationLevel.CellAttributes)>
<template id="tpx_CrewFormalEducationForAdmin_EducationLevel"><span id="el_CrewFormalEducationForAdmin_EducationLevel">
    <select
        id="x_EducationLevel"
        name="x_EducationLevel"
        class="form-select ew-select@(crewFormalEducationForAdminAdd.EducationLevel.IsInvalidClass)"
        data-select2-id="fCrewFormalEducationForAdminadd_x_EducationLevel"
        data-table="CrewFormalEducationForAdmin"
        data-field="x_EducationLevel"
        data-value-separator="@(crewFormalEducationForAdminAdd.EducationLevel.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(crewFormalEducationForAdminAdd.EducationLevel.PlaceHolder))"
        @Html.Raw(crewFormalEducationForAdminAdd.EducationLevel.EditAttributes)>
        @(crewFormalEducationForAdminAdd.EducationLevel.SelectOptionListHtml("x_EducationLevel"))
    </select>
    @Html.Raw(crewFormalEducationForAdminAdd.EducationLevel.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminAdd.EducationLevel.GetErrorMessage())</div>
<script>
loadjs.ready("fCrewFormalEducationForAdminadd", function() {
    var options = { name: "x_EducationLevel", selectId: "fCrewFormalEducationForAdminadd_x_EducationLevel" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fCrewFormalEducationForAdminadd.lists.EducationLevel?.lookupOptions.length) {
        options.data = { id: "x_EducationLevel", form: "fCrewFormalEducationForAdminadd" };
    } else {
        options.ajax = { id: "x_EducationLevel", form: "fCrewFormalEducationForAdminadd", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.CrewFormalEducationForAdmin.fields.EducationLevel.selectOptions);
    ew.createSelect(options);
});
</script>
</span></template>
</div></div>
    </div>
} @* crewFormalEducationForAdminAdd.EducationLevel.Visible (end) *@
@if (crewFormalEducationForAdminAdd.SchoolName.Visible) { // crewFormalEducationForAdminAdd.SchoolName.Visible (begin)
    <div id="r_SchoolName" @Html.Raw(crewFormalEducationForAdminAdd.SchoolName.RowAttributes)>
        <label id="elh_CrewFormalEducationForAdmin_SchoolName" for="x_SchoolName" class="@(crewFormalEducationForAdminAdd.LeftColumnClass)"><template id="tpc_CrewFormalEducationForAdmin_SchoolName">@Html.Raw(crewFormalEducationForAdminAdd.SchoolName.Caption)@Html.Raw(crewFormalEducationForAdminAdd.SchoolName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFormalEducationForAdminAdd.RightColumnClass)"><div @Html.Raw(crewFormalEducationForAdminAdd.SchoolName.CellAttributes)>
<template id="tpx_CrewFormalEducationForAdmin_SchoolName"><span id="el_CrewFormalEducationForAdmin_SchoolName">
<input type="@(crewFormalEducationForAdminAdd.SchoolName.InputTextType)" name="x_SchoolName" id="x_SchoolName" data-table="CrewFormalEducationForAdmin" data-field="x_SchoolName" value="@Html.Raw(crewFormalEducationForAdminAdd.SchoolName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewFormalEducationForAdminAdd.SchoolName.PlaceHolder))" data-format-pattern="@(crewFormalEducationForAdminAdd.SchoolName.FormatPattern)"@Html.Raw(crewFormalEducationForAdminAdd.SchoolName.EditAttributes) aria-describedby="x_SchoolName_help">
@Html.Raw(crewFormalEducationForAdminAdd.SchoolName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminAdd.SchoolName.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewFormalEducationForAdminAdd.SchoolName.Visible (end) *@
@if (crewFormalEducationForAdminAdd.City.Visible) { // crewFormalEducationForAdminAdd.City.Visible (begin)
    <div id="r_City" @Html.Raw(crewFormalEducationForAdminAdd.City.RowAttributes)>
        <label id="elh_CrewFormalEducationForAdmin_City" for="x_City" class="@(crewFormalEducationForAdminAdd.LeftColumnClass)"><template id="tpc_CrewFormalEducationForAdmin_City">@Html.Raw(crewFormalEducationForAdminAdd.City.Caption)@Html.Raw(crewFormalEducationForAdminAdd.City.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFormalEducationForAdminAdd.RightColumnClass)"><div @Html.Raw(crewFormalEducationForAdminAdd.City.CellAttributes)>
<template id="tpx_CrewFormalEducationForAdmin_City"><span id="el_CrewFormalEducationForAdmin_City">
<input type="@(crewFormalEducationForAdminAdd.City.InputTextType)" name="x_City" id="x_City" data-table="CrewFormalEducationForAdmin" data-field="x_City" value="@Html.Raw(crewFormalEducationForAdminAdd.City.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(crewFormalEducationForAdminAdd.City.PlaceHolder))" data-format-pattern="@(crewFormalEducationForAdminAdd.City.FormatPattern)"@Html.Raw(crewFormalEducationForAdminAdd.City.EditAttributes) aria-describedby="x_City_help">
@Html.Raw(crewFormalEducationForAdminAdd.City.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminAdd.City.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewFormalEducationForAdminAdd.City.Visible (end) *@
@if (crewFormalEducationForAdminAdd.Attachment.Visible) { // crewFormalEducationForAdminAdd.Attachment.Visible (begin)
    <div id="r_Attachment" @Html.Raw(crewFormalEducationForAdminAdd.Attachment.RowAttributes)>
        <label id="elh_CrewFormalEducationForAdmin_Attachment" class="@(crewFormalEducationForAdminAdd.LeftColumnClass)"><template id="tpc_CrewFormalEducationForAdmin_Attachment">@Html.Raw(crewFormalEducationForAdminAdd.Attachment.Caption)@Html.Raw(crewFormalEducationForAdminAdd.Attachment.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFormalEducationForAdminAdd.RightColumnClass)"><div @Html.Raw(crewFormalEducationForAdminAdd.Attachment.CellAttributes)>
<template id="tpx_CrewFormalEducationForAdmin_Attachment"><span id="el_CrewFormalEducationForAdmin_Attachment">
<div id="fd_x_Attachment" class="fileinput-button ew-file-drop-zone">
    <input
        type="file"
        id="x_Attachment"
        name="x_Attachment"
        class="form-control ew-file-input"
        title="@(crewFormalEducationForAdminAdd.Attachment.Title)"
        lang="@(CurrentLanguageID)"
        data-table="CrewFormalEducationForAdmin"
        data-field="x_Attachment"
        data-size="150"
        data-accept-file-types="@(crewFormalEducationForAdminAdd.Attachment.AcceptFileTypes)"
        data-max-file-size="@(crewFormalEducationForAdminAdd.Attachment.UploadMaxFileSize)"
        data-max-number-of-files="null"
        data-disable-image-crop="@(crewFormalEducationForAdminAdd.Attachment.ImageCropper ? 0 : 1)"
        aria-describedby="x_Attachment_help"
        @Html.Raw((crewFormalEducationForAdminAdd.Attachment.ReadOnly || crewFormalEducationForAdminAdd.Attachment.Disabled) ? " disabled" : "")
        @Html.Raw(crewFormalEducationForAdminAdd.Attachment.EditAttributes)
    >
    <div class="text-muted ew-file-text">@Html.Raw(Language.Phrase("ChooseFile"))</div>
</div>
@Html.Raw(crewFormalEducationForAdminAdd.Attachment.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminAdd.Attachment.GetErrorMessage())</div>
<input type="hidden" name="fn_x_Attachment" id= "fn_x_Attachment" value="@(crewFormalEducationForAdminAdd.Attachment.Upload.FileName)">
<input type="hidden" name="fa_x_Attachment" id= "fa_x_Attachment" value="0">
<table id="ft_x_Attachment" class="table table-sm float-start ew-upload-table"><tbody class="files"></tbody></table>
</span></template>
</div></div>
    </div>
} @* crewFormalEducationForAdminAdd.Attachment.Visible (end) *@
@if (crewFormalEducationForAdminAdd.StartDate.Visible) { // crewFormalEducationForAdminAdd.StartDate.Visible (begin)
    <div id="r_StartDate" @Html.Raw(crewFormalEducationForAdminAdd.StartDate.RowAttributes)>
        <label id="elh_CrewFormalEducationForAdmin_StartDate" for="x_StartDate" class="@(crewFormalEducationForAdminAdd.LeftColumnClass)"><template id="tpc_CrewFormalEducationForAdmin_StartDate">@Html.Raw(crewFormalEducationForAdminAdd.StartDate.Caption)@Html.Raw(crewFormalEducationForAdminAdd.StartDate.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFormalEducationForAdminAdd.RightColumnClass)"><div @Html.Raw(crewFormalEducationForAdminAdd.StartDate.CellAttributes)>
<template id="tpx_CrewFormalEducationForAdmin_StartDate"><span id="el_CrewFormalEducationForAdmin_StartDate">
<input type="@(crewFormalEducationForAdminAdd.StartDate.InputTextType)" name="x_StartDate" id="x_StartDate" data-table="CrewFormalEducationForAdmin" data-field="x_StartDate" value="@Html.Raw(crewFormalEducationForAdminAdd.StartDate.EditValue)" placeholder="@Html.Raw(HtmlEncode(crewFormalEducationForAdminAdd.StartDate.PlaceHolder))" data-format-pattern="@(crewFormalEducationForAdminAdd.StartDate.FormatPattern)"@Html.Raw(crewFormalEducationForAdminAdd.StartDate.EditAttributes) aria-describedby="x_StartDate_help">
@Html.Raw(crewFormalEducationForAdminAdd.StartDate.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminAdd.StartDate.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewFormalEducationForAdminAdd.StartDate.Visible (end) *@
@if (crewFormalEducationForAdminAdd.EndDate.Visible) { // crewFormalEducationForAdminAdd.EndDate.Visible (begin)
    <div id="r_EndDate" @Html.Raw(crewFormalEducationForAdminAdd.EndDate.RowAttributes)>
        <label id="elh_CrewFormalEducationForAdmin_EndDate" for="x_EndDate" class="@(crewFormalEducationForAdminAdd.LeftColumnClass)"><template id="tpc_CrewFormalEducationForAdmin_EndDate">@Html.Raw(crewFormalEducationForAdminAdd.EndDate.Caption)@Html.Raw(crewFormalEducationForAdminAdd.EndDate.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFormalEducationForAdminAdd.RightColumnClass)"><div @Html.Raw(crewFormalEducationForAdminAdd.EndDate.CellAttributes)>
<template id="tpx_CrewFormalEducationForAdmin_EndDate"><span id="el_CrewFormalEducationForAdmin_EndDate">
<input type="@(crewFormalEducationForAdminAdd.EndDate.InputTextType)" name="x_EndDate" id="x_EndDate" data-table="CrewFormalEducationForAdmin" data-field="x_EndDate" value="@Html.Raw(crewFormalEducationForAdminAdd.EndDate.EditValue)" placeholder="@Html.Raw(HtmlEncode(crewFormalEducationForAdminAdd.EndDate.PlaceHolder))" data-format-pattern="@(crewFormalEducationForAdminAdd.EndDate.FormatPattern)"@Html.Raw(crewFormalEducationForAdminAdd.EndDate.EditAttributes) aria-describedby="x_EndDate_help">
@Html.Raw(crewFormalEducationForAdminAdd.EndDate.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminAdd.EndDate.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewFormalEducationForAdminAdd.EndDate.Visible (end) *@
@if (crewFormalEducationForAdminAdd.MTCrewID.Visible) { // crewFormalEducationForAdminAdd.MTCrewID.Visible (begin)
    <div id="r_MTCrewID" @Html.Raw(crewFormalEducationForAdminAdd.MTCrewID.RowAttributes)>
        <label id="elh_CrewFormalEducationForAdmin_MTCrewID" for="x_MTCrewID" class="@(crewFormalEducationForAdminAdd.LeftColumnClass)"><template id="tpc_CrewFormalEducationForAdmin_MTCrewID">@Html.Raw(crewFormalEducationForAdminAdd.MTCrewID.Caption)@Html.Raw(crewFormalEducationForAdminAdd.MTCrewID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</template></label>
        <div class="@(crewFormalEducationForAdminAdd.RightColumnClass)"><div @Html.Raw(crewFormalEducationForAdminAdd.MTCrewID.CellAttributes)>
<template id="tpx_CrewFormalEducationForAdmin_MTCrewID"><span id="el_CrewFormalEducationForAdmin_MTCrewID">
<input type="@(crewFormalEducationForAdminAdd.MTCrewID.InputTextType)" name="x_MTCrewID" id="x_MTCrewID" data-table="CrewFormalEducationForAdmin" data-field="x_MTCrewID" value="@Html.Raw(crewFormalEducationForAdminAdd.MTCrewID.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(crewFormalEducationForAdminAdd.MTCrewID.PlaceHolder))" data-format-pattern="@(crewFormalEducationForAdminAdd.MTCrewID.FormatPattern)"@Html.Raw(crewFormalEducationForAdminAdd.MTCrewID.EditAttributes) aria-describedby="x_MTCrewID_help">
@Html.Raw(crewFormalEducationForAdminAdd.MTCrewID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminAdd.MTCrewID.GetErrorMessage())</div>
</span></template>
</div></div>
    </div>
} @* crewFormalEducationForAdminAdd.MTCrewID.Visible (end) *@
</div><!-- /page* -->
<div id="tpd_CrewFormalEducationForAdminadd" class="ew-custom-template"></div>
<template id="tpm_CrewFormalEducationForAdminadd">
<div id="ct_crewFormalEducationForAdminAdd">    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewPersonalDataForAdminEdit")">
                @(CurrentLanguage == "en-US" ? "PERSONAL DATA" : "DATA PERSONAL")
            </a>     
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewDocumentForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "DOCUMENTS" : "DOKUMEN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewBankAccountForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "BANK ACCOUNT" : "REKENING BANK")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFamilyForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "FAMILY" : "KELUARGA")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFormalEducationForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "FORMAL EDUCATION" : "PENDIDIKAN FORMAL")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalCertificateForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "MEDICAL CERTIFICATE / TEST" : "SERTIFIKAT / TES MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewCertificateForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "CERTIFICATES AND QUALIFICATIONS" : "SERTIFIKAT DAN KUALIFIKASI")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewExperienceForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "SEA EXPERIENCE" : "PENGALAMAN BERLAYAR")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewAppraisalForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "APPRAISALS" : "PENILAIAN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalHistoryForAdminAdd")">
                @(CurrentLanguage == "en-US" ? "MEDICAL HISTORY" : "RIWAYAT MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewGeneralDataForAdminEdit")">
                @(CurrentLanguage == "en-US" ? "GENERAL" : "UMUM")
            </a>
        </li>
    </ul>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_EducationLevel" class="mb-2 row">
                <label for="x_EducationLevel" class="col-form-label">@Html.Raw(crewFormalEducationForAdminAdd.EducationLevel.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewFormalEducationForAdmin_EducationLevel"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_SchoolName" class="mb-2 row">
                <label for="x_SchoolName" class="col-form-label">@Html.Raw(crewFormalEducationForAdminAdd.SchoolName.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewFormalEducationForAdmin_SchoolName"></slot></div>
            </div>
        </div>
    </div>
    <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_City" class="mb-2 row">
                <label for="x_City" class="col-form-label">@Html.Raw(crewFormalEducationForAdminAdd.City.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewFormalEducationForAdmin_City"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_Attachment" class="mb-2 row">
                <label for="x_Attachment" class="col-form-label">
                    @Html.Raw(crewFormalEducationForAdminAdd.Attachment.Caption) @(CurrentLanguage == "en-US" ? "(jpg/jpeg/png/pdf max 2 MB)" : "(jpg/jpeg/png/pdf maks 2 MB)")<i class="fa-solid fa-asterisk ew-required"></i>
                </label>
                <div><slot class="ew-slot" name="tpx_CrewFormalEducationForAdmin_Attachment"></slot></div>
            </div>
        </div>
    </div>
     <div class="mb-2 row">
        <div class="col-sm-6">
            <div id="r_StartDate" class="mb-2 row">
                <label for="x_StartDate" class="col-form-label">@Html.Raw(crewFormalEducationForAdminAdd.StartDate.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewFormalEducationForAdmin_StartDate"></slot></div>
            </div>
        </div>
        <div class="col-sm-6">
            <div id="r_EndDate" class="mb-2 row">
                <label for="x_EndDate" class="col-form-label">@Html.Raw(crewFormalEducationForAdminAdd.EndDate.Caption)<i class="fa-solid fa-asterisk ew-required"></i></label>
                <div><slot class="ew-slot" name="tpx_CrewFormalEducationForAdmin_EndDate"></slot></div>
            </div>
        </div>
    </div>
    <div class="row"><!-- buttons .row -->
        <div class="d-flex mb-2"><!-- buttons offset -->
            <button class="btn btn-primary ew-btn ms-auto primary-black-clr gray-bg" id="btn-add-entry">
                @(CurrentLanguage == "en-US" ? "Add Entry" : "Tambah")
            </button>
        </div><!-- /buttons offset -->
    </div>
    <div class="table-responsive">
        <table class="table table-bordered table-hover table-sm ew-table table-head-fixed" id="ForAdminTable" data-isset="true">
            <thead>
                <tr class="ew-table-header">
                    <th class="ew-list-option-header w-1" data-name="button"></th>
                    <th class="ew-list-option-header text-nowrap" data-name="sequence"><span></span></th>
                    <th data-name="EducationLevel" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewFormalEducationForAdminAdd.EducationLevel.Caption)
                    </th>
                    <th data-name="SchoolName" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewFormalEducationForAdminAdd.SchoolName.Caption)
                    </th>
                    <th data-name="City" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewFormalEducationForAdminAdd.City.Caption)
                    </th>              
                    <th data-name="Attachment" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewFormalEducationForAdminAdd.Attachment.Caption)
                    </th>
                    <th data-name="StartDate" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewFormalEducationForAdminAdd.StartDate.Caption)
                    </th>
                    <th data-name="EndDate" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewFormalEducationForAdminAdd.EndDate.Caption)
                    </th>         
                    <th data-name="CreatedByUserID" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewFormalEducationForAdminAdd.CreatedByUserID.Caption)
                    </th>
                    <th data-name="CreatedDateTime" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewFormalEducationForAdminAdd.CreatedDateTime.Caption)
                    </th>
                    <th data-name="LastUpdatedByUserID" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewFormalEducationForAdminAdd.LastUpdatedByUserID.Caption)
                    </th>
                    <th data-name="LastUpdatedDateTime" class="ew-table-header-cell theadnowrap">
                        @Html.Raw(crewFormalEducationForAdminAdd.LastUpdatedDateTime.Caption)
                    </th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
    <div id="r_MTCrewID" class="mb-3 row">
        <label for="x_MTCrewID" class="col-sm-2 col-form-label">@Html.Raw(crewFormalEducationForAdminAdd.MTCrewID.Caption)</label>
        <div class="col-sm-10"><slot class="ew-slot" name="tpx_CrewFormalEducationForAdmin_MTCrewID"></slot></div>
    </div>
    <div id="proceed-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="proceed-modal-dialog-title" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="proceed-modal-dialog-title" class="modal-title">
                        @(CurrentLanguage == "en-US" ? "Warning" : "Peringatan")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p> 
                        @{
                            if (CurrentLanguage == "en-US")
                            {
                                <span>There are error(s) in this tab.</span><br/>
                                <span>If you choose to Proceed, any unsaved data will be lost.</span><br/>
                                <span>Do you want to Proceed?</span>
                            }
                            else
                            {
                                <span>Masih ada error di tab ini.</span><br/>
                                <span>Jika Anda memilih Lanjutkan, data yang belum disimpan akan hilang.</span><br/>
                                <span>Apakah Anda ingin melanjutkan?</span>
                            }
                        }
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger ew-btn" id="btn-proceed" type="button">
                        @(CurrentLanguage == "en-US" ? "Proceed" : "Lanjutkan")
                    </button>
                    <button class="btn btn-default ew-btn" id="btn-proceed-cancel" type="button" data-bs-dismiss="modal">
                        @(CurrentLanguage == "en-US" ? "Cancel" : "Batal")
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div id="loading-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content">
                <div class="modal-body">
                    <p class="text-center mb-0">
                        @(CurrentLanguage == "en-US" ? "Saving..." : "Menyimpan...")
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div id="delete-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="delete-modal-dialog-title" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="delete-modal-dialog-title" class="modal-title">
                        @(CurrentLanguage == "en-US" ? "Confirmation" : "Konfirmasi")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        @(CurrentLanguage == "en-US" ? "Are you sure you want to delete?" : "Anda yakin ingin menghapus?")
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary ew-btn" id="btn-delete" type="button">
                        @(CurrentLanguage == "en-US" ? "Yes" : "Iya")
                    </button>
                    <button class="btn btn-default ew-btn" id="btn-delete-cancel" type="button" data-bs-dismiss="modal">
                        @(CurrentLanguage == "en-US" ? "No" : "Tidak")
                    </button>
                </div>
            </div>
        </div>
    </div></div>
</template>
@{ crewFormalEducationForAdminAdd.CloseRecordset(); }
@Html.Raw(crewFormalEducationForAdminAdd.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(crewFormalEducationForAdminAdd.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fCrewFormalEducationForAdminadd">@Html.Raw(Language.Phrase("AddBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fCrewFormalEducationForAdminadd" data-href="@AppPath(crewFormalEducationForAdminAdd.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(crewFormalEducationForAdminAdd.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
<script class="ew-apply-template">
loadjs.ready(ew.applyTemplateId, function() {
    var $ = jQuery;
    ew.templateData = { rows: @Html.Raw(ConvertToJson(crewFormalEducationForAdminAdd.Rows)) };
    ew.applyTemplate("tpd_CrewFormalEducationForAdminadd", "tpm_CrewFormalEducationForAdminadd", "CrewFormalEducationForAdminadd", "@(crewFormalEducationForAdminAdd.Export)", "CrewFormalEducationForAdmin", ew.templateData.rows[0], @(crewFormalEducationForAdminAdd.IsModal ? "true" : "false"));
    loadjs.done("customtemplate");
});
</script>
@crewFormalEducationForAdminAdd.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("CrewFormalEducationForAdmin");
});
</script>
<script>
loadjs.ready("load", function() {
    // Startup script
    // Write your table-specific startup script here
    // document.write("page loaded");

    // Get the current URL
    const currentUrlObject = new URL(window.location.href);
    // get the current URL without Add or Edit for assigning active class in tabs
    const currentUrlWithoutAddEdit = currentUrlObject.href.replace(/Add|Edit/g, "");
    // Create a new URLSearchParams object based on the current URL's search parameters
    const urlQueryParams = new URLSearchParams(currentUrlObject.search);
    // Extract the value of the crewID query parameter
    const currentlyEditedCrewID = urlQueryParams.get('crewID');
    const selectedLanguage = ew.vars['languages']['languages'].filter(obj => obj.selected === true)[0];
    const parentUrl = ew.PATH_BASE;
    const tableName = "CrewFormalEducationForAdmin";
    const pageType = "add";
    const pageTypeCapital = "Add";
    const formID = `f${tableName}${pageType}`;
    const addEntryUrl = `${parentUrl}${tableName}${pageTypeCapital}?crewID=${currentlyEditedCrewID}`;
    let isChangeTabApproved = false;
    const adminAndEmployeeStatusApi = 'get-admin-and-employee-status';
    $.ajax({
        url: `${parentUrl}api/Registration/${adminAndEmployeeStatusApi}`,
        method: 'GET',
        data: {
            crewID: currentlyEditedCrewID
        },
        success: function(response) {
            if (response.success) {
                const isAdmin = response.data.IsAdmin;
                if (isAdmin) {
                    if (currentlyEditedCrewID === null) {
                        window.location.replace(`${ew.PATH_BASE}RegistrationEdit/-1`);
                    }
                    const customCancelButton = $('<button/>', {
                        'class': 'btn btn-danger ew-btn ms-auto primary-red-bg primary-white-clr',
                        'id': 'btn-custom-cancel',
                        'type': 'button',
                        'text': `${ew.language.phrase("CancelBtn")}`,
                    }).click(function() {
                        if (window[formID].modified) {
                            ew.prompt(ew.language.phrase("ConfirmCancel"), result => {
                                if (result) {
                                    isChangeTabApproved = true;
                                    window.location.href = `${ew.PATH_BASE}RegistrationList`;
                                }
                              });
                        } else {
                            isChangeTabApproved = true;
                            window.location.href = `${ew.PATH_BASE}RegistrationList`;
                        }
                    });
                    $('#btn-cancel').after(customCancelButton);
                    $('#btn-cancel').remove();
                } else {
                    if (currentlyEditedCrewID === null) {
                        window.location.replace(`${ew.PATH_BASE}index`);
                    }
                    $('#btn-cancel').remove();
                }
            } else {
                ew.showToast(response.errorMessage);
            }
        },
        error: function(xhr, textStatus, errorThrown) {
            ew.showToast(errorThrown);
        }
    });

    // Iterate over each anchor element inside the nav-tabs
    $(".nav-tabs .nav-item a").each(function() {
        const href = $(this).attr("href");
        const hrefWithoutAddEdit = href.replace(/Add|Edit/g, "");
        // Check if the href contains current page's url
        if (currentUrlWithoutAddEdit.includes(hrefWithoutAddEdit)) {
            // add class and attribute
            $(this).addClass("active");
            $(this).attr("aria-current", "page");
        }
        // Check if the href contains "Edit" or "Add"
        if (href.includes("Edit")) {
            // Add "/" and the currently edited crew ID to the href
            const newHref = href + "/" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        } else if (href.includes("Add")) {
            // Add "?crewID=" and the currently edited crew ID to the href
            const newHref = href + "?crewID=" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        }
    });

    // start code for auto capitalize first letter of each word
    $('#x_SchoolName').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    $('#x_City').on('input', function() {
        $(this).val($(this).val().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
    });
    // end code for auto capitalize first letter of each word
    let format = "yyyy",
        options = {
            localization: {
                locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                hourCycle: format.match(/H/) ? "h24" : "h12",
                format,
                ...ew.language.phrase("datetimepicker")
            },
            display: {
                icons: {
                    previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                    next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                },
                components: {
                    hours: false,
                    minutes: false,
                    seconds: false,
                    date: false,
                    month: false
                },
                theme: ew.isDark() ? "dark" : "auto"
            }
        };
    ew.createDateTimePicker(formID, "x_StartDate", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
    ew.createDateTimePicker(formID, "x_EndDate", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
    const entryButton = $('<button/>', {
        'class': 'btn btn-primary ew-btn ms-auto primary-black-clr gray-bg',
        'id': 'btn-entry',
        'type': 'button',
        'text': (selectedLanguage.id === 'en-US') ? `Add Entry` : `Tambah`
    }).click(function() {
        const validateAddEntryResult = validateAddEntry({ isAllEmptyAllowed: false });
        if (validateAddEntryResult === 'valid') {
            $('#loading-modal-dialog').modal('show');
            const targetUrlRelative = addEntryUrl;
            addEntry({ redirectUrlWhenSuccess: targetUrlRelative });
        } else {
            scrollToFirstInvalidInput();
        }
    });
    $('#btn-add-entry').after(entryButton);
    $('#btn-add-entry').remove();
    $('#btn-delete').click(function() {
        const selectedTableID = $(this).attr('selected-table-id');
        $.ajax({
            url: `${parentUrl}api/delete/${tableName}/${selectedTableID}`,
            type: 'GET',
            success: function(res) {
                if (res && res.success) {
                    $('#delete-modal-dialog').modal('hide');
                    isChangeTabApproved = true;
                    proceedToLink(addEntryUrl);
                } else {
                    $('#delete-modal-dialog').modal('hide');
                    ew.showToast(res.failureMessage);
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                ew.showToast(errorThrown);
                $('#delete-modal-dialog').modal('hide');
            }
        });
    });

    // to auto clear error message when focus for file fields
    $('#x_Attachment').on('focus', function() {
        $(this).removeClass('is-invalid');
    });
    $('#ft_x_Attachment button').on("click", function () {
      window[formID].modified = true;
    });

    // Target the ol element that has breadcrumb class
    const $breadCrumbOl = $('.breadcrumb').first();

    // Delete the ol element that has breadcrumb class
    $breadCrumbOl.remove();
    $('#btn-action').remove();
    $('.ew-buttons > .col-sm-10').removeClass('col-sm-10').addClass('d-flex mb-3');
    $('.ew-buttons > .offset-sm-2').removeClass('offset-sm-2');

    //  programatically change the value of MTCrewID input and then hide it
    $('#x_MTCrewID').val(currentlyEditedCrewID);
    $('div#r_MTCrewID').hide();

    // get list of crew bank accounts via API
    const uploadFolderName = "uploads";
    const baseUrl = currentUrlObject.origin + ew.PATH_BASE;
    const apiEndpoint = 'crew-formal-education-for-admin';
    $.ajax({
      url: `${parentUrl}api/Registration/${apiEndpoint}`,
      method: 'GET',
      data: {
        crewID: currentlyEditedCrewID
      },
      success: function(response) {
        if (response.success) {
          // Parse the data in the response
          const dataArray = response.data;
          const tbody = $('#ForAdminTable tbody'); // select the tbody element
          if (dataArray.length > 0) {
              const tableName = "CrewFormalEducationForAdmin";
              for (let rowIndex = 0; rowIndex < dataArray.length; rowIndex++) {
                const row = dataArray[rowIndex];
                const rowID = row['ID'];
                delete row['ID']; // delete ID for easier looping for table columns
                const tr = $('<tr>'); // create a new tr element 

                // first td for dropdown
                const buttonsTd = $('<td>').addClass('ew-list-option-body w-1');
                const buttonDropdownDiv = $('<div>').addClass('btn-group btn-group-sm ew-btn-dropdown');
                const dropdownButton = $('<button>')
                    .addClass('btn-default btn dropdown-toggle')
                    .attr('type', 'button')
                    .attr('data-title', 'Options')
                    .attr('data-bs-toggle', 'dropdown')
                    .attr('data-bs-auto-close', 'true');
                const dropdownButtonIcon = $('<i>').addClass('fa-solid fa-bars ew-icon').attr('data-phrase', 'ButtonListOptions');
                const dropdownButtonIconSpan = $('<span>').addClass('visually-hidden').text('Options');
                const dropdownUl = $('<ul>').addClass('dropdown-menu ew-dropdown-menu ew-list-options');
                const firstDropdownLi = $('<li>');
                const editUrl = `${parentUrl}${tableName}Edit/${rowID}?crewID=${currentlyEditedCrewID}`;
                const editAnchor = $('<a>')
                    .addClass('ew-row-link ew-edit dropdown-item')
                    .attr('data-caption', 'Edit')
                    .attr('href', editUrl)
                    .on('click', function(event) {
                        event.preventDefault();
                        isChangeTabApproved = true;
                        proceedToLink(editUrl);
                    });
                const editAnchorIcon = $('<i>').addClass('fa-solid fa-pen ew-icon me-2').attr('data-phrase', 'EditLink');
                const editAnchorSpan = $('<span>').addClass('visually-hidden').text('Edit');
                const editAnchorText= 'Edit';
                const secondDropdownLi = $('<li>');
                const deleteAnchor = $('<a>')
                    .addClass('ew-row-link dropdown-item')
                    .attr('data-caption', 'Delete')
                    .on('click', function(event) {
                        event.preventDefault();
                        $('#btn-delete').attr('selected-table-id', rowID);
                        $('#delete-modal-dialog').modal('show');
                    });
                const deleteAnchorIcon = $('<i>').addClass('fa-solid fa-trash ew-icon me-2').attr('data-phrase', 'DeleteLink');
                const deleteAnchorSpan = $('<span>').addClass('visually-hidden').text('Delete');
                const deleteAnchorText= 'Delete';
                deleteAnchorIcon.append(deleteAnchorSpan);
                deleteAnchor.append(deleteAnchorIcon);
                deleteAnchor.append(deleteAnchorText);
                secondDropdownLi.append(deleteAnchor);
                editAnchorIcon.append(editAnchorSpan);
                editAnchor.append(editAnchorIcon);
                editAnchor.append(editAnchorText);
                firstDropdownLi.append(editAnchor);
                dropdownUl.append(firstDropdownLi);
                dropdownUl.append(secondDropdownLi);
                dropdownButtonIcon.append(dropdownButtonIconSpan);
                dropdownButton.append(dropdownButtonIcon);
                buttonDropdownDiv.append(dropdownButton);
                buttonDropdownDiv.append(dropdownUl);
                buttonsTd.append(buttonDropdownDiv);
                tr.append(buttonsTd);

                // second td for sequence
                const sequenceTd = $('<td>').addClass('ew-list-option-body text-nowrap').attr('data-name', 'sequence');
                const sequenceNumberString = (rowIndex + 1).toString() + '.';
                const sequenceSpan = $('<span>').text(sequenceNumberString);
                sequenceTd.append(sequenceSpan);
                tr.append(sequenceTd);

                // remaining td for each column
                for (const columnName of Object.keys(row)) {
                  const dataTd = $('<td>');
                  const columnValue = row[columnName];
                  if (columnName === "Attachment") {
                    dataTd.addClass("text-center");
                    const individualCodeNumber = columnValue.split('-')[0];
                    const imageUrl = `${baseUrl}${uploadFolderName}/${individualCodeNumber}/${columnValue}`;
                    const anchorLink = $('<a>', {
                      href: imageUrl,
                      target: '_blank'
                    });
                    anchorLink.text("Attachment");
                    dataTd.append(anchorLink);
                  } else if (columnName === "StartDate" || columnName === "EndDate") {
                    const dataSpan = $('<span class="text-nowrap">').text(columnValue);
                    dataTd.append(dataSpan);
                  } else {
                    const dataSpan = $('<span>').text(columnValue);
                    dataTd.append(dataSpan);
                  }
                  tr.append(dataTd);
                }
                tbody.append(tr);
              }
          } else {
              const columnsCount = $('#ForAdminTable th.ew-table-header-cell').length;
              for (let rowIndex = 0; rowIndex < 3; rowIndex++) {
                const tr = $('<tr>'); // create a new tr element 

                // 1 is for buttons dropdown(for edit) column and 1 for sequence number column
                const emptyTdWithColspan = $('<td>').html('&nbsp;').attr('colspan', 2); 
                tr.append(emptyTdWithColspan);
                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {
                  const emptyTd = $('<td>').html('&nbsp;');
                  tr.append(emptyTd);
                }
                tbody.append(tr);
              }
          }
        } else {
          // Handle the error
          ew.showToast(response.errorMessage);
        }
      },
      error: function(xhr, textStatus, errorThrown) {
        // Handle the error
        ew.showToast(errorThrown);
      }
    });
    const errorMessage = urlQueryParams.get('errorMessage');
    if (errorMessage !== null) {
        const decodedErrorMessage = decodeURIComponent(errorMessage);
        ew.showToast(decodedErrorMessage);
        urlQueryParams.delete('errorMessage');
        currentUrlObject.search = urlQueryParams.toString();
        history.pushState(null, '', currentUrlObject);
    }

    // AUTO SAVE WHEN MOVING FROM THIS TAB
    $(window).on('beforeunload', function(event) {
        if (!isChangeTabApproved && window[formID].modified) {
            event.preventDefault();
            event.returnValue = '';
            return '';
        }
    });
    $("#btn-proceed").click(function() {
        isChangeTabApproved = true;
        const targetUrlRelative = $(this).attr('target-url-relative');
        $('#approve-modal-dialog').modal('hide');
        proceedToLink(targetUrlRelative);
    });
    $('ul.nav.nav-tabs li.nav-item a.nav-link').on('click', function(event) {
        event.preventDefault();
        const targetUrlRelative = $(this).attr('href');
        if (window[formID].modified) {
            const validateAddEntryResult = validateAddEntry({ isAllEmptyAllowed: true });
            if (validateAddEntryResult === 'valid') {
                $('#loading-modal-dialog').modal('show');
                addEntry({ redirectUrlWhenSuccess: targetUrlRelative });
            } else if (validateAddEntryResult === 'empty') {
                isChangeTabApproved = true;
                proceedToLink(targetUrlRelative);
            } else if (validateAddEntryResult === 'invalid') {
                scrollToFirstInvalidInput();
                $('#btn-proceed').attr('target-url-relative', targetUrlRelative);
                $('#proceed-modal-dialog').modal('show');
            }
        } else {
            isChangeTabApproved = true;
            proceedToLink(targetUrlRelative);
        }
    });
    function proceedToLink(targetUrlRelative) {
        const baseUrl = new URL(window.location.href).origin;
        const targetUrl = new URL(baseUrl + targetUrlRelative);
        window.location.href = targetUrl.href;
    }
    function scrollToFirstInvalidInput() {
        const invalidInput = $("input.is-invalid:first");
        if (invalidInput.length > 0) { // Check if an invalid input is found
            const offset = invalidInput.offset().top; // Calculate the offset of the invalid input element from the top of the page
            const windowHeight = $(window).height(); // Calculate the height of the viewport
            const scrollPosition = offset - (windowHeight / 2); // Calculate the scroll position to center the invalid input element
            $("html, body").animate({ // Animate the scroll to the center position
                scrollTop: scrollPosition
            }, 1000); // Adjust the duration as needed (in milliseconds)
        }
    }
    function addEntry({ redirectUrlWhenSuccess }) {
        isChangeTabApproved = true;
        let formData = $(`form#${formID}`).serialize();
        $('input[type="checkbox"]').each(function() {
            // Jika checkbox tidak dicentang dan tidak ada di hasil serialize(),
            // tambahkan nilai 0 ke hasil serialize()
            if (!this.checked && formData.indexOf(this.name) === -1) {
                formData += '&' + this.name + '=0';
            }
        });
        const formDataUrlSearchParams = new URLSearchParams(formData);
        formDataUrlSearchParams.set('x_StartDate', new Date($('#x_StartDate').val(), 0, 1).toISOString());
        formDataUrlSearchParams.set('x_EndDate', new Date($('#x_EndDate').val(), 0, 1).toISOString());
        formData = formDataUrlSearchParams.toString();
        $.ajax({
            url: addEntryUrl,
            type: 'POST',
            data: formData,
            success: function(res) {
                const $errorDiv = $(res).find('div.ew-error'); // res is a string containing html document
                $('#loading-modal-dialog').modal('hide');
                if ($errorDiv.length > 0) {
                    ew.showToast($errorDiv.text());
                } else {
                    proceedToLink(redirectUrlWhenSuccess);
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                $('#loading-modal-dialog').modal('hide');
                isChangeTabApproved = false;
                ew.showToast(errorThrown);
            }
        });
    }
    function validateAddEntry({ isAllEmptyAllowed }) {
        let formErrorCount = 0;
        let formEmptyCount = 0;
        let isNotEmpty = true;
        const emptyFieldNames = [];
        const emptyFileFieldNames = [];
        function validateRequiredField(fieldName) {
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (fieldValue === '' || fieldValue === null) {
                return false;
            } else {
                return true;
            }
        }
        function validateRequiredFileField(fieldName) {
            const fieldNameWithPrefix = `fn_x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (fieldValue === '') {
                return false;
            } else {
                return true;
            }
        }
        function validateYearField(fieldName) {
            const regexErrorMessage = (selectedLanguage.id === 'en-US') ? "Must contain 4 digits" : "Harus terdiri dari 4 angka";
            const invalidRangeErrorMessage = (selectedLanguage.id === 'en-US') ? "Must be between 1900 and current year" : "Harus di antara 1900 dan tahun sekarang";
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            const yearRegex = /^\d{4}$/;
            if (!yearRegex.test(fieldValue)) {  
                window[formID].fields[fieldName].addError({ custom: regexErrorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: regexErrorMessage });
                return false;
            }
            const year = parseInt(fieldValue, 10);
            const currentYear = new Date().getFullYear();
            if (year < 1900 || year > currentYear) {
                window[formID].fields[fieldName].addError({ custom: invalidRangeErrorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: invalidRangeErrorMessage });
                return false;
            }
            return true;
        }
        function validateFieldWithRegex(fieldName, errorMessage, regex) {
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldValue = $(`#${fieldNameWithPrefix}`).val();
            if (!regex.test(fieldValue)) {  
                window[formID].fields[fieldName].addError({ custom: errorMessage });
                window[formID].fields[fieldName].updateFeedback();
                window[formID].addError(fieldName, { custom: errorMessage });
                return false;
            } else {
                return true;
            }
        }
        function displayRequiredFieldError(fieldName) {
            const errorMessage = (selectedLanguage.id === 'en-US') ? "Please enter required field" : "Masukkan input yang dibutuhkan";
            const fieldNameWithPrefix = `x_${fieldName}`;
            const fieldCaption = $(`label[for=${fieldNameWithPrefix}]`).text();
            const errorMessageWithFieldName = `${errorMessage} - ${fieldCaption}`;
            window[formID].fields[fieldName].addError({ custom: errorMessageWithFieldName });
            window[formID].fields[fieldName].updateFeedback();
            window[formID].addError(fieldName, { custom: errorMessageWithFieldName });
        }
        function displayRequiredFileFieldError(fieldName) {
            displayRequiredFieldError(fieldName);
            const fieldNameWithPrefix = `x_${fieldName}`;
            $(`#${fieldNameWithPrefix}`).addClass('is-invalid');
        }
        const noDigitsRegex = /^[^0-9]+$/;
        const noDigitsRegexErrorMessage = (selectedLanguage.id === 'en-US') ? "Must not contain digits" : "Tidak boleh mengandung angka";
        isNotEmpty = validateRequiredField("EducationLevel");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("EducationLevel");
            } else {
                displayRequiredFieldError("EducationLevel");
            }
        }
        isNotEmpty = validateRequiredField("SchoolName");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("SchoolName");
            } else {
                displayRequiredFieldError("SchoolName");
            }
        }
        isNotEmpty = validateRequiredField("City");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("City");
            } else {
                displayRequiredFieldError("City");
            }
        } else {
            formErrorCount += validateFieldWithRegex("City",  noDigitsRegexErrorMessage, noDigitsRegex) ? 0 : 1;
        }
        isNotEmpty = validateRequiredFileField("Attachment");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFileFieldNames.push("Attachment");
            } else {
                displayRequiredFileFieldError("Attachment");
            }
        }
        isNotEmpty = validateRequiredField("StartDate");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("StartDate");
            } else {
                displayRequiredFieldError("StartDate");
            }
        } else {
            formErrorCount += validateYearField("StartDate") ? 0 : 1;
        }
        isNotEmpty = validateRequiredField("EndDate");
        if (!isNotEmpty) {
            formEmptyCount += 1;
            formErrorCount += 1;
            if (isAllEmptyAllowed) {
                emptyFieldNames.push("EndDate");
            } else {
                displayRequiredFieldError("EndDate");
            }
        } else {
            formErrorCount += validateYearField("EndDate") ? 0 : 1;
        }
        if (formEmptyCount === 6) {
            return 'empty';
        }
        if (emptyFieldNames.length > 0) {
            for (const fieldName of emptyFieldNames) {
                displayRequiredFieldError(fieldName);
            }
        }
        if (emptyFileFieldNames.length > 0) {
            for (const fieldName of emptyFileFieldNames) {
                displayRequiredFileFieldError(fieldName);
            }
        }
        if (formErrorCount > 0) {
            return 'invalid';
        } else {
            return 'valid';
        }
    }

    // gmandayu: notification need to read.
    const getUnreadNotificationUrl = `${parentUrl}api/Notification/unread-notification`;
    function loadPage() {
        $.ajax({
            url: getUnreadNotificationUrl,
            method: 'GET',
            success: function(response) {
                const notificationIcon = document.querySelector('.nav-icon.fa-bell');
                if(response.success)
                {
                    notificationIcon.classList.add('animate');
                }
                else 
                {
                    notificationIcon.classList.remove('animate');
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                console.error('Kesalahan saat memuat notifikasi:', errorThrown);
            }
        });
    }
    $(document).ready(function() {
        loadPage();
    });
});
</script>
