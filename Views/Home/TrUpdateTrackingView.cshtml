@{
    // View
    View = this;

    // Check action result
    if (trUpdateTrackingView.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!trUpdateTrackingView.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
@if (!trUpdateTrackingView.IsExport()) {
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
}
@if (!trUpdateTrackingView.IsExport()) {
<div class="btn-toolbar ew-toolbar">
    @trUpdateTrackingView.ExportOptions.RenderBody()
    @trUpdateTrackingView.OtherOptions.RenderBody()
</div>
}
@trUpdateTrackingView.ShowPageHeader()
@trUpdateTrackingView.ShowMessages()
<main class="view">
<form name="fTRUpdateTrackingview" id="fTRUpdateTrackingview" class="ew-form ew-view-form overlay-wrapper" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (!trUpdateTrackingView.IsExport()) {
<script>
var currentTable = @Html.Raw(ConvertToJson(trUpdateTrackingView.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { TRUpdateTracking: currentTable } });
var currentPageID = ew.PAGE_ID = "view";
var currentForm;
var fTRUpdateTrackingview;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fTRUpdateTrackingview")
        .setPageId("view")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
}
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="modal" value="@ConvertToInt(trUpdateTrackingView.IsModal)">
<table class="@(trUpdateTrackingView.TableClass)">
@if (trUpdateTrackingView.ID.Visible) { // trUpdateTrackingView.ID.Visible (begin)
    <tr id="r_ID" @Html.Raw(trUpdateTrackingView.ID.RowAttributes)>
        <td class="@(trUpdateTrackingView.TableLeftColumnClass)"><span id="elh_TRUpdateTracking_ID">@Html.Raw(trUpdateTrackingView.ID.Caption)</span></td>
        <td data-name="ID" @Html.Raw(trUpdateTrackingView.ID.CellAttributes)>
<span id="el_TRUpdateTracking_ID">
<span @Html.Raw(trUpdateTrackingView.ID.ViewAttributes)>
@Html.Raw(trUpdateTrackingView.ID.GetViewValue())</span>
</span></td>
    </tr>
} @* trUpdateTrackingView.ID.Visible (end) *@
@if (trUpdateTrackingView.MTCrewID.Visible) { // trUpdateTrackingView.MTCrewID.Visible (begin)
    <tr id="r_MTCrewID" @Html.Raw(trUpdateTrackingView.MTCrewID.RowAttributes)>
        <td class="@(trUpdateTrackingView.TableLeftColumnClass)"><span id="elh_TRUpdateTracking_MTCrewID">@Html.Raw(trUpdateTrackingView.MTCrewID.Caption)</span></td>
        <td data-name="MTCrewID" @Html.Raw(trUpdateTrackingView.MTCrewID.CellAttributes)>
<span id="el_TRUpdateTracking_MTCrewID">
<span @Html.Raw(trUpdateTrackingView.MTCrewID.ViewAttributes)>
@Html.Raw(trUpdateTrackingView.MTCrewID.GetViewValue())</span>
</span></td>
    </tr>
} @* trUpdateTrackingView.MTCrewID.Visible (end) *@
@if (trUpdateTrackingView.TabName.Visible) { // trUpdateTrackingView.TabName.Visible (begin)
    <tr id="r_TabName" @Html.Raw(trUpdateTrackingView.TabName.RowAttributes)>
        <td class="@(trUpdateTrackingView.TableLeftColumnClass)"><span id="elh_TRUpdateTracking_TabName">@Html.Raw(trUpdateTrackingView.TabName.Caption)</span></td>
        <td data-name="TabName" @Html.Raw(trUpdateTrackingView.TabName.CellAttributes)>
<span id="el_TRUpdateTracking_TabName">
<span @Html.Raw(trUpdateTrackingView.TabName.ViewAttributes)>
@Html.Raw(trUpdateTrackingView.TabName.GetViewValue())</span>
</span></td>
    </tr>
} @* trUpdateTrackingView.TabName.Visible (end) *@
@if (trUpdateTrackingView.ColumnName.Visible) { // trUpdateTrackingView.ColumnName.Visible (begin)
    <tr id="r_ColumnName" @Html.Raw(trUpdateTrackingView.ColumnName.RowAttributes)>
        <td class="@(trUpdateTrackingView.TableLeftColumnClass)"><span id="elh_TRUpdateTracking_ColumnName">@Html.Raw(trUpdateTrackingView.ColumnName.Caption)</span></td>
        <td data-name="ColumnName" @Html.Raw(trUpdateTrackingView.ColumnName.CellAttributes)>
<span id="el_TRUpdateTracking_ColumnName">
<span @Html.Raw(trUpdateTrackingView.ColumnName.ViewAttributes)>
@Html.Raw(trUpdateTrackingView.ColumnName.GetViewValue())</span>
</span></td>
    </tr>
} @* trUpdateTrackingView.ColumnName.Visible (end) *@
@if (trUpdateTrackingView.ChangeType.Visible) { // trUpdateTrackingView.ChangeType.Visible (begin)
    <tr id="r_ChangeType" @Html.Raw(trUpdateTrackingView.ChangeType.RowAttributes)>
        <td class="@(trUpdateTrackingView.TableLeftColumnClass)"><span id="elh_TRUpdateTracking_ChangeType">@Html.Raw(trUpdateTrackingView.ChangeType.Caption)</span></td>
        <td data-name="ChangeType" @Html.Raw(trUpdateTrackingView.ChangeType.CellAttributes)>
<span id="el_TRUpdateTracking_ChangeType">
<span @Html.Raw(trUpdateTrackingView.ChangeType.ViewAttributes)>
@Html.Raw(trUpdateTrackingView.ChangeType.GetViewValue())</span>
</span></td>
    </tr>
} @* trUpdateTrackingView.ChangeType.Visible (end) *@
</table>
@{ trUpdateTrackingView.CloseRecordset(); }
</form>
</main>
@trUpdateTrackingView.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
@if (!trUpdateTrackingView.IsExport()) {
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
}
