@{
    // View
    View = this;

    // Check action result
    if (crewFormalEducationForAdminViewModeList.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!crewFormalEducationForAdminViewModeList.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
@if (!crewFormalEducationForAdminViewModeList.IsExport()) {
<script>
var currentTable = @Html.Raw(ConvertToJson(crewFormalEducationForAdminViewModeList.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { CrewFormalEducationForAdminViewMode: currentTable } });
var currentPageID = ew.PAGE_ID = "list";
var currentForm;
var @(crewFormalEducationForAdminViewModeList.FormName);
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("@(crewFormalEducationForAdminViewModeList.FormName)")
        .setPageId("list")
        .setFormKeyCountName("@(crewFormalEducationForAdminViewModeList.FormKeyCountName)")

        // Dynamic selection lists
        .setLists({
            "EducationLevel": @Html.Raw(crewFormalEducationForAdminViewModeList.EducationLevel.ToClientList(crewFormalEducationForAdminViewModeList)),
            "SchoolName": @Html.Raw(crewFormalEducationForAdminViewModeList.SchoolName.ToClientList(crewFormalEducationForAdminViewModeList)),
            "City": @Html.Raw(crewFormalEducationForAdminViewModeList.City.ToClientList(crewFormalEducationForAdminViewModeList)),
            "Attachment": @Html.Raw(crewFormalEducationForAdminViewModeList.Attachment.ToClientList(crewFormalEducationForAdminViewModeList)),
            "StartDate": @Html.Raw(crewFormalEducationForAdminViewModeList.StartDate.ToClientList(crewFormalEducationForAdminViewModeList)),
            "EndDate": @Html.Raw(crewFormalEducationForAdminViewModeList.EndDate.ToClientList(crewFormalEducationForAdminViewModeList)),
            "MTCrewID": @Html.Raw(crewFormalEducationForAdminViewModeList.MTCrewID.ToClientList(crewFormalEducationForAdminViewModeList)),
            "CreatedByUserID": @Html.Raw(crewFormalEducationForAdminViewModeList.CreatedByUserID.ToClientList(crewFormalEducationForAdminViewModeList)),
            "CreatedDateTime": @Html.Raw(crewFormalEducationForAdminViewModeList.CreatedDateTime.ToClientList(crewFormalEducationForAdminViewModeList)),
            "LastUpdatedByUserID": @Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.ToClientList(crewFormalEducationForAdminViewModeList)),
            "LastUpdatedDateTime": @Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.ToClientList(crewFormalEducationForAdminViewModeList)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
ew.PREVIEW_SELECTOR = ".ew-preview-btn";
ew.PREVIEW_MODAL_CLASS = "modal modal-fullscreen-sm-down";
ew.PREVIEW_ROW = true;
ew.PREVIEW_SINGLE_ROW = false;
ew.PREVIEW || ew.ready("head", ew.PATH_BASE + "js/preview.min.js?v=20.1.0", "preview");
</script>
<script>
window.Tabulator || loadjs([
    ew.PATH_BASE + "js/tabulator.min.js?v=20.1.5",
    ew.PATH_BASE + "css/@CssFile("tabulator_bootstrap5.css", false)?v=20.1.5"
], "import");
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
}
@if (!crewFormalEducationForAdminViewModeList.IsExport()) {
<div class="btn-toolbar ew-toolbar">
@if (crewFormalEducationForAdminViewModeList.TotalRecords > 0 && crewFormalEducationForAdminViewModeList.ExportOptions.Visible) {
    crewFormalEducationForAdminViewModeList.ExportOptions.Render("body");
}
@if (crewFormalEducationForAdminViewModeList.ImportOptions.Visible) {
    crewFormalEducationForAdminViewModeList.ImportOptions.Render("body");
}
@if (crewFormalEducationForAdminViewModeList.SearchOptions.Visible) {
    crewFormalEducationForAdminViewModeList.SearchOptions.Render("body");
}
@if (crewFormalEducationForAdminViewModeList.FilterOptions.Visible) {
    crewFormalEducationForAdminViewModeList.FilterOptions.Render("body");
}
</div>
}
@if (crewFormalEducationForAdminViewModeList.ShowCurrentFilter) {
    crewFormalEducationForAdminViewModeList.ShowFilterList();
}
@if (!crewFormalEducationForAdminViewModeList.IsModal) {
<form name="fCrewFormalEducationForAdminViewModesrch" id="fCrewFormalEducationForAdminViewModesrch" class="ew-form ew-ext-search-form" action="@AppPath(CurrentPageName())" autocomplete="on">
<div id="fCrewFormalEducationForAdminViewModesrch_search_panel" class="mb-2 mb-sm-0 @(crewFormalEducationForAdminViewModeList.SearchPanelClass)"><!-- .ew-search-panel -->
<script>
var currentTable = @Html.Raw(ConvertToJson(crewFormalEducationForAdminViewModeList.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { CrewFormalEducationForAdminViewMode: currentTable } });
var currentForm;
var fCrewFormalEducationForAdminViewModesrch, currentSearchForm, currentAdvancedSearchForm;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery,
        fields = currentTable.fields;

    // Form object for search
    let form = new ew.FormBuilder()
        .setId("fCrewFormalEducationForAdminViewModesrch")
        .setPageId("list")

        // Add fields
        .setFields([

            ["EducationLevel", [], fields.EducationLevel.isInvalid],
            ["SchoolName", [], fields.SchoolName.isInvalid],
            ["City", [], fields.City.isInvalid],
            ["Attachment", [], fields.Attachment.isInvalid],
            ["StartDate", [], fields.StartDate.isInvalid],
            ["EndDate", [], fields.EndDate.isInvalid],
            ["MTCrewID", [], fields.MTCrewID.isInvalid],
            ["CreatedByUserID", [], fields.CreatedByUserID.isInvalid],
            ["CreatedDateTime", [], fields.CreatedDateTime.isInvalid],
            ["LastUpdatedByUserID", [], fields.LastUpdatedByUserID.isInvalid],
            ["LastUpdatedDateTime", [], fields.LastUpdatedDateTime.isInvalid]
        ])
        // Validate form
        .setValidate(
            async function () {
                if (!this.validateRequired)
                    return true; // Ignore validation
                let fobj = this.getForm();

                // Validate fields
                if (!this.validateFields())
                    return false;

                // Call Form_CustomValidate event
                if (!(await this.customValidate?.(fobj) ?? true)) {
                    this.focus();
                    return false;
                }
                return true;
            }
        )

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "EducationLevel": @Html.Raw(crewFormalEducationForAdminViewModeList.EducationLevel.ToClientList(crewFormalEducationForAdminViewModeList)),
            "SchoolName": @Html.Raw(crewFormalEducationForAdminViewModeList.SchoolName.ToClientList(crewFormalEducationForAdminViewModeList)),
            "City": @Html.Raw(crewFormalEducationForAdminViewModeList.City.ToClientList(crewFormalEducationForAdminViewModeList)),
            "Attachment": @Html.Raw(crewFormalEducationForAdminViewModeList.Attachment.ToClientList(crewFormalEducationForAdminViewModeList)),
            "StartDate": @Html.Raw(crewFormalEducationForAdminViewModeList.StartDate.ToClientList(crewFormalEducationForAdminViewModeList)),
            "EndDate": @Html.Raw(crewFormalEducationForAdminViewModeList.EndDate.ToClientList(crewFormalEducationForAdminViewModeList)),
            "MTCrewID": @Html.Raw(crewFormalEducationForAdminViewModeList.MTCrewID.ToClientList(crewFormalEducationForAdminViewModeList)),
            "CreatedByUserID": @Html.Raw(crewFormalEducationForAdminViewModeList.CreatedByUserID.ToClientList(crewFormalEducationForAdminViewModeList)),
            "CreatedDateTime": @Html.Raw(crewFormalEducationForAdminViewModeList.CreatedDateTime.ToClientList(crewFormalEducationForAdminViewModeList)),
            "LastUpdatedByUserID": @Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.ToClientList(crewFormalEducationForAdminViewModeList)),
            "LastUpdatedDateTime": @Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.ToClientList(crewFormalEducationForAdminViewModeList)),
        })

        // Filters
        .setFilterList(@Html.Raw(await crewFormalEducationForAdminViewModeList.GetFilterList()))
        .build();
    window[form.id] = form;
    currentSearchForm = form;
    loadjs.done(form.id);
});
</script>
<input type="hidden" name="cmd" value="search">
@if (Security.CanSearch) {
if (!crewFormalEducationForAdminViewModeList.IsExport() && Empty(crewFormalEducationForAdminViewModeList.CurrentAction) && crewFormalEducationForAdminViewModeList.HasSearchFields()) { @* Show search form (begin) *@
<div class="ew-extended-search container-fluid ps-2">
<div class="row mb-0 d-none@(crewFormalEducationForAdminViewModeList.SearchFieldsPerRow > 0 ? " row-cols-sm-" + crewFormalEducationForAdminViewModeList.SearchFieldsPerRow : "")">
@{
    // Render search row
    crewFormalEducationForAdminViewModeList.RowType = RowType.Search;
    crewFormalEducationForAdminViewModeList.ResetAttributes();
    await crewFormalEducationForAdminViewModeList.RenderRow();
}
@if (crewFormalEducationForAdminViewModeList.EducationLevel.Visible) { // crewFormalEducationForAdminViewModeList.EducationLevel.Visible (begin)
    if (!crewFormalEducationForAdminViewModeList.EducationLevel.UseFilter) {
        crewFormalEducationForAdminViewModeList.SearchColumnCount++;
    }
    <div id="xs_EducationLevel" class="col-sm-auto d-sm-flex align-items-start mb-3 px-0 pe-sm-2@(crewFormalEducationForAdminViewModeList.EducationLevel.UseFilter ? " ew-filter-field" : "")">
        <select
            id="x_EducationLevel"
            name="x_EducationLevel[]"
            class="form-control ew-select@(crewFormalEducationForAdminViewModeList.EducationLevel.IsInvalidClass)"
            data-select2-id="fCrewFormalEducationForAdminViewModesrch_x_EducationLevel"
            data-table="CrewFormalEducationForAdminViewMode"
            data-field="x_EducationLevel"
            data-caption="@Html.Raw(HtmlEncode(RemoveHtml(crewFormalEducationForAdminViewModeList.EducationLevel.Caption)))"
            data-filter="true"
            multiple
            size="1"
            data-value-separator="@(crewFormalEducationForAdminViewModeList.EducationLevel.DisplayValueSeparatorAttribute)"
            data-placeholder="@(HtmlEncode(crewFormalEducationForAdminViewModeList.EducationLevel.PlaceHolder))"
            data-ew-action="update-options"
            @Html.Raw(crewFormalEducationForAdminViewModeList.EducationLevel.EditAttributes)>
            @(crewFormalEducationForAdminViewModeList.EducationLevel.SelectOptionListHtml("x_EducationLevel", true))
        </select>
        <div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminViewModeList.EducationLevel.GetErrorMessage(false))</div>
        <script>
        loadjs.ready("fCrewFormalEducationForAdminViewModesrch", function() {
            var options = {
                name: "x_EducationLevel",
                selectId: "fCrewFormalEducationForAdminViewModesrch_x_EducationLevel",
                ajax: { id: "x_EducationLevel", form: "fCrewFormalEducationForAdminViewModesrch", limit: ew.FILTER_PAGE_SIZE, data: { ajax: "filter" } }
            };
            options = Object.assign({}, ew.filterOptions, options, ew.vars.tables.CrewFormalEducationForAdminViewMode.fields.EducationLevel.filterOptions);
            ew.createFilter(options);
        });
        </script>
    </div><!-- /.col-sm-auto -->
} @* crewFormalEducationForAdminViewModeList.EducationLevel.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.SchoolName.Visible) { // crewFormalEducationForAdminViewModeList.SchoolName.Visible (begin)
    if (!crewFormalEducationForAdminViewModeList.SchoolName.UseFilter) {
        crewFormalEducationForAdminViewModeList.SearchColumnCount++;
    }
    <div id="xs_SchoolName" class="col-sm-auto d-sm-flex align-items-start mb-3 px-0 pe-sm-2@(crewFormalEducationForAdminViewModeList.SchoolName.UseFilter ? " ew-filter-field" : "")">
        <select
            id="x_SchoolName"
            name="x_SchoolName[]"
            class="form-control ew-select@(crewFormalEducationForAdminViewModeList.SchoolName.IsInvalidClass)"
            data-select2-id="fCrewFormalEducationForAdminViewModesrch_x_SchoolName"
            data-table="CrewFormalEducationForAdminViewMode"
            data-field="x_SchoolName"
            data-caption="@Html.Raw(HtmlEncode(RemoveHtml(crewFormalEducationForAdminViewModeList.SchoolName.Caption)))"
            data-filter="true"
            multiple
            size="1"
            data-value-separator="@(crewFormalEducationForAdminViewModeList.SchoolName.DisplayValueSeparatorAttribute)"
            data-placeholder="@(HtmlEncode(crewFormalEducationForAdminViewModeList.SchoolName.PlaceHolder))"
            data-ew-action="update-options"
            @Html.Raw(crewFormalEducationForAdminViewModeList.SchoolName.EditAttributes)>
            @(crewFormalEducationForAdminViewModeList.SchoolName.SelectOptionListHtml("x_SchoolName", true))
        </select>
        <div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminViewModeList.SchoolName.GetErrorMessage(false))</div>
        <script>
        loadjs.ready("fCrewFormalEducationForAdminViewModesrch", function() {
            var options = {
                name: "x_SchoolName",
                selectId: "fCrewFormalEducationForAdminViewModesrch_x_SchoolName",
                ajax: { id: "x_SchoolName", form: "fCrewFormalEducationForAdminViewModesrch", limit: ew.FILTER_PAGE_SIZE, data: { ajax: "filter" } }
            };
            options = Object.assign({}, ew.filterOptions, options, ew.vars.tables.CrewFormalEducationForAdminViewMode.fields.SchoolName.filterOptions);
            ew.createFilter(options);
        });
        </script>
    </div><!-- /.col-sm-auto -->
} @* crewFormalEducationForAdminViewModeList.SchoolName.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.City.Visible) { // crewFormalEducationForAdminViewModeList.City.Visible (begin)
    if (!crewFormalEducationForAdminViewModeList.City.UseFilter) {
        crewFormalEducationForAdminViewModeList.SearchColumnCount++;
    }
    <div id="xs_City" class="col-sm-auto d-sm-flex align-items-start mb-3 px-0 pe-sm-2@(crewFormalEducationForAdminViewModeList.City.UseFilter ? " ew-filter-field" : "")">
        <select
            id="x_City"
            name="x_City[]"
            class="form-control ew-select@(crewFormalEducationForAdminViewModeList.City.IsInvalidClass)"
            data-select2-id="fCrewFormalEducationForAdminViewModesrch_x_City"
            data-table="CrewFormalEducationForAdminViewMode"
            data-field="x_City"
            data-caption="@Html.Raw(HtmlEncode(RemoveHtml(crewFormalEducationForAdminViewModeList.City.Caption)))"
            data-filter="true"
            multiple
            size="1"
            data-value-separator="@(crewFormalEducationForAdminViewModeList.City.DisplayValueSeparatorAttribute)"
            data-placeholder="@(HtmlEncode(crewFormalEducationForAdminViewModeList.City.PlaceHolder))"
            data-ew-action="update-options"
            @Html.Raw(crewFormalEducationForAdminViewModeList.City.EditAttributes)>
            @(crewFormalEducationForAdminViewModeList.City.SelectOptionListHtml("x_City", true))
        </select>
        <div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminViewModeList.City.GetErrorMessage(false))</div>
        <script>
        loadjs.ready("fCrewFormalEducationForAdminViewModesrch", function() {
            var options = {
                name: "x_City",
                selectId: "fCrewFormalEducationForAdminViewModesrch_x_City",
                ajax: { id: "x_City", form: "fCrewFormalEducationForAdminViewModesrch", limit: ew.FILTER_PAGE_SIZE, data: { ajax: "filter" } }
            };
            options = Object.assign({}, ew.filterOptions, options, ew.vars.tables.CrewFormalEducationForAdminViewMode.fields.City.filterOptions);
            ew.createFilter(options);
        });
        </script>
    </div><!-- /.col-sm-auto -->
} @* crewFormalEducationForAdminViewModeList.City.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.Attachment.Visible) { // crewFormalEducationForAdminViewModeList.Attachment.Visible (begin)
    if (!crewFormalEducationForAdminViewModeList.Attachment.UseFilter) {
        crewFormalEducationForAdminViewModeList.SearchColumnCount++;
    }
    <div id="xs_Attachment" class="col-sm-auto d-sm-flex align-items-start mb-3 px-0 pe-sm-2@(crewFormalEducationForAdminViewModeList.Attachment.UseFilter ? " ew-filter-field" : "")">
        <select
            id="x_Attachment"
            name="x_Attachment[]"
            class="form-control ew-select@(crewFormalEducationForAdminViewModeList.Attachment.IsInvalidClass)"
            data-select2-id="fCrewFormalEducationForAdminViewModesrch_x_Attachment"
            data-table="CrewFormalEducationForAdminViewMode"
            data-field="x_Attachment"
            data-caption="@Html.Raw(HtmlEncode(RemoveHtml(crewFormalEducationForAdminViewModeList.Attachment.Caption)))"
            data-filter="true"
            multiple
            size="1"
            data-value-separator="@(crewFormalEducationForAdminViewModeList.Attachment.DisplayValueSeparatorAttribute)"
            data-placeholder="@(HtmlEncode(crewFormalEducationForAdminViewModeList.Attachment.PlaceHolder))"
            data-ew-action="update-options"
            @Html.Raw(crewFormalEducationForAdminViewModeList.Attachment.EditAttributes)>
            @(crewFormalEducationForAdminViewModeList.Attachment.SelectOptionListHtml("x_Attachment", true))
        </select>
        <div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminViewModeList.Attachment.GetErrorMessage(false))</div>
        <script>
        loadjs.ready("fCrewFormalEducationForAdminViewModesrch", function() {
            var options = {
                name: "x_Attachment",
                selectId: "fCrewFormalEducationForAdminViewModesrch_x_Attachment",
                ajax: { id: "x_Attachment", form: "fCrewFormalEducationForAdminViewModesrch", limit: ew.FILTER_PAGE_SIZE, data: { ajax: "filter" } }
            };
            options = Object.assign({}, ew.filterOptions, options, ew.vars.tables.CrewFormalEducationForAdminViewMode.fields.Attachment.filterOptions);
            ew.createFilter(options);
        });
        </script>
    </div><!-- /.col-sm-auto -->
} @* crewFormalEducationForAdminViewModeList.Attachment.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.StartDate.Visible) { // crewFormalEducationForAdminViewModeList.StartDate.Visible (begin)
    if (!crewFormalEducationForAdminViewModeList.StartDate.UseFilter) {
        crewFormalEducationForAdminViewModeList.SearchColumnCount++;
    }
    <div id="xs_StartDate" class="col-sm-auto d-sm-flex align-items-start mb-3 px-0 pe-sm-2@(crewFormalEducationForAdminViewModeList.StartDate.UseFilter ? " ew-filter-field" : "")">
        <select
            id="x_StartDate"
            name="x_StartDate[]"
            class="form-control ew-select@(crewFormalEducationForAdminViewModeList.StartDate.IsInvalidClass)"
            data-select2-id="fCrewFormalEducationForAdminViewModesrch_x_StartDate"
            data-table="CrewFormalEducationForAdminViewMode"
            data-field="x_StartDate"
            data-caption="@Html.Raw(HtmlEncode(RemoveHtml(crewFormalEducationForAdminViewModeList.StartDate.Caption)))"
            data-filter="true"
            multiple
            size="1"
            data-value-separator="@(crewFormalEducationForAdminViewModeList.StartDate.DisplayValueSeparatorAttribute)"
            data-placeholder="@(HtmlEncode(crewFormalEducationForAdminViewModeList.StartDate.PlaceHolder))"
            data-ew-action="update-options"
            @Html.Raw(crewFormalEducationForAdminViewModeList.StartDate.EditAttributes)>
            @(crewFormalEducationForAdminViewModeList.StartDate.SelectOptionListHtml("x_StartDate", true))
        </select>
        <div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminViewModeList.StartDate.GetErrorMessage(false))</div>
        <script>
        loadjs.ready("fCrewFormalEducationForAdminViewModesrch", function() {
            var options = {
                name: "x_StartDate",
                selectId: "fCrewFormalEducationForAdminViewModesrch_x_StartDate",
                ajax: { id: "x_StartDate", form: "fCrewFormalEducationForAdminViewModesrch", limit: ew.FILTER_PAGE_SIZE, data: { ajax: "filter" } }
            };
            options = Object.assign({}, ew.filterOptions, options, ew.vars.tables.CrewFormalEducationForAdminViewMode.fields.StartDate.filterOptions);
            ew.createFilter(options);
        });
        </script>
    </div><!-- /.col-sm-auto -->
} @* crewFormalEducationForAdminViewModeList.StartDate.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.EndDate.Visible) { // crewFormalEducationForAdminViewModeList.EndDate.Visible (begin)
    if (!crewFormalEducationForAdminViewModeList.EndDate.UseFilter) {
        crewFormalEducationForAdminViewModeList.SearchColumnCount++;
    }
    <div id="xs_EndDate" class="col-sm-auto d-sm-flex align-items-start mb-3 px-0 pe-sm-2@(crewFormalEducationForAdminViewModeList.EndDate.UseFilter ? " ew-filter-field" : "")">
        <select
            id="x_EndDate"
            name="x_EndDate[]"
            class="form-control ew-select@(crewFormalEducationForAdminViewModeList.EndDate.IsInvalidClass)"
            data-select2-id="fCrewFormalEducationForAdminViewModesrch_x_EndDate"
            data-table="CrewFormalEducationForAdminViewMode"
            data-field="x_EndDate"
            data-caption="@Html.Raw(HtmlEncode(RemoveHtml(crewFormalEducationForAdminViewModeList.EndDate.Caption)))"
            data-filter="true"
            multiple
            size="1"
            data-value-separator="@(crewFormalEducationForAdminViewModeList.EndDate.DisplayValueSeparatorAttribute)"
            data-placeholder="@(HtmlEncode(crewFormalEducationForAdminViewModeList.EndDate.PlaceHolder))"
            data-ew-action="update-options"
            @Html.Raw(crewFormalEducationForAdminViewModeList.EndDate.EditAttributes)>
            @(crewFormalEducationForAdminViewModeList.EndDate.SelectOptionListHtml("x_EndDate", true))
        </select>
        <div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminViewModeList.EndDate.GetErrorMessage(false))</div>
        <script>
        loadjs.ready("fCrewFormalEducationForAdminViewModesrch", function() {
            var options = {
                name: "x_EndDate",
                selectId: "fCrewFormalEducationForAdminViewModesrch_x_EndDate",
                ajax: { id: "x_EndDate", form: "fCrewFormalEducationForAdminViewModesrch", limit: ew.FILTER_PAGE_SIZE, data: { ajax: "filter" } }
            };
            options = Object.assign({}, ew.filterOptions, options, ew.vars.tables.CrewFormalEducationForAdminViewMode.fields.EndDate.filterOptions);
            ew.createFilter(options);
        });
        </script>
    </div><!-- /.col-sm-auto -->
} @* crewFormalEducationForAdminViewModeList.EndDate.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.MTCrewID.Visible) { // crewFormalEducationForAdminViewModeList.MTCrewID.Visible (begin)
    if (!crewFormalEducationForAdminViewModeList.MTCrewID.UseFilter) {
        crewFormalEducationForAdminViewModeList.SearchColumnCount++;
    }
    <div id="xs_MTCrewID" class="col-sm-auto d-sm-flex align-items-start mb-3 px-0 pe-sm-2@(crewFormalEducationForAdminViewModeList.MTCrewID.UseFilter ? " ew-filter-field" : "")">
        <select
            id="x_MTCrewID"
            name="x_MTCrewID[]"
            class="form-control ew-select@(crewFormalEducationForAdminViewModeList.MTCrewID.IsInvalidClass)"
            data-select2-id="fCrewFormalEducationForAdminViewModesrch_x_MTCrewID"
            data-table="CrewFormalEducationForAdminViewMode"
            data-field="x_MTCrewID"
            data-caption="@Html.Raw(HtmlEncode(RemoveHtml(crewFormalEducationForAdminViewModeList.MTCrewID.Caption)))"
            data-filter="true"
            multiple
            size="1"
            data-value-separator="@(crewFormalEducationForAdminViewModeList.MTCrewID.DisplayValueSeparatorAttribute)"
            data-placeholder="@(HtmlEncode(crewFormalEducationForAdminViewModeList.MTCrewID.PlaceHolder))"
            data-ew-action="update-options"
            @Html.Raw(crewFormalEducationForAdminViewModeList.MTCrewID.EditAttributes)>
            @(crewFormalEducationForAdminViewModeList.MTCrewID.SelectOptionListHtml("x_MTCrewID", true))
        </select>
        <div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminViewModeList.MTCrewID.GetErrorMessage(false))</div>
        <script>
        loadjs.ready("fCrewFormalEducationForAdminViewModesrch", function() {
            var options = {
                name: "x_MTCrewID",
                selectId: "fCrewFormalEducationForAdminViewModesrch_x_MTCrewID",
                ajax: { id: "x_MTCrewID", form: "fCrewFormalEducationForAdminViewModesrch", limit: ew.FILTER_PAGE_SIZE, data: { ajax: "filter" } }
            };
            options = Object.assign({}, ew.filterOptions, options, ew.vars.tables.CrewFormalEducationForAdminViewMode.fields.MTCrewID.filterOptions);
            ew.createFilter(options);
        });
        </script>
    </div><!-- /.col-sm-auto -->
} @* crewFormalEducationForAdminViewModeList.MTCrewID.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.CreatedByUserID.Visible) { // crewFormalEducationForAdminViewModeList.CreatedByUserID.Visible (begin)
    if (!crewFormalEducationForAdminViewModeList.CreatedByUserID.UseFilter) {
        crewFormalEducationForAdminViewModeList.SearchColumnCount++;
    }
    <div id="xs_CreatedByUserID" class="col-sm-auto d-sm-flex align-items-start mb-3 px-0 pe-sm-2@(crewFormalEducationForAdminViewModeList.CreatedByUserID.UseFilter ? " ew-filter-field" : "")">
        <select
            id="x_CreatedByUserID"
            name="x_CreatedByUserID[]"
            class="form-control ew-select@(crewFormalEducationForAdminViewModeList.CreatedByUserID.IsInvalidClass)"
            data-select2-id="fCrewFormalEducationForAdminViewModesrch_x_CreatedByUserID"
            data-table="CrewFormalEducationForAdminViewMode"
            data-field="x_CreatedByUserID"
            data-caption="@Html.Raw(HtmlEncode(RemoveHtml(crewFormalEducationForAdminViewModeList.CreatedByUserID.Caption)))"
            data-filter="true"
            multiple
            size="1"
            data-value-separator="@(crewFormalEducationForAdminViewModeList.CreatedByUserID.DisplayValueSeparatorAttribute)"
            data-placeholder="@(HtmlEncode(crewFormalEducationForAdminViewModeList.CreatedByUserID.PlaceHolder))"
            data-ew-action="update-options"
            @Html.Raw(crewFormalEducationForAdminViewModeList.CreatedByUserID.EditAttributes)>
            @(crewFormalEducationForAdminViewModeList.CreatedByUserID.SelectOptionListHtml("x_CreatedByUserID", true))
        </select>
        <div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminViewModeList.CreatedByUserID.GetErrorMessage(false))</div>
        <script>
        loadjs.ready("fCrewFormalEducationForAdminViewModesrch", function() {
            var options = {
                name: "x_CreatedByUserID",
                selectId: "fCrewFormalEducationForAdminViewModesrch_x_CreatedByUserID",
                ajax: { id: "x_CreatedByUserID", form: "fCrewFormalEducationForAdminViewModesrch", limit: ew.FILTER_PAGE_SIZE, data: { ajax: "filter" } }
            };
            options = Object.assign({}, ew.filterOptions, options, ew.vars.tables.CrewFormalEducationForAdminViewMode.fields.CreatedByUserID.filterOptions);
            ew.createFilter(options);
        });
        </script>
    </div><!-- /.col-sm-auto -->
} @* crewFormalEducationForAdminViewModeList.CreatedByUserID.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.CreatedDateTime.Visible) { // crewFormalEducationForAdminViewModeList.CreatedDateTime.Visible (begin)
    if (!crewFormalEducationForAdminViewModeList.CreatedDateTime.UseFilter) {
        crewFormalEducationForAdminViewModeList.SearchColumnCount++;
    }
    <div id="xs_CreatedDateTime" class="col-sm-auto d-sm-flex align-items-start mb-3 px-0 pe-sm-2@(crewFormalEducationForAdminViewModeList.CreatedDateTime.UseFilter ? " ew-filter-field" : "")">
        <select
            id="x_CreatedDateTime"
            name="x_CreatedDateTime[]"
            class="form-control ew-select@(crewFormalEducationForAdminViewModeList.CreatedDateTime.IsInvalidClass)"
            data-select2-id="fCrewFormalEducationForAdminViewModesrch_x_CreatedDateTime"
            data-table="CrewFormalEducationForAdminViewMode"
            data-field="x_CreatedDateTime"
            data-caption="@Html.Raw(HtmlEncode(RemoveHtml(crewFormalEducationForAdminViewModeList.CreatedDateTime.Caption)))"
            data-filter="true"
            multiple
            size="1"
            data-value-separator="@(crewFormalEducationForAdminViewModeList.CreatedDateTime.DisplayValueSeparatorAttribute)"
            data-placeholder="@(HtmlEncode(crewFormalEducationForAdminViewModeList.CreatedDateTime.PlaceHolder))"
            data-ew-action="update-options"
            @Html.Raw(crewFormalEducationForAdminViewModeList.CreatedDateTime.EditAttributes)>
            @(crewFormalEducationForAdminViewModeList.CreatedDateTime.SelectOptionListHtml("x_CreatedDateTime", true))
        </select>
        <div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminViewModeList.CreatedDateTime.GetErrorMessage(false))</div>
        <script>
        loadjs.ready("fCrewFormalEducationForAdminViewModesrch", function() {
            var options = {
                name: "x_CreatedDateTime",
                selectId: "fCrewFormalEducationForAdminViewModesrch_x_CreatedDateTime",
                ajax: { id: "x_CreatedDateTime", form: "fCrewFormalEducationForAdminViewModesrch", limit: ew.FILTER_PAGE_SIZE, data: { ajax: "filter" } }
            };
            options = Object.assign({}, ew.filterOptions, options, ew.vars.tables.CrewFormalEducationForAdminViewMode.fields.CreatedDateTime.filterOptions);
            ew.createFilter(options);
        });
        </script>
    </div><!-- /.col-sm-auto -->
} @* crewFormalEducationForAdminViewModeList.CreatedDateTime.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.Visible) { // crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.Visible (begin)
    if (!crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.UseFilter) {
        crewFormalEducationForAdminViewModeList.SearchColumnCount++;
    }
    <div id="xs_LastUpdatedByUserID" class="col-sm-auto d-sm-flex align-items-start mb-3 px-0 pe-sm-2@(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.UseFilter ? " ew-filter-field" : "")">
        <select
            id="x_LastUpdatedByUserID"
            name="x_LastUpdatedByUserID[]"
            class="form-control ew-select@(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.IsInvalidClass)"
            data-select2-id="fCrewFormalEducationForAdminViewModesrch_x_LastUpdatedByUserID"
            data-table="CrewFormalEducationForAdminViewMode"
            data-field="x_LastUpdatedByUserID"
            data-caption="@Html.Raw(HtmlEncode(RemoveHtml(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.Caption)))"
            data-filter="true"
            multiple
            size="1"
            data-value-separator="@(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.DisplayValueSeparatorAttribute)"
            data-placeholder="@(HtmlEncode(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.PlaceHolder))"
            data-ew-action="update-options"
            @Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.EditAttributes)>
            @(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.SelectOptionListHtml("x_LastUpdatedByUserID", true))
        </select>
        <div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.GetErrorMessage(false))</div>
        <script>
        loadjs.ready("fCrewFormalEducationForAdminViewModesrch", function() {
            var options = {
                name: "x_LastUpdatedByUserID",
                selectId: "fCrewFormalEducationForAdminViewModesrch_x_LastUpdatedByUserID",
                ajax: { id: "x_LastUpdatedByUserID", form: "fCrewFormalEducationForAdminViewModesrch", limit: ew.FILTER_PAGE_SIZE, data: { ajax: "filter" } }
            };
            options = Object.assign({}, ew.filterOptions, options, ew.vars.tables.CrewFormalEducationForAdminViewMode.fields.LastUpdatedByUserID.filterOptions);
            ew.createFilter(options);
        });
        </script>
    </div><!-- /.col-sm-auto -->
} @* crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.Visible) { // crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.Visible (begin)
    if (!crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.UseFilter) {
        crewFormalEducationForAdminViewModeList.SearchColumnCount++;
    }
    <div id="xs_LastUpdatedDateTime" class="col-sm-auto d-sm-flex align-items-start mb-3 px-0 pe-sm-2@(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.UseFilter ? " ew-filter-field" : "")">
        <select
            id="x_LastUpdatedDateTime"
            name="x_LastUpdatedDateTime[]"
            class="form-control ew-select@(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.IsInvalidClass)"
            data-select2-id="fCrewFormalEducationForAdminViewModesrch_x_LastUpdatedDateTime"
            data-table="CrewFormalEducationForAdminViewMode"
            data-field="x_LastUpdatedDateTime"
            data-caption="@Html.Raw(HtmlEncode(RemoveHtml(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.Caption)))"
            data-filter="true"
            multiple
            size="1"
            data-value-separator="@(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.DisplayValueSeparatorAttribute)"
            data-placeholder="@(HtmlEncode(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.PlaceHolder))"
            data-ew-action="update-options"
            @Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.EditAttributes)>
            @(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.SelectOptionListHtml("x_LastUpdatedDateTime", true))
        </select>
        <div class="invalid-feedback">@Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.GetErrorMessage(false))</div>
        <script>
        loadjs.ready("fCrewFormalEducationForAdminViewModesrch", function() {
            var options = {
                name: "x_LastUpdatedDateTime",
                selectId: "fCrewFormalEducationForAdminViewModesrch_x_LastUpdatedDateTime",
                ajax: { id: "x_LastUpdatedDateTime", form: "fCrewFormalEducationForAdminViewModesrch", limit: ew.FILTER_PAGE_SIZE, data: { ajax: "filter" } }
            };
            options = Object.assign({}, ew.filterOptions, options, ew.vars.tables.CrewFormalEducationForAdminViewMode.fields.LastUpdatedDateTime.filterOptions);
            ew.createFilter(options);
        });
        </script>
    </div><!-- /.col-sm-auto -->
} @* crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.Visible (end) *@
</div><!-- /.row -->
<div id="tpsd_CrewFormalEducationForAdminViewModelist" class="ew-custom-template-search"></div>
<template id="tpsm_CrewFormalEducationForAdminViewModelist">
<div id="CrewFormalEducationForAdminViewModelist"><div id="schedule-modal-dialog" aria-hidden="true" aria-modal="true" class="modal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="schedule-modal-dialog-title" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="schedule-modal-dialog-title" class="modal-title">
                    @(CurrentLanguage == "en-US" ? "Create Document Check Schedule" : "Tambah Jadwal Cek Dokumen")
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="add-schedule" class="ew-form ew-add-form" autocomplete="off">
                    <div id="r_DocumentCheckDateTime" class="row">
                        <label for="x_DocumentCheckDateTime" class="col-sm-4 col-form-label ew-label">
                            @(CurrentLanguage == "en-US" ? "Document Check Date Time" : "Tanggal Dan Jam Cek Dokumen")
                        </label>
                        <div class="col-sm-8">
                            <div>
                                <span id="el_DocumentCheckDateTime">
                                    <div class="input-group" id="datetimepicker_DocumentCheckDateTime" data-target-input="nearest" data-td-target-toggle="nearest">
                                        <input
                                            type="text"
                                            name="x_DocumentCheckDateTime"
                                            id="x_DocumentCheckDateTime"
                                            value=""
                                            placeholder="Document Check Date Time"
                                            data-format-pattern="yyyy-MM-dd HH:mm:sszzz"
                                            class="form-control tempus-dominus-input"
                                            data-target="#datetimepicker_DocumentCheckDateTime"
                                        />
                                    </div>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div id="r_DocumentCheckNotes" class="row">
                        <label for="x_DocumentCheckNotes" class="col-sm-4 col-form-label ew-label">
                            @(CurrentLanguage == "en-US" ? "Notes" : "Catatan")
                        </label>
                        <div class="col-sm-8">
                            <div>
                                <span id="el_DocumentCheckNotes">
                                    <textarea
                                        name="x_DocumentCheckNotes"
                                        id="x_DocumentCheckNotes"
                                        cols="50"
                                        rows="4"
                                        maxlength="255"
                                        placeholder=@(CurrentLanguage == "en-US" ? "Notes" : "Catatan")
                                        class="form-control"
                                    ></textarea>
                                </span>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary ew-btn" id="btn-add-schedule" type="button">
                    @(CurrentLanguage == "en-US" ? "Create Document Check Schedule" : "Tambah Jadwal Cek Dokumen")
                </button>
                <button class="btn btn-default ew-btn" id="btn-cancel-schedule" type="button" data-bs-dismiss="modal">
                    @(CurrentLanguage == "en-US" ? "Cancel" : "Batal")
                </button>
            </div>
        </div>
    </div>
</div>
<!-- REVISE MODAL DIALOG. FIXME! -->
<div id="revise-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="ew-modal-dialog-title" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="ew-modal-dialog-title" class="modal-title">
                    @(CurrentLanguage == "en-US" ? "Revise Crew Candidate" : "Tinjau Ulang Kandidat Kru")
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="revise-form" class="ew-form ew-add-form" autocomplete="off">
                    <div id="r_RevisedReason" class="row">
                        <label for="x_RevisedReason" class="col-sm-4 col-form-label ew-label">
                            @(CurrentLanguage == "en-US" ? "Revised Reason" : "Alasan Tinjau Ulang")
                        </label>
                        <div class="col-sm-8">
                            <div>
                                <span id="el_RevisedReason">
                                    <textarea
                                        name="x_RevisedReason"
                                        id="x_RevisedReason"
                                        cols="50"
                                        rows="4"
                                        maxlength="255"
                                        placeholder="Revised Reason"
                                        class="form-control"
                                    ></textarea>
                                </span>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-danger ew-btn" id="btn-revise" type="button">
                    @(CurrentLanguage == "en-US" ? "Revise" : "Tinjau Ulang")
                </button>
                <button class="btn btn-default ew-btn" id="btn-cancel" type="button" data-bs-dismiss="modal">
                    @(CurrentLanguage == "en-US" ? "Cancel" : "Batal")
                </button>
            </div>
        </div>
    </div>
</div>
<div id="reject-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-labelledby="ew-modal-dialog-title" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="ew-modal-dialog-title" class="modal-title">
                    @(CurrentLanguage == "en-US" ? "Reject Crew Candidate" : "Tolak Kandidat Kru")
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="reject-form" class="ew-form ew-add-form" autocomplete="off">
                    <div id="r_RejectedReason" class="row">
                        <label for="x_RejectedReason" class="col-sm-4 col-form-label ew-label">
                            @(CurrentLanguage == "en-US" ? "Rejected Reason" : "Alasan Ditolak")
                        </label>
                        <div class="col-sm-8">
                            <div>
                                <span id="el_RejectedReason">
                                    <textarea
                                        name="x_RejectedReason"
                                        id="x_RejectedReason"
                                        cols="50"
                                        rows="4"
                                        maxlength="255"
                                        placeholder="Rejected Reason"
                                        class="form-control"
                                    ></textarea>
                                </span>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-danger ew-btn" id="btn-reject" type="button">
                    @(CurrentLanguage == "en-US" ? "Reject Crew Candidate" : "Tolak Kandidat Kru")
                </button>
                <button class="btn btn-default ew-btn" id="btn-cancel" type="button" data-bs-dismiss="modal">
                    @(CurrentLanguage == "en-US" ? "Cancel" : "Batal")
                </button>
            </div>
        </div>
    </div>
</div>
<div id="loading-modal-dialog" class="modal" aria-hidden="true" data-bs-backdrop="static" tabindex="-1" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-md">
        <div class="modal-content">
            <div class="modal-body">
                <p class="text-center mb-0">
                    @(CurrentLanguage == "en-US" ? "Processing..." : "Sedang memproses...")
                </p>
            </div>
        </div>
    </div>
</div>
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewPersonalDataForAdminViewModeView")">
                @(CurrentLanguage == "en-US" ? "PERSONAL DATA" : "DATA PERSONAL")
            </a>     
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewDocumentForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "DOCUMENTS" : "DOKUMEN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewBankAccountForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "BANK ACCOUNT" : "REKENING BANK")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFamilyForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "FAMILY" : "KELUARGA")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewFormalEducationForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "FORMAL EDUCATION" : "PENDIDIKAN FORMAL")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalCertificateForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "MEDICAL CERTIFICATE / TEST" : "SERTIFIKAT / TES MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewCertificateForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "CERTIFICATES AND QUALIFICATIONS" : "SERTIFIKAT DAN KUALIFIKASI")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewExperienceForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "SEA EXPERIENCE" : "PENGALAMAN BERLAYAR")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewAppraisalForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "APPRAISALS" : "PENILAIAN")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewMedicalHistoryForAdminViewModeList")">
                @(CurrentLanguage == "en-US" ? "MEDICAL HISTORY" : "RIWAYAT MEDIS")
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="@string.Concat(AppPath(), "CrewGeneralDataForAdminViewModeView")">
                @(CurrentLanguage == "en-US" ? "GENERAL" : "UMUM")
            </a>
        </li>
    </ul>
    <div class="table-responsive">
        <table class="table table-bordered table-hover table-sm ew-table table-head-fixed" id="ForAdminTable" data-isset="true">
            <thead>
                <tr class="ew-table-header">
                    <th class="ew-list-option-header w-1" data-name="button"></th>
                    <th class="ew-list-option-header text-nowrap" data-name="sequence"><span></span></th>
                    <th data-name="EducationLevel" class="ew-table-header-cell">
                        @Html.Raw(crewFormalEducationForAdminViewModeList.EducationLevel.Caption)
                    </th>
                    <th data-name="SchoolName" class="ew-table-header-cell">
                        @Html.Raw(crewFormalEducationForAdminViewModeList.SchoolName.Caption)
                    </th>
                    <th data-name="City" class="ew-table-header-cell">
                        @Html.Raw(crewFormalEducationForAdminViewModeList.City.Caption)
                    </th>              
                    <th data-name="Attachment" class="ew-table-header-cell">
                        @Html.Raw(crewFormalEducationForAdminViewModeList.Attachment.Caption)
                    </th>
                    <th data-name="StartDate" class="ew-table-header-cell">
                        @Html.Raw(crewFormalEducationForAdminViewModeList.StartDate.Caption)
                    </th>
                    <th data-name="EndDate" class="ew-table-header-cell">
                        @Html.Raw(crewFormalEducationForAdminViewModeList.EndDate.Caption)
                    </th>         
                    <th data-name="CreatedByUserID" class="ew-table-header-cell">
                        @Html.Raw(crewFormalEducationForAdminViewModeList.CreatedByUserID.Caption)
                    </th>
                    <th data-name="CreatedDateTime" class="ew-table-header-cell">
                        @Html.Raw(crewFormalEducationForAdminViewModeList.CreatedDateTime.Caption)
                    </th>
                    <th data-name="LastUpdatedByUserID" class="ew-table-header-cell">
                        @Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.Caption)
                    </th>
                    <th data-name="LastUpdatedDateTime" class="ew-table-header-cell">
                        @Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.Caption)
                    </th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div> 
</div>
</template>
<div class="row mb-0">
    <div class="col-sm-auto px-0 pe-sm-2">
        <div class="ew-basic-search input-group">
            <input type="search" name="@(Config.TableBasicSearch)" id="@(Config.TableBasicSearch)" class="form-control ew-basic-search-keyword" value="@Html.Raw(HtmlEncode(crewFormalEducationForAdminViewModeList.BasicSearch.SessionKeyword))" placeholder="@(HtmlEncode(Language.Phrase("Search")))" aria-label="@(HtmlEncode(Language.Phrase("Search")))">
            <input type="hidden" name="@(Config.TableBasicSearchType)" id="@(Config.TableBasicSearchType)" class="ew-basic-search-type" value="@(HtmlEncode(crewFormalEducationForAdminViewModeList.BasicSearch.SessionType))">
            <button type="button" data-bs-toggle="dropdown" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" aria-haspopup="true" aria-expanded="false">
                <span id="searchtype">@Html.Raw(crewFormalEducationForAdminViewModeList.BasicSearch.TypeNameShort)</span>
            </button>
            <div class="dropdown-menu dropdown-menu-end">
                <button type="button" class="dropdown-item@(crewFormalEducationForAdminViewModeList.BasicSearch.SessionType == "" ? " active" : "")" form="fCrewFormalEducationForAdminViewModesrch" data-ew-action="search-type">@Html.Raw(Language.Phrase("QuickSearchAuto"))</button>
                <button type="button" class="dropdown-item@(crewFormalEducationForAdminViewModeList.BasicSearch.SessionType == "=" ? " active" : "")" form="fCrewFormalEducationForAdminViewModesrch" data-ew-action="search-type" data-search-type="=">@Html.Raw(Language.Phrase("QuickSearchExact"))</button>
                <button type="button" class="dropdown-item@(crewFormalEducationForAdminViewModeList.BasicSearch.SessionType == "AND" ? " active" : "")" form="fCrewFormalEducationForAdminViewModesrch" data-ew-action="search-type" data-search-type="AND">@Html.Raw(Language.Phrase("QuickSearchAll"))</button>
                <button type="button" class="dropdown-item@(crewFormalEducationForAdminViewModeList.BasicSearch.SessionType == "OR" ? " active" : "")" form="fCrewFormalEducationForAdminViewModesrch" data-ew-action="search-type" data-search-type="OR">@Html.Raw(Language.Phrase("QuickSearchAny"))</button>
            </div>
        </div>
    </div>
    <div class="col-sm-auto mb-3">
        <button class="btn btn-primary" name="btn-submit" id="btn-submit" type="submit">@Html.Raw(Language.Phrase("SearchBtn"))</button>
    </div>
</div>
</div><!-- /.ew-extended-search -->
<script>
loadjs.ready(ew.applyTemplateId, () => ew.applyTemplate("tpsd_CrewFormalEducationForAdminViewModelist", "tpsm_CrewFormalEducationForAdminViewModelist"));
</script>
} @* Show search form (end) *@
}
</div><!-- /.ew-search-panel -->
</form>
}
@crewFormalEducationForAdminViewModeList.ShowPageHeader()
@crewFormalEducationForAdminViewModeList.ShowMessages()
<main class="list @(crewFormalEducationForAdminViewModeList.TotalRecords == 0 && !crewFormalEducationForAdminViewModeList.IsAdd ? " ew-no-record" : "")">
<div id="ew-list">
@if (crewFormalEducationForAdminViewModeList.TotalRecords > 0 || !Empty(crewFormalEducationForAdminViewModeList.CurrentAction)) {
<div class="card ew-card ew-grid@(crewFormalEducationForAdminViewModeList.IsAddOrEdit ? " ew-grid-add-edit" : "") @(crewFormalEducationForAdminViewModeList.TableGridClass)">
<form name="@(crewFormalEducationForAdminViewModeList.FormName)" id="@(crewFormalEducationForAdminViewModeList.FormName)" class="ew-form ew-list-form" action="@AppPath(crewFormalEducationForAdminViewModeList.PageName)" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
@if (crewFormalEducationForAdminViewModeList.IsModal) {
<input type="hidden" name="modal" value="1">
}
<div id="gmp_CrewFormalEducationForAdminViewMode" class="card-body ew-grid-middle-panel @(crewFormalEducationForAdminViewModeList.TableContainerClass)" style="@(crewFormalEducationForAdminViewModeList.TableContainerStyle)">
@if (crewFormalEducationForAdminViewModeList.TotalRecords > 0 || crewFormalEducationForAdminViewModeList.IsGridEdit || crewFormalEducationForAdminViewModeList.IsMultiEdit) {
<table id="tbl_CrewFormalEducationForAdminViewModelist" class="@(crewFormalEducationForAdminViewModeList.TableClass)"><!-- .ew-table -->
<thead>
    <tr class="ew-table-header">
@{
    // Header row
    crewFormalEducationForAdminViewModeList.RowType = RowType.Header;

    // Render list options
    await crewFormalEducationForAdminViewModeList.RenderListOptions();
}
@* Render list options (header, left) *@
@crewFormalEducationForAdminViewModeList.ListOptions.RenderHeader("left", "", "block", crewFormalEducationForAdminViewModeList.TableVar, "CrewFormalEducationForAdminViewModelist")
@if (crewFormalEducationForAdminViewModeList.EducationLevel.Visible) { // crewFormalEducationForAdminViewModeList.EducationLevel.Visible (begin)
        <th data-name="EducationLevel" class="@(crewFormalEducationForAdminViewModeList.EducationLevel.HeaderCellClass)" style="white-space: nowrap;"><div id="elh_CrewFormalEducationForAdminViewMode_EducationLevel" class="CrewFormalEducationForAdminViewMode_EducationLevel">@Html.Raw(crewFormalEducationForAdminViewModeList.RenderFieldHeader(crewFormalEducationForAdminViewModeList.EducationLevel))</div></th>
} @* crewFormalEducationForAdminViewModeList.EducationLevel.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.SchoolName.Visible) { // crewFormalEducationForAdminViewModeList.SchoolName.Visible (begin)
        <th data-name="SchoolName" class="@(crewFormalEducationForAdminViewModeList.SchoolName.HeaderCellClass)" style="white-space: nowrap;"><div id="elh_CrewFormalEducationForAdminViewMode_SchoolName" class="CrewFormalEducationForAdminViewMode_SchoolName">@Html.Raw(crewFormalEducationForAdminViewModeList.RenderFieldHeader(crewFormalEducationForAdminViewModeList.SchoolName))</div></th>
} @* crewFormalEducationForAdminViewModeList.SchoolName.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.City.Visible) { // crewFormalEducationForAdminViewModeList.City.Visible (begin)
        <th data-name="City" class="@(crewFormalEducationForAdminViewModeList.City.HeaderCellClass)" style="white-space: nowrap;"><div id="elh_CrewFormalEducationForAdminViewMode_City" class="CrewFormalEducationForAdminViewMode_City">@Html.Raw(crewFormalEducationForAdminViewModeList.RenderFieldHeader(crewFormalEducationForAdminViewModeList.City))</div></th>
} @* crewFormalEducationForAdminViewModeList.City.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.Attachment.Visible) { // crewFormalEducationForAdminViewModeList.Attachment.Visible (begin)
        <th data-name="Attachment" class="@(crewFormalEducationForAdminViewModeList.Attachment.HeaderCellClass)" style="white-space: nowrap;"><div id="elh_CrewFormalEducationForAdminViewMode_Attachment" class="CrewFormalEducationForAdminViewMode_Attachment">@Html.Raw(crewFormalEducationForAdminViewModeList.RenderFieldHeader(crewFormalEducationForAdminViewModeList.Attachment))</div></th>
} @* crewFormalEducationForAdminViewModeList.Attachment.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.StartDate.Visible) { // crewFormalEducationForAdminViewModeList.StartDate.Visible (begin)
        <th data-name="StartDate" class="@(crewFormalEducationForAdminViewModeList.StartDate.HeaderCellClass)" style="white-space: nowrap;"><div id="elh_CrewFormalEducationForAdminViewMode_StartDate" class="CrewFormalEducationForAdminViewMode_StartDate">@Html.Raw(crewFormalEducationForAdminViewModeList.RenderFieldHeader(crewFormalEducationForAdminViewModeList.StartDate))</div></th>
} @* crewFormalEducationForAdminViewModeList.StartDate.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.EndDate.Visible) { // crewFormalEducationForAdminViewModeList.EndDate.Visible (begin)
        <th data-name="EndDate" class="@(crewFormalEducationForAdminViewModeList.EndDate.HeaderCellClass)" style="white-space: nowrap;"><div id="elh_CrewFormalEducationForAdminViewMode_EndDate" class="CrewFormalEducationForAdminViewMode_EndDate">@Html.Raw(crewFormalEducationForAdminViewModeList.RenderFieldHeader(crewFormalEducationForAdminViewModeList.EndDate))</div></th>
} @* crewFormalEducationForAdminViewModeList.EndDate.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.MTCrewID.Visible) { // crewFormalEducationForAdminViewModeList.MTCrewID.Visible (begin)
        <th data-name="MTCrewID" class="@(crewFormalEducationForAdminViewModeList.MTCrewID.HeaderCellClass)" style="white-space: nowrap;"><div id="elh_CrewFormalEducationForAdminViewMode_MTCrewID" class="CrewFormalEducationForAdminViewMode_MTCrewID">@Html.Raw(crewFormalEducationForAdminViewModeList.RenderFieldHeader(crewFormalEducationForAdminViewModeList.MTCrewID))</div></th>
} @* crewFormalEducationForAdminViewModeList.MTCrewID.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.CreatedByUserID.Visible) { // crewFormalEducationForAdminViewModeList.CreatedByUserID.Visible (begin)
        <th data-name="CreatedByUserID" class="@(crewFormalEducationForAdminViewModeList.CreatedByUserID.HeaderCellClass)" style="white-space: nowrap;"><div id="elh_CrewFormalEducationForAdminViewMode_CreatedByUserID" class="CrewFormalEducationForAdminViewMode_CreatedByUserID">@Html.Raw(crewFormalEducationForAdminViewModeList.RenderFieldHeader(crewFormalEducationForAdminViewModeList.CreatedByUserID))</div></th>
} @* crewFormalEducationForAdminViewModeList.CreatedByUserID.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.CreatedDateTime.Visible) { // crewFormalEducationForAdminViewModeList.CreatedDateTime.Visible (begin)
        <th data-name="CreatedDateTime" class="@(crewFormalEducationForAdminViewModeList.CreatedDateTime.HeaderCellClass)" style="white-space: nowrap;"><div id="elh_CrewFormalEducationForAdminViewMode_CreatedDateTime" class="CrewFormalEducationForAdminViewMode_CreatedDateTime">@Html.Raw(crewFormalEducationForAdminViewModeList.RenderFieldHeader(crewFormalEducationForAdminViewModeList.CreatedDateTime))</div></th>
} @* crewFormalEducationForAdminViewModeList.CreatedDateTime.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.Visible) { // crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.Visible (begin)
        <th data-name="LastUpdatedByUserID" class="@(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.HeaderCellClass)" style="white-space: nowrap;"><div id="elh_CrewFormalEducationForAdminViewMode_LastUpdatedByUserID" class="CrewFormalEducationForAdminViewMode_LastUpdatedByUserID">@Html.Raw(crewFormalEducationForAdminViewModeList.RenderFieldHeader(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID))</div></th>
} @* crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.Visible (end) *@
@if (crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.Visible) { // crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.Visible (begin)
        <th data-name="LastUpdatedDateTime" class="@(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.HeaderCellClass)" style="white-space: nowrap;"><div id="elh_CrewFormalEducationForAdminViewMode_LastUpdatedDateTime" class="CrewFormalEducationForAdminViewMode_LastUpdatedDateTime">@Html.Raw(crewFormalEducationForAdminViewModeList.RenderFieldHeader(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime))</div></th>
} @* crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.Visible (end) *@
@* Render list options (header, right) *@
@crewFormalEducationForAdminViewModeList.ListOptions.RenderHeader("right", "", "block", crewFormalEducationForAdminViewModeList.TableVar, "CrewFormalEducationForAdminViewModelist")
    </tr>
</thead>
<tbody data-page="@(crewFormalEducationForAdminViewModeList.PageNumber)">
@{
    await crewFormalEducationForAdminViewModeList.SetupGrid();
    bool eof = crewFormalEducationForAdminViewModeList.Recordset == null; // DN
}
@while (crewFormalEducationForAdminViewModeList.RecordCount < crewFormalEducationForAdminViewModeList.StopRecord || SameString(crewFormalEducationForAdminViewModeList.RowIndex, "$rowindex$")) { // Begin While
    if (!eof && !SameString(crewFormalEducationForAdminViewModeList.RowIndex, "$rowindex$") &&
        (!crewFormalEducationForAdminViewModeList.IsGridAdd || crewFormalEducationForAdminViewModeList.CurrentMode == "copy") &&
        (!((crewFormalEducationForAdminViewModeList.IsCopy || crewFormalEducationForAdminViewModeList.IsAdd) && crewFormalEducationForAdminViewModeList.RowIndex is int rowIndex && rowIndex == 0))) // DN
        eof = !await crewFormalEducationForAdminViewModeList.Recordset.ReadAsync();
    crewFormalEducationForAdminViewModeList.RecordCount++;
    if (crewFormalEducationForAdminViewModeList.RecordCount >= crewFormalEducationForAdminViewModeList.StartRecord) {
        await crewFormalEducationForAdminViewModeList.SetupRow();
    <tr @Html.Raw(crewFormalEducationForAdminViewModeList.RowAttributes)>
    @* Render list options (body, left) *@
    @crewFormalEducationForAdminViewModeList.ListOptions.RenderBody("left", crewFormalEducationForAdminViewModeList.RowCount, "block", crewFormalEducationForAdminViewModeList.TableVar, "CrewFormalEducationForAdminViewModelist")
    @if (crewFormalEducationForAdminViewModeList.EducationLevel.Visible) { // crewFormalEducationForAdminViewModeList.EducationLevel.Visible (begin)
        <td data-name="EducationLevel" @Html.Raw(crewFormalEducationForAdminViewModeList.EducationLevel.CellAttributes)>
<template id="tpx@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_EducationLevel"><span id="el@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_EducationLevel" class="el_CrewFormalEducationForAdminViewMode_EducationLevel">
<span @Html.Raw(crewFormalEducationForAdminViewModeList.EducationLevel.ViewAttributes)>
@Html.Raw(crewFormalEducationForAdminViewModeList.EducationLevel.GetViewValue())</span>
</span></template>
</td>
    } @* crewFormalEducationForAdminViewModeList.EducationLevel.Visible (end) *@
    @if (crewFormalEducationForAdminViewModeList.SchoolName.Visible) { // crewFormalEducationForAdminViewModeList.SchoolName.Visible (begin)
        <td data-name="SchoolName" @Html.Raw(crewFormalEducationForAdminViewModeList.SchoolName.CellAttributes)>
<template id="tpx@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_SchoolName"><span id="el@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_SchoolName" class="el_CrewFormalEducationForAdminViewMode_SchoolName">
<span @Html.Raw(crewFormalEducationForAdminViewModeList.SchoolName.ViewAttributes)>
@Html.Raw(crewFormalEducationForAdminViewModeList.SchoolName.GetViewValue())</span>
</span></template>
</td>
    } @* crewFormalEducationForAdminViewModeList.SchoolName.Visible (end) *@
    @if (crewFormalEducationForAdminViewModeList.City.Visible) { // crewFormalEducationForAdminViewModeList.City.Visible (begin)
        <td data-name="City" @Html.Raw(crewFormalEducationForAdminViewModeList.City.CellAttributes)>
<template id="tpx@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_City"><span id="el@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_City" class="el_CrewFormalEducationForAdminViewMode_City">
<span @Html.Raw(crewFormalEducationForAdminViewModeList.City.ViewAttributes)>
@Html.Raw(crewFormalEducationForAdminViewModeList.City.GetViewValue())</span>
</span></template>
</td>
    } @* crewFormalEducationForAdminViewModeList.City.Visible (end) *@
    @if (crewFormalEducationForAdminViewModeList.Attachment.Visible) { // crewFormalEducationForAdminViewModeList.Attachment.Visible (begin)
        <td data-name="Attachment" @Html.Raw(crewFormalEducationForAdminViewModeList.Attachment.CellAttributes)>
<template id="tpx@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_Attachment"><span id="el@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_Attachment" class="el_CrewFormalEducationForAdminViewMode_Attachment">
<span>
@Html.Raw(await GetFileViewTag((DbField)crewFormalEducationForAdminViewModeList.Attachment, ConvertToString(crewFormalEducationForAdminViewModeList.Attachment.GetViewValue()), false))
</span>
</span></template>
</td>
    } @* crewFormalEducationForAdminViewModeList.Attachment.Visible (end) *@
    @if (crewFormalEducationForAdminViewModeList.StartDate.Visible) { // crewFormalEducationForAdminViewModeList.StartDate.Visible (begin)
        <td data-name="StartDate" @Html.Raw(crewFormalEducationForAdminViewModeList.StartDate.CellAttributes)>
<template id="tpx@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_StartDate"><span id="el@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_StartDate" class="el_CrewFormalEducationForAdminViewMode_StartDate">
<span @Html.Raw(crewFormalEducationForAdminViewModeList.StartDate.ViewAttributes)>
@Html.Raw(crewFormalEducationForAdminViewModeList.StartDate.GetViewValue())</span>
</span></template>
</td>
    } @* crewFormalEducationForAdminViewModeList.StartDate.Visible (end) *@
    @if (crewFormalEducationForAdminViewModeList.EndDate.Visible) { // crewFormalEducationForAdminViewModeList.EndDate.Visible (begin)
        <td data-name="EndDate" @Html.Raw(crewFormalEducationForAdminViewModeList.EndDate.CellAttributes)>
<template id="tpx@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_EndDate"><span id="el@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_EndDate" class="el_CrewFormalEducationForAdminViewMode_EndDate">
<span @Html.Raw(crewFormalEducationForAdminViewModeList.EndDate.ViewAttributes)>
@Html.Raw(crewFormalEducationForAdminViewModeList.EndDate.GetViewValue())</span>
</span></template>
</td>
    } @* crewFormalEducationForAdminViewModeList.EndDate.Visible (end) *@
    @if (crewFormalEducationForAdminViewModeList.MTCrewID.Visible) { // crewFormalEducationForAdminViewModeList.MTCrewID.Visible (begin)
        <td data-name="MTCrewID" @Html.Raw(crewFormalEducationForAdminViewModeList.MTCrewID.CellAttributes)>
<template id="tpx@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_MTCrewID"><span id="el@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_MTCrewID" class="el_CrewFormalEducationForAdminViewMode_MTCrewID">
<span @Html.Raw(crewFormalEducationForAdminViewModeList.MTCrewID.ViewAttributes)>
@Html.Raw(crewFormalEducationForAdminViewModeList.MTCrewID.GetViewValue())</span>
</span></template>
</td>
    } @* crewFormalEducationForAdminViewModeList.MTCrewID.Visible (end) *@
    @if (crewFormalEducationForAdminViewModeList.CreatedByUserID.Visible) { // crewFormalEducationForAdminViewModeList.CreatedByUserID.Visible (begin)
        <td data-name="CreatedByUserID" @Html.Raw(crewFormalEducationForAdminViewModeList.CreatedByUserID.CellAttributes)>
<template id="tpx@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_CreatedByUserID"><span id="el@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_CreatedByUserID" class="el_CrewFormalEducationForAdminViewMode_CreatedByUserID">
<span @Html.Raw(crewFormalEducationForAdminViewModeList.CreatedByUserID.ViewAttributes)>
@Html.Raw(crewFormalEducationForAdminViewModeList.CreatedByUserID.GetViewValue())</span>
</span></template>
</td>
    } @* crewFormalEducationForAdminViewModeList.CreatedByUserID.Visible (end) *@
    @if (crewFormalEducationForAdminViewModeList.CreatedDateTime.Visible) { // crewFormalEducationForAdminViewModeList.CreatedDateTime.Visible (begin)
        <td data-name="CreatedDateTime" @Html.Raw(crewFormalEducationForAdminViewModeList.CreatedDateTime.CellAttributes)>
<template id="tpx@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_CreatedDateTime"><span id="el@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_CreatedDateTime" class="el_CrewFormalEducationForAdminViewMode_CreatedDateTime">
<span @Html.Raw(crewFormalEducationForAdminViewModeList.CreatedDateTime.ViewAttributes)>
@Html.Raw(crewFormalEducationForAdminViewModeList.CreatedDateTime.GetViewValue())</span>
</span></template>
</td>
    } @* crewFormalEducationForAdminViewModeList.CreatedDateTime.Visible (end) *@
    @if (crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.Visible) { // crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.Visible (begin)
        <td data-name="LastUpdatedByUserID" @Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.CellAttributes)>
<template id="tpx@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_LastUpdatedByUserID"><span id="el@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_LastUpdatedByUserID" class="el_CrewFormalEducationForAdminViewMode_LastUpdatedByUserID">
<span @Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.ViewAttributes)>
@Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.GetViewValue())</span>
</span></template>
</td>
    } @* crewFormalEducationForAdminViewModeList.LastUpdatedByUserID.Visible (end) *@
    @if (crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.Visible) { // crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.Visible (begin)
        <td data-name="LastUpdatedDateTime" @Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.CellAttributes)>
<template id="tpx@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_LastUpdatedDateTime"><span id="el@(crewFormalEducationForAdminViewModeList.RowCount)_CrewFormalEducationForAdminViewMode_LastUpdatedDateTime" class="el_CrewFormalEducationForAdminViewMode_LastUpdatedDateTime">
<span @Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.ViewAttributes)>
@Html.Raw(crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.GetViewValue())</span>
</span></template>
</td>
    } @* crewFormalEducationForAdminViewModeList.LastUpdatedDateTime.Visible (end) *@
    @* Render list options (body, right) *@
    @crewFormalEducationForAdminViewModeList.ListOptions.RenderBody("right", crewFormalEducationForAdminViewModeList.RowCount, "block", crewFormalEducationForAdminViewModeList.TableVar, "CrewFormalEducationForAdminViewModelist")
    </tr>
    } @* End if *@

    // Reset for template row
    if (SameString(crewFormalEducationForAdminViewModeList.RowIndex, "$rowindex$"))
        crewFormalEducationForAdminViewModeList.RowIndex = 0;

    // Reset inline add/copy row
    if ((crewFormalEducationForAdminViewModeList.IsCopy || crewFormalEducationForAdminViewModeList.IsAdd) && crewFormalEducationForAdminViewModeList.RowIndex is int rowIndex2 && rowIndex2 == 0)
        crewFormalEducationForAdminViewModeList.RowIndex = 1;
} @* End While *@
</tbody>
</table><!-- /.ew-table -->
} @* End If TotalRecords > 0 *@
<div id="tpd_CrewFormalEducationForAdminViewModelist" class="ew-custom-template"></div>
<template id="tpm_CrewFormalEducationForAdminViewModelist">
<div id="ct_crewFormalEducationForAdminViewModeList">@if (crewFormalEducationForAdminViewModeList.RowCount > 0) {
<table class="table table-bordered table-sm ew-table d-none">
    <thead>
    </thead>
    <tbody>@for (int i = crewFormalEducationForAdminViewModeList.StartRowCount; i <= crewFormalEducationForAdminViewModeList.RowCount; i++) {
<tr>
</tr>
}
</tbody></table>
}
</div>
</template>
</div><!-- /.ew-grid-middle-panel -->
@if (Empty(crewFormalEducationForAdminViewModeList.CurrentAction) && !crewFormalEducationForAdminViewModeList.UseAjaxActions) {
<input type="hidden" name="action" id="action" value="">
}
</form><!-- /.ew-list-form -->
@{ crewFormalEducationForAdminViewModeList.CloseRecordset(); }
@if (!crewFormalEducationForAdminViewModeList.IsExport()) {
<div class="card-footer ew-grid-lower-panel">
@if (!crewFormalEducationForAdminViewModeList.IsGridAdd && !(crewFormalEducationForAdminViewModeList.IsGridEdit && crewFormalEducationForAdminViewModeList.ModalGridEdit) && !crewFormalEducationForAdminViewModeList.IsMultiEdit) {
@Html.Raw(crewFormalEducationForAdminViewModeList.Pager.Render())
}
<div class="ew-list-other-options">
@crewFormalEducationForAdminViewModeList.OtherOptions.RenderBody("bottom")
</div>
</div>
}
</div><!-- /.ew-grid -->
<script class="ew-apply-template">
loadjs.ready(ew.applyTemplateId, function() {
    var $ = jQuery;
    ew.templateData = { rows: @Html.Raw(ConvertToJson(crewFormalEducationForAdminViewModeList.Rows)) };
    ew.applyTemplate("tpd_CrewFormalEducationForAdminViewModelist", "tpm_CrewFormalEducationForAdminViewModelist", "CrewFormalEducationForAdminViewModelist", "@(crewFormalEducationForAdminViewModeList.Export)", "CrewFormalEducationForAdminViewMode", ew.templateData, @(crewFormalEducationForAdminViewModeList.IsModal ? "true" : "false"));
    loadjs.done("customtemplate");
});
</script>
} else { // Show other options
<div class="ew-list-other-options">
@crewFormalEducationForAdminViewModeList.OtherOptions.ForEach(opt => opt.ButtonClass = "").RenderBody()
</div>
}
</div>
</main>
@crewFormalEducationForAdminViewModeList.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
@if (!crewFormalEducationForAdminViewModeList.IsExport()) {
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("CrewFormalEducationForAdminViewMode");
});
</script>
<script>
loadjs.ready("load", function() {
    // Startup script
    // Write your table-specific startup script here
    // document.write("page loaded");

    // Get the current URL
    const currentUrlObject = new URL(window.location.href);
    // get the current URL without Add or Edit for assigning active class in tabs
    const currentUrlWithoutAddEditListView = currentUrlObject.href.replace(/Add|Edit|List|View/g, "");
    // Create a new URLSearchParams object based on the current URL's search parameters
    const urlQueryParams = new URLSearchParams(currentUrlObject.search);
    // Extract the value of the crewID query parameter
    const currentlyEditedCrewID = urlQueryParams.get('crewID');

    // Iterate over each anchor element inside the nav-tabs
    $(".nav-tabs .nav-item a").each(function() {
        const href = $(this).attr("href");
        const hrefWithoutAddEditListView = href.replace(/Add|Edit|List|View/g, "");
        // Check if the href contains current page's url
        if (currentUrlWithoutAddEditListView.includes(hrefWithoutAddEditListView)) {
            // add class and attribute
            $(this).addClass("active");
            $(this).attr("aria-current", "page");
        }
        // Check if the href contains "Edit" or "Add"
        if (href.includes("ViewModeView")) {
            // Add "/" and the currently edited crew ID to the href
            const newHref = href + "/" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        } else if (href.includes("ViewModeList")) {
            // Add "?crewID=" and the currently edited crew ID to the href
            const newHref = href + "?crewID=" + currentlyEditedCrewID;
            // Set the updated href attribute value
            $(this).attr("href", newHref);
        }
    });

    // Target the ol element that has breadcrumb class
    const $breadCrumbOl = $('.breadcrumb').first();

    // Delete the ol element that has breadcrumb class
    $breadCrumbOl.remove();
    $('div.btn-toolbar.ew-toolbar').remove();
    $('div.ew-extended-search div.mb-0').remove();
    $('div#ew-list div.crew-formal-education-for-admin-view-mode').removeClass('card ew-card ew-grid');
    $('div.card-footer').remove();
    $('main.list.ew-no-record div#ew-list').remove();
    const selectedLanguage = ew.vars['languages']['languages'].filter(obj => obj.selected === true)[0];
    const parentUrl = ew.PATH_BASE;
    const adminAndEmployeeStatusApi = 'get-admin-and-employee-status';
    $.ajax({
        url: `${parentUrl}api/Registration/${adminAndEmployeeStatusApi}`,
        method: 'GET',
        data: {
            crewID: currentlyEditedCrewID
        },
        success: function(response) {
            if (response.success) {
                // Parse the data in the response
                const isAdmin = response.data.IsAdmin;
                const employeeStatus = response.data.EmployeeStatus;
                if (currentlyEditedCrewID === null) {
                    if (isAdmin) {
                        // redirect to list page with error message: record not found
                        if (employeeStatus === 'Candidate - Draft') {
                            window.location.replace(`${ew.PATH_BASE}RegistrationEdit/-1`);
                        } else if (employeeStatus === 'Candidate - Submitted') {
                            window.location.replace(`${ew.PATH_BASE}VWaitingForPdeReviewView/-1`);
                        }
                    } else {
                        window.location.replace(`${ew.PATH_BASE}index`);
                    }
                }
                if (employeeStatus === 'Candidate - Draft') {
                    const addButton = $("<a></a>", {
                        text: (selectedLanguage.id === 'en-US') ? "Add" : "Tambah",
                        class: "btn btn-default ew-btn me-auto primary-black-clr gray-bg",
                        id: "btn-add",
                        name: "btn-add",
                        href: `${parentUrl}CrewFormalEducationForAdminViewModeAdd?crewID=${currentlyEditedCrewID}`,
                    });
                    const backButton = $("<a></a>", {
                        text: (selectedLanguage.id === 'en-US') ? "Back" : "Kembali",
                        class: "btn btn-default ew-btn ms-auto primary-red-bg primary-white-clr",
                        id: "btn-back",
                        name: "btn-back",
                        href: `${parentUrl}RegistrationList`,
                    });
                    const flexDiv = $("<div class='d-flex mb-3'></div>");
                    flexDiv.append(addButton);
                    if (isAdmin) {
                        flexDiv.append(backButton);
                    }
                    const buttonsDiv = $("<div class='row mt-3 ew-buttons'></div>");
                    buttonsDiv.append(flexDiv);
                    $('div#CrewFormalEducationForAdminViewModelist').append(buttonsDiv);
                    const errorMessage = urlQueryParams.get('errorMessage');
                    if (errorMessage !== null) {
                        const decodedErrorMessage = decodeURIComponent(errorMessage);
                        ew.showToast(decodedErrorMessage);
                        urlQueryParams.delete('errorMessage');
                        currentUrlObject.search = urlQueryParams.toString();
                        history.pushState(null, '', currentUrlObject);
                    }
                } else if (employeeStatus === 'Candidate - Agency Reviewed') {
                    const invokeScheduleModalButton = $('<button/>', {
                        'class': 'btn btn-default ew-btn primary-green-bg primary-white-clr',
                        'name': 'btn-invoke-schedule-modal',
                        'id': 'btn-invoke-schedule-modal',
                        'type': 'button',
                        'text': (selectedLanguage.id === 'en-US') ? 'Accept' : 'Terima'
                    });
                    const invokeReviseModalButton = $('<button/>', {
                        'class': 'btn btn-primary ew-btn ms-3 primary-white-clr',
                        'name': 'btn-invoke-revise-modal',
                        'id': 'btn-invoke-revise-modal',
                        'type': 'button', 
                        'text': (selectedLanguage.id === 'en-US') ? 'Revise' : 'Tinjau'
                    });
                    const invokeRejectModalButton = $('<button/>', {
                        'class': 'btn btn-danger ew-btn ms-3 me-auto primary-white-clr',
                        'name': 'btn-invoke-reject-modal',
                        'id': 'btn-invoke-reject-modal',
                        'type': 'button',
                        'text': (selectedLanguage.id === 'en-US') ? 'Reject' : 'Tolak'
                    });
                    const backButton = $("<a></a>", {
                        text: (selectedLanguage.id === 'en-US') ? "Back" : "Kembali",
                        class: "btn btn-default ew-btn primary-black-clr gray-bg",
                        id: "btn-back",
                        name: "btn-back",
                        href: `${ew.PATH_BASE}VWaitingForPdeReviewList`,
                    });
                    const flexDiv = $("<div class='d-flex mb-3'></div>");
                    if (isAdmin) {
                        flexDiv.append(invokeScheduleModalButton);
                        flexDiv.append(invokeReviseModalButton);
                        flexDiv.append(invokeRejectModalButton);
                        flexDiv.append(backButton);
                    }
                    const buttonsDiv = $("<div class='row mt-3 ew-buttons'></div>");
                    buttonsDiv.append(flexDiv);
                    $('div#CrewFormalEducationForAdminViewModelist').append(buttonsDiv);
                    if (isAdmin) {
                        $('#btn-invoke-schedule-modal').click(function() {
                            $('#schedule-modal-dialog').modal('show');
                        });
                        $('#btn-invoke-revise-modal').click(function() {
                            $('#revise-modal-dialog').modal('show');
                        });
                        $('#btn-invoke-reject-modal').click(function() {
                            $('#reject-modal-dialog').modal('show');
                        });
                        $('#schedule-modal-dialog').on('hidden.bs.modal', function() {
                            // $('#x_DocumentCheckDateTime').val(null);
                        });
                        $('#revise-modal-dialog').on('hidden.bs.modal', function() {
                            $('#x_RevisedReason').val(null);
                        });
                        $('#reject-modal-dialog').on('hidden.bs.modal', function() {
                            $('#x_RejectedReason').val(null);
                        });

                        // initialize date time picker
                        const format = "dd MMM yyyy HH:mm:00zzz";
                        const options = {
                            localization: {
                                locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                                hourCycle: format.match(/H/) ? "h24" : "h12",
                                format,
                                ...ew.language.phrase("datetimepicker")
                            },
                            display: {
                                icons: {
                                    previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                                    next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                                },
                                components: {
                                    hours: !!format.match(/h/i),
                                    minutes: !!format.match(/m/),
                                    seconds: !!format.match(/s/i)
                                },
                                theme: ew.isDark() ? "dark" : "auto"
                            },
                            defaultDate: new Date(new Date().setHours(8, 0, 0)).toISOString(),
                        };
                        ew.createDateTimePicker("add-schedule", "x_DocumentCheckDateTime", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
                        $('#x_DocumentCheckDateTime').val(replaceTimezoneOffset($('#x_DocumentCheckDateTime').val(), formatTimezoneOffset(new Date().getTimezoneOffset())));

                        // Listen for input changes
                        $('#x_DocumentCheckDateTime').on('change.td', function() {
                            const timezoneOffset = new Date().getTimezoneOffset();
                            const formattedTimezoneOffset = formatTimezoneOffset(timezoneOffset);
                            const currentValue = $(this).val();
                            const newValue = replaceTimezoneOffset(currentValue, formattedTimezoneOffset);
                            $(this).val(newValue);
                        });

                        // Format timezone offset as needed
                        function formatTimezoneOffset(offset) {
                            const hours = Math.floor(Math.abs(offset) / 60);
                            const minutes = Math.abs(offset) % 60;
                            const sign = offset < 0 ? '+' : '-';
                            const formattedOffset = sign + addLeadingZero(hours) + ':' + addLeadingZero(minutes);
                            return ' GMT ' + formattedOffset;
                        }

                        // Helper function to add leading zero to single-digit numbers
                        function addLeadingZero(num) {
                            return num < 10 ? '0' + num : num;
                        }

                        // Replace "zzz" with the formatted timezone offset
                        function replaceTimezoneOffset(str, offset) {
                            return str.replace('zzz', offset);
                        }
                        function validateDateTime(dateTimeString) {
                            const errorMessage = (selectedLanguage.id === 'en-US') ? `Incorrect date (dd MMM yyyy HH:mm:ss GMT +/-HH:mm)` : `Tanggal tidak benar (dd MMM yyyy HH:mm:ss GMT +/-HH:mm)`;
                            const dateTimeRegex = /^\d{1,2} [A-Za-z]{3} \d{4} \d{1,2}:\d{2}:\d{2} GMT [+-]\d{1,2}:\d{2}$/;
                            if (!dateTimeRegex.test(dateTimeString)) {
                                ew.showToast(errorMessage);
                                return false;
                            }
                            const dateTimeParts = dateTimeString.split(' ');
                            const day = parseInt(dateTimeParts[0], 10);
                            const monthNamesEnglish = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                            const monthNamesIndonesian = ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Agu', 'Sep', 'Okt', 'Nov', 'Des'];
                            const month = (selectedLanguage.id === 'en-US') ? monthNamesEnglish.indexOf(dateTimeParts[1]) : monthNamesIndonesian.indexOf(dateTimeParts[1]);
                            const year = parseInt(dateTimeParts[2], 10);
                            let valid = false;
                            if (year >= 1900 && year <= 9999 && month >= 0 && day >= 1 && day <= 31) {
                                if (month === 1) {
                                    valid = day <= (((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) ? 29 : 28);
                                } else if (month === 3 || month === 5 || month === 8 || month === 10) {
                                    valid = day <= 30;
                                } else {
                                    valid = true;
                                }
                            }
                            const timeParts = dateTimeParts[3].split(':');
                            const hour = parseInt(timeParts[0], 10);
                            const minute = parseInt(timeParts[1], 10);
                            const second = parseInt(timeParts[2], 10);
                            if (valid) {
                                valid = (hour >= 0) && (hour <= 23) && (minute >= 0) && (minute <= 59) && (second >= 0) && (second <= 59);
                                if (valid) {
                                    const timeOffsetWithSign = dateTimeParts[5];
                                    const timeOffset = timeOffsetWithSign.substring(1);
                                    const timeOffsetParts = timeOffset.split(':');
                                    const timeOffsetHour = parseInt(timeOffsetParts[0], 10);
                                    const timeOffsetMinute = parseInt(timeOffsetParts[1], 10);
                                    valid = (timeOffsetHour >= 0) && (timeOffsetHour <= 23) && (timeOffsetMinute >= 0) && (timeOffsetMinute <= 59);
                                }
                            }
                            if (!valid) {
                                ew.showToast(errorMessage);
                            }
                            return valid;
                        }
                        const addDocumentCheckDateTimeApiUrl = "add-document-check-date-time";
                        $("#btn-add-schedule").click(function() {
                            const documentCheckDateTimeValue = $('#x_DocumentCheckDateTime').val();
                            const documentCheckDateTimeCaption = $(`label[for="x_DocumentCheckDateTime"]`).text();
                            if (documentCheckDateTimeValue == '') {
                                if (selectedLanguage.id === 'en-US') {
                                    ew.showToast(`Please enter required field - ${documentCheckDateTimeCaption}`);
                                } else {
                                    ew.showToast(`Masukkan input yang dibutuhkan - ${documentCheckDateTimeCaption}`);
                                }
                            } else {
                                if (validateDateTime(documentCheckDateTimeValue)) {
                                    $('#schedule-modal-dialog').modal('hide');
                                    $('#loading-modal-dialog').modal('show');
                                    const arrDataKey = [currentlyEditedCrewID];
                                    const notesValue = $('#x_DocumentCheckNotes').val();
                                    const notes = (notesValue !== '') ? notesValue : '';
                                    const documentCheckDateTimeRequest = {
                                        scheduleDateTime: documentCheckDateTimeValue.replace(' GMT ', ''),
                                        notes: notes,
                                        crewIDArray: JSON.stringify(arrDataKey),
                                    };
                                    $.ajax({
                                        method: "POST",
                                        url: `${parentUrl}api/Registration/${addDocumentCheckDateTimeApiUrl}`,
                                        data: JSON.stringify(documentCheckDateTimeRequest),
                                        contentType: "application/json",
                                        success: function(response) {
                                            if (response.success) {
                                                let successMessage = '';
                                                if (selectedLanguage.id === 'en-US') {
                                                    successMessage = `Add ${documentCheckDateTimeCaption} Successful`;
                                                } else {
                                                    successMessage = `Menambahkan ${documentCheckDateTimeCaption} Berhasil`;
                                                }
                                                const baseUrl = new URL(window.location.href).origin;
                                                const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}VWaitingForPdeReviewList`);
                                                const encodedSuccessMessage = encodeURIComponent(successMessage);
                                                const params = new URLSearchParams(targetUrl.search);
                                                params.set('successMessage', encodedSuccessMessage);
                                                targetUrl.search = params.toString();
                                                $('#loading-modal-dialog').modal('hide');
                                                window.location.href = targetUrl.href;
                                            } else {
                                                $('#loading-modal-dialog').modal('hide');
                                                const errorMessage = response.errorMessage;
                                                ew.showToast(errorMessage);
                                            }
                                        },
                                        error: function(xhr, textStatus, errorThrown) {
                                            $('#loading-modal-dialog').modal('hide');
                                            ew.showToast(errorThrown);
                                        }
                                    });
                                }
                            }
                        });
                        const rejectMultipleCrewApiUrl = "reject-multiple-crew";
                        $("#btn-reject").click(function() {
                            const rejectedReasonValue = $('#x_RejectedReason').val();
                            const rejectedReasonCaption = $(`label[for="x_RejectedReason"]`).text();
                            if (rejectedReasonValue == '') {
                                if (selectedLanguage.id === 'en-US') {
                                    ew.showToast(`Please enter required field - ${rejectedReasonCaption}`);
                                } else {
                                    ew.showToast(`Masukkan input yang dibutuhkan - ${rejectedReasonCaption}`);
                                }
                            } else {
                                $('#reject-modal-dialog').modal('hide');
                                $('#loading-modal-dialog').modal('show');
                                const arrDataKey = [currentlyEditedCrewID];
                                const rejectMultipleRequest = {
                                    rejectReason: rejectedReasonValue,
                                    crewIDArray: JSON.stringify(arrDataKey),
                                };
                                $.ajax({
                                    method: "POST",
                                    url: `${parentUrl}api/Registration/${rejectMultipleCrewApiUrl}`,
                                    data: JSON.stringify(rejectMultipleRequest),
                                    contentType: "application/json",
                                    success: function(response) {
                                        if (response.success) {
                                            let successMessage = '';
                                            if (selectedLanguage.id === 'en-US') {
                                                successMessage = `Add ${rejectedReasonCaption} Successful`;
                                            } else {
                                                successMessage = `Menambahkan ${rejectedReasonCaption} Berhasil`;
                                            }
                                            const baseUrl = new URL(window.location.href).origin;
                                            const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}VWaitingForPdeReviewList`);
                                            const encodedSuccessMessage = encodeURIComponent(successMessage);
                                            const params = new URLSearchParams(targetUrl.search);
                                            params.set('successMessage', encodedSuccessMessage);
                                            targetUrl.search = params.toString();
                                            $('#loading-modal-dialog').modal('hide');
                                            window.location.href = targetUrl.href;
                                        } else {
                                            $('#loading-modal-dialog').modal('hide');
                                            const errorMessage = response.errorMessage;
                                            ew.showToast(errorMessage);
                                        }
                                    },
                                    error: function(xhr, textStatus, errorThrown) {
                                        $('#loading-modal-dialog').modal('hide');
                                        ew.showToast(errorThrown);
                                    }
                                });
                            }
                        });
                        const reviseMultipleCrewApiUrl = "revise-multiple-crew";
                        $("#btn-revise").click(function() {
                            const revisedReasonValue = $('#x_RevisedReason').val();
                            const revisedReasonCaption = $(`label[for="x_RevisedReason"]`).text();
                            if(revisedReasonValue.trim() === '') {
                                if(selectedLanguage.id === 'en-US') {
                                    ew.showToast(`Please enter required field - ${revisedReasonCaption}`);
                                } else {
                                    ew.showToast(`Masukkan input yang dibutuhkan - ${revisedReasonCaption}`);
                                }
                            } else {
                                $('#revise-modal-dialog').modal('hide');
                                $('#loading-modal-dialog').modal('show');
                                const arrDataKey = [currentlyEditedCrewID];
                                const revisedMultipleCrewRequest = {
                                    revisedReason: revisedReasonValue,
                                    crewIDArray: JSON.stringify(arrDataKey)
                                };
                                $.ajax({
                                    method: "POST",
                                    url: `${parentUrl}api/Registration/${reviseMultipleCrewApiUrl}`,
                                    data: JSON.stringify(revisedMultipleCrewRequest),
                                    contentType: "application/json",
                                    success: function(response) {
                                        if(response.success) {
                                            let successMessage = '';
                                            if(selectedLanguage.id === 'en-US') {
                                                successMessage = `Add ${revisedReasonCaption} Successful`;
                                            } else {
                                                successMessage = `Menambahkan ${revisedReasonCaption} Berhasil`;
                                            }
                                            const baseUrl = new URL(window.location.href).origin;
                                            const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}VWaitingForPdeReviewList`);
                                            const encodedSuccessMessage = encodeURIComponent(successMessage);
                                            const params = new URLSearchParams(targetUrl.search);
                                            params.set('successMessage', encodedSuccessMessage);
                                            targetUrl.search = params.toString();
                                            $('#loading-modal-dialog').modal('hide');
                                            window.location.href = targetUrl.href;
                                        } else {
                                            $('#loading-modal-dialog').modal('hide');
                                            const errorMessage = response.errorMessage;
                                            ew.showToast(errorMessage);
                                        }  
                                    },
                                    error: function(xhr, textStatus, errorThrown) {
                                        $('#loading-modal-dialog').modal('hide');
                                        ew.showToast(errorThrown);
                                    }
                                });
                            }
                        });
                    }
                } else if (employeeStatus === 'Candidate - Agency Reviewed') {
                    const acceptByAgencyButton = $('<button/>', {
                        'class': 'btn btn-default ew-btn primary-green-bg primary-white-clr',
                        'name': 'btn-accept-by-agency',
                        'id': 'btn-accept-by-agency',
                        'type': 'button',
                        'text': (selectedLanguage.id === 'en-US') ? 'Accept' : 'Terima'
                    });
                    const invokeReviseModalButton = $('<button/>', {
                        'class': 'btn btn-primary ew-btn ms-3 primary-white-clr',
                        'name': 'btn-invoke-revise-modal',
                        'id': 'btn-invoke-revise-modal',
                        'type': 'button', 
                        'text': (selectedLanguage.id === 'en-US') ? 'Revise' : 'Tinjau'
                    });
                    const invokeRejectModalButton = $('<button/>', {
                        'class': 'btn btn-danger ew-btn ms-3 me-auto primary-white-clr',
                        'name': 'btn-invoke-reject-modal',
                        'id': 'btn-invoke-reject-modal',
                        'type': 'button',
                        'text': (selectedLanguage.id === 'en-US') ? 'Reject' : 'Tolak'
                    });
                    const backButton = $("<a></a>", {
                        text: (selectedLanguage.id === 'en-US') ? "Back" : "Kembali",
                        class: "btn btn-default ew-btn primary-black-clr gray-bg",
                        id: "btn-back",
                        name: "btn-back",
                        href: `${ew.PATH_BASE}VWaitingForPdeReviewList`,
                    });
                    const flexDiv = $("<div class='d-flex mb-3'></div>");
                    if (isAdmin) {
                        flexDiv.append(acceptByAgencyButton);
                        flexDiv.append(invokeReviseModalButton);
                        flexDiv.append(invokeRejectModalButton);
                        flexDiv.append(backButton);
                    }
                    const buttonsDiv = $("<div class='row mt-3 ew-buttons'></div>");
                    buttonsDiv.append(flexDiv);
                    $('div#CrewFormalEducationForAdminViewModelist').append(buttonsDiv);
                    if (isAdmin) {
                        $('#btn-accept-by-agency').click(function() {
                            const confirmationMessage = (selectedLanguage.id === 'en-US') ? "Are you sure you want to accept the selected crew(s)?" : "Apakah Anda yakin untuk menerima kru yang telah dipilih?";
                            ew.prompt(confirmationMessage, result => {
                                if (result) {
                                    const acceptByAgencyUrl = "accept-by-agency";
                                    $('#loading-modal-dialog').modal('show');
                                    const arrDataKey = [currentlyEditedCrewID];
                                    const acceptByAgencyRequest = {
                                        crewIDArray: JSON.stringify(arrDataKey),
                                    };
                                    $.ajax({
                                        method: "POST",
                                        url: `${parentUrl}api/Registration/${acceptByAgencyUrl}`,
                                        data: JSON.stringify(acceptByAgencyRequest),
                                        contentType: "application/json",
                                        success: function(response) {
                                            if (response.success) {
                                                let successMessage = '';
                                                if (selectedLanguage.id === 'en-US') {
                                                    successMessage = `Accept Crew Successful`;
                                                } else {
                                                    successMessage = `Berhasil Menerima Kru`;
                                                }
                                                const baseUrl = new URL(window.location.href).origin;
                                                const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}WaitingForAgencyReviewList`);
                                                const encodedSuccessMessage = encodeURIComponent(successMessage);
                                                const params = new URLSearchParams(targetUrl.search);
                                                params.set('successMessage', encodedSuccessMessage);
                                                targetUrl.search = params.toString();
                                                $('#loading-modal-dialog').modal('hide');
                                                window.location.href = targetUrl.href;
                                            } else {
                                                $('#loading-modal-dialog').modal('hide');
                                                const errorMessage = response.errorMessage;
                                                ew.showToast(errorMessage);
                                            }
                                        },
                                        error: function(xhr, textStatus, errorThrown) {
                                            $('#loading-modal-dialog').modal('hide');
                                            ew.showToast(errorThrown);
                                        }
                                    });
                                }
                            });
                        });
                        $('#btn-invoke-revise-modal').click(function() {
                            $('#revise-modal-dialog').modal('show');
                        });
                        $('#btn-invoke-reject-modal').click(function() {
                            $('#reject-modal-dialog').modal('show');
                        });
                        $('#revise-modal-dialog').on('hidden.bs.modal', function() {
                            $('#x_RevisedReason').val(null);
                        });
                        $('#reject-modal-dialog').on('hidden.bs.modal', function() {
                            $('#x_RejectedReason').val(null);
                        });
                        const rejectMultipleCrewApiUrl = "reject-multiple-crew";
                        $("#btn-reject").click(function() {
                            const rejectedReasonValue = $('#x_RejectedReason').val();
                            const rejectedReasonCaption = $(`label[for="x_RejectedReason"]`).text();
                            if (rejectedReasonValue == '') {
                                if (selectedLanguage.id === 'en-US') {
                                    ew.showToast(`Please enter required field - ${rejectedReasonCaption}`);
                                } else {
                                    ew.showToast(`Masukkan input yang dibutuhkan - ${rejectedReasonCaption}`);
                                }
                            } else {
                                $('#reject-modal-dialog').modal('hide');
                                $('#loading-modal-dialog').modal('show');
                                const arrDataKey = [currentlyEditedCrewID];
                                const rejectMultipleRequest = {
                                    rejectReason: rejectedReasonValue,
                                    crewIDArray: JSON.stringify(arrDataKey),
                                };
                                $.ajax({
                                    method: "POST",
                                    url: `${parentUrl}api/Registration/${rejectMultipleCrewApiUrl}`,
                                    data: JSON.stringify(rejectMultipleRequest),
                                    contentType: "application/json",
                                    success: function(response) {
                                        if (response.success) {
                                            let successMessage = '';
                                            if (selectedLanguage.id === 'en-US') {
                                                successMessage = `Add ${rejectedReasonCaption} Successful`;
                                            } else {
                                                successMessage = `Menambahkan ${rejectedReasonCaption} Berhasil`;
                                            }
                                            const baseUrl = new URL(window.location.href).origin;
                                            const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}VWaitingForPdeReviewList`);
                                            const encodedSuccessMessage = encodeURIComponent(successMessage);
                                            const params = new URLSearchParams(targetUrl.search);
                                            params.set('successMessage', encodedSuccessMessage);
                                            targetUrl.search = params.toString();
                                            $('#loading-modal-dialog').modal('hide');
                                            window.location.href = targetUrl.href;
                                        } else {
                                            $('#loading-modal-dialog').modal('hide');
                                            const errorMessage = response.errorMessage;
                                            ew.showToast(errorMessage);
                                        }
                                    },
                                    error: function(xhr, textStatus, errorThrown) {
                                        $('#loading-modal-dialog').modal('hide');
                                        ew.showToast(errorThrown);
                                    }
                                });
                            }
                        });
                        const reviseMultipleCrewApiUrl = "revise-multiple-crew";
                        $("#btn-revise").click(function() {
                            const revisedReasonValue = $('#x_RevisedReason').val();
                            const revisedReasonCaption = $(`label[for="x_RevisedReason"]`).text();
                            if(revisedReasonValue.trim() === '') {
                                if(selectedLanguage.id === 'en-US') {
                                    ew.showToast(`Please enter required field - ${revisedReasonCaption}`);
                                } else {
                                    ew.showToast(`Masukkan input yang dibutuhkan - ${revisedReasonCaption}`);
                                }
                            } else {
                                $('#revise-modal-dialog').modal('hide');
                                $('#loading-modal-dialog').modal('show');
                                const arrDataKey = [currentlyEditedCrewID];
                                const revisedMultipleCrewRequest = {
                                    revisedReason: revisedReasonValue,
                                    crewIDArray: JSON.stringify(arrDataKey)
                                };
                                $.ajax({
                                    method: "POST",
                                    url: `${parentUrl}api/Registration/${reviseMultipleCrewApiUrl}`,
                                    data: JSON.stringify(revisedMultipleCrewRequest),
                                    contentType: "application/json",
                                    success: function(response) {
                                        if(response.success) {
                                            let successMessage = '';
                                            if(selectedLanguage.id === 'en-US') {
                                                successMessage = `Add ${revisedReasonCaption} Successful`;
                                            } else {
                                                successMessage = `Menambahkan ${revisedReasonCaption} Berhasil`;
                                            }
                                            const baseUrl = new URL(window.location.href).origin;
                                            const targetUrl = new URL(`${baseUrl}${ew.PATH_BASE}VWaitingForPdeReviewList`);
                                            const encodedSuccessMessage = encodeURIComponent(successMessage);
                                            const params = new URLSearchParams(targetUrl.search);
                                            params.set('successMessage', encodedSuccessMessage);
                                            targetUrl.search = params.toString();
                                            $('#loading-modal-dialog').modal('hide');
                                            window.location.href = targetUrl.href;
                                        } else {
                                            $('#loading-modal-dialog').modal('hide');
                                            const errorMessage = response.errorMessage;
                                            ew.showToast(errorMessage);
                                        }  
                                    },
                                    error: function(xhr, textStatus, errorThrown) {
                                        $('#loading-modal-dialog').modal('hide');
                                        ew.showToast(errorThrown);
                                    }
                                });
                            }
                        });
                    }
                }

                // get list of crew bank account via API
                const uploadFolderName = "uploads";
                const baseUrl = currentUrlObject.origin + ew.PATH_BASE;
                const apiEndpoint = 'crew-formal-education-for-admin';
                $.ajax({
                    url: `${parentUrl}api/Registration/${apiEndpoint}`,
                    method: 'GET',
                    data: {
                        crewID: currentlyEditedCrewID
                    },
                    success: function(response) {
                        if (response.success) {
                            // Parse the data in the response
                            const dataArray = response.data;
                            const tbody = $('#ForAdminTable tbody'); // select the tbody element
                            if (dataArray.length > 0) {
                                const tableName = 'CrewFormalEducationForAdminViewMode';
                                for (let rowIndex = 0; rowIndex < dataArray.length; rowIndex++) {
                                    const row = dataArray[rowIndex];
                                    const rowID = row['ID'];
                                    delete row['ID']; // delete ID for easier looping for table columns
                                    const tr = $('<tr>'); // create a new tr element 

                                    // first td for dropdown
                                    const buttonsTd = $('<td>').addClass('ew-list-option-body w-1');
                                    const buttonDropdownDiv = $('<div>').addClass('btn-group btn-group-sm ew-btn-dropdown');
                                    const dropdownButton = $('<button>')
                                        .addClass('btn-default btn dropdown-toggle')
                                        .attr('type', 'button')
                                        .attr('data-title', 'Options')
                                        .attr('data-bs-toggle', 'dropdown')
                                        .attr('data-bs-auto-close', 'true');
                                    const dropdownButtonIcon = $('<i>').addClass('fa-solid fa-bars ew-icon').attr('data-phrase', 'ButtonListOptions');
                                    const dropdownButtonIconSpan = $('<span>').addClass('visually-hidden').text('Options');
                                    const dropdownUl = $('<ul>').addClass('dropdown-menu ew-dropdown-menu ew-list-options');
                                    const firstDropdownLi = $('<li>');
                                    const viewAnchor = $('<a>')
                                        .addClass('ew-row-link ew-view dropdown-item')
                                        .attr('data-caption', ew.language.phrase("ViewLink"))
                                        .attr('href', `${parentUrl}${tableName}View/${rowID}?crewID=${currentlyEditedCrewID}`);
                                    const viewAnchorIcon = $('<i>').addClass('icon-view ew-icon me-2').attr('data-phrase', 'ViewLink');
                                    const viewAnchorSpan = $('<span>').addClass('visually-hidden').text(ew.language.phrase("ViewLink"));
                                    const viewAnchorText = ew.language.phrase("ViewLink");
                                    viewAnchorIcon.append(viewAnchorSpan);
                                    viewAnchor.append(viewAnchorIcon);
                                    viewAnchor.append(viewAnchorText);
                                    firstDropdownLi.append(viewAnchor);
                                    dropdownUl.append(firstDropdownLi);
                                    if (employeeStatus === 'Candidate - Draft') {
                                        const secondDropdownLi = $('<li>');
                                        const editAnchor = $('<a>')
                                            .addClass('ew-row-link ew-edit dropdown-item')
                                            .attr('data-caption', ew.language.phrase("EditLink"))
                                            .attr('href', `${parentUrl}${tableName}Edit/${rowID}?crewID=${currentlyEditedCrewID}`);
                                        const editAnchorIcon = $('<i>').addClass('fa-solid fa-pen ew-icon me-2').attr('data-phrase', 'EditLink');
                                        const editAnchorSpan = $('<span>').addClass('visually-hidden').text(ew.language.phrase("EditLink"));
                                        const editAnchorText = ew.language.phrase("EditLink");
                                        const thirdDropdownLi = $('<li>');
                                        const deleteAnchor = $('<a>')
                                            .addClass('ew-row-link ew-delete dropdown-item')
                                            .attr('data-ew-action', 'inline-delete')
                                            .attr('data-caption', ew.language.phrase("DeleteLink"))
                                            .attr('href', `${parentUrl}${tableName}Delete/${rowID}`);
                                        const deleteAnchorIcon = $('<i>').addClass('fa-solid fa-trash ew-icon me-2').attr('data-phrase', 'DeleteLink');
                                        const deleteAnchorSpan = $('<span>').addClass('visually-hidden').text(ew.language.phrase("DeleteLink"));
                                        const deleteAnchorText = ew.language.phrase("DeleteLink");
                                        deleteAnchorIcon.append(deleteAnchorSpan);
                                        deleteAnchor.append(deleteAnchorIcon);
                                        deleteAnchor.append(deleteAnchorText);
                                        thirdDropdownLi.append(deleteAnchor);
                                        editAnchorIcon.append(editAnchorSpan);
                                        editAnchor.append(editAnchorIcon);
                                        editAnchor.append(editAnchorText);
                                        secondDropdownLi.append(editAnchor);
                                        dropdownUl.append(secondDropdownLi);
                                        dropdownUl.append(thirdDropdownLi);
                                    }
                                    dropdownButtonIcon.append(dropdownButtonIconSpan);
                                    dropdownButton.append(dropdownButtonIcon);
                                    buttonDropdownDiv.append(dropdownButton);
                                    buttonDropdownDiv.append(dropdownUl);
                                    buttonsTd.append(buttonDropdownDiv);
                                    tr.append(buttonsTd);

                                    // second td for sequence
                                    const sequenceTd = $('<td>').addClass('ew-list-option-body text-nowrap').attr('data-name', 'sequence');
                                    const sequenceNumberString = (rowIndex + 1).toString() + '.';
                                    const sequenceSpan = $('<span>').text(sequenceNumberString);
                                    sequenceTd.append(sequenceSpan);
                                    tr.append(sequenceTd);

                                    // remaining td for each column
                                    for (const columnName of Object.keys(row)) {
                                        const dataTd = $('<td>');
                                        const columnValue = row[columnName];
                                        if (columnName === "Attachment") {
                                            dataTd.addClass("text-center");
                                            const individualCodeNumber = columnValue.split('-')[0];
                                            const imageUrl = `${baseUrl}${uploadFolderName}/${individualCodeNumber}/${columnValue}`;
                                            const anchorLink = $('<a>', {
                                            href: imageUrl,
                                            target: '_blank'
                                            });
                                            anchorLink.text("Attachment");
                                            dataTd.append(anchorLink);
                                        } else if (columnName === "StartDate" || columnName === "EndDate") {
                                            const dataSpan = $('<span class="text-nowrap">').text(columnValue);
                                            dataTd.append(dataSpan);
                                        } else {
                                            const dataSpan = $('<span>').text(columnValue);
                                            dataTd.append(dataSpan);
                                        }
                                        tr.append(dataTd);
                                    }
                                    tbody.append(tr);
                                }
                            } else {
                                const columnsCount = $('#ForAdminTable th.ew-table-header-cell').length;
                                for (let rowIndex = 0; rowIndex < 3; rowIndex++) {
                                    const tr = $('<tr>'); // create a new tr element 

                                    // 1 is for buttons dropdown(for edit) column and 1 for sequence number column
                                    const emptyTdWithColspan = $('<td>').html('&nbsp;').attr('colspan', 2);
                                    tr.append(emptyTdWithColspan);
                                    for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {
                                        const emptyTd = $('<td>').html('&nbsp;');
                                        tr.append(emptyTd);
                                    }
                                    tbody.append(tr);
                                }
                            }
                        } else {
                            // Handle the error
                            ew.showToast(response.errorMessage);
                        }
                    },
                    error: function(xhr, textStatus, errorThrown) {
                        // Handle the error
                        ew.showToast(errorThrown);
                    }
                });
            } else {
                // Handle the error
                ew.showToast(response.errorMessage);
            }
        },
        error: function(xhr, textStatus, errorThrown) {
            // Handle the error
            ew.showToast(errorThrown);
        }
    });

    // gmandayu: notification need to read.
    const getUnreadNotificationUrl = `${parentUrl}api/Notification/unread-notification`;
    function loadPage() {
        $.ajax({
            url: getUnreadNotificationUrl,
            method: 'GET',
            success: function(response) {
                const notificationIcon = document.querySelector('.nav-icon.fa-bell');
                if(response.success)
                {
                    notificationIcon.classList.add('animate');
                }
                else 
                {
                    notificationIcon.classList.remove('animate');
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                console.error('Kesalahan saat memuat notifikasi:', errorThrown);
            }
        });
    }
    $(document).ready(function() {
        loadPage();
    });
});
</script>
}
