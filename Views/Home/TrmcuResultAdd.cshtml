@{
    // View
    View = this;

    // Check action result
    if (trmcuResultAdd.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!trmcuResultAdd.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(trmcuResultAdd.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { TRMCUResult: currentTable } });
var currentPageID = ew.PAGE_ID = "add";
var currentForm;
var fTRMCUResultadd;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fTRMCUResultadd")
        .setPageId("add")

        // Add fields
        .setFields([

            ["MTCrew_ID", [fields.MTCrew_ID.visible && fields.MTCrew_ID.required ? ew.Validators.required(fields.MTCrew_ID.caption) : null], fields.MTCrew_ID.isInvalid],
            ["McuDate", [fields.McuDate.visible && fields.McuDate.required ? ew.Validators.required(fields.McuDate.caption) : null, ew.Validators.datetime(fields.McuDate.clientFormatPattern)], fields.McuDate.isInvalid],
            ["McuExpirationDate", [fields.McuExpirationDate.visible && fields.McuExpirationDate.required ? ew.Validators.required(fields.McuExpirationDate.caption) : null, ew.Validators.datetime(fields.McuExpirationDate.clientFormatPattern)], fields.McuExpirationDate.isInvalid],
            ["HealthStatus", [fields.HealthStatus.visible && fields.HealthStatus.required ? ew.Validators.required(fields.HealthStatus.caption) : null], fields.HealthStatus.isInvalid],
            ["McuLocation", [fields.McuLocation.visible && fields.McuLocation.required ? ew.Validators.required(fields.McuLocation.caption) : null], fields.McuLocation.isInvalid],
            ["McuAttachment", [fields.McuAttachment.visible && fields.McuAttachment.required ? ew.Validators.fileRequired(fields.McuAttachment.caption) : null], fields.McuAttachment.isInvalid],
            ["CreatedByUserID", [fields.CreatedByUserID.visible && fields.CreatedByUserID.required ? ew.Validators.required(fields.CreatedByUserID.caption) : null, ew.Validators.integer], fields.CreatedByUserID.isInvalid],
            ["CreatedDateTime", [fields.CreatedDateTime.visible && fields.CreatedDateTime.required ? ew.Validators.required(fields.CreatedDateTime.caption) : null, ew.Validators.datetime(fields.CreatedDateTime.clientFormatPattern)], fields.CreatedDateTime.isInvalid],
            ["LastUpdatedByUserID", [fields.LastUpdatedByUserID.visible && fields.LastUpdatedByUserID.required ? ew.Validators.required(fields.LastUpdatedByUserID.caption) : null, ew.Validators.integer], fields.LastUpdatedByUserID.isInvalid],
            ["LastUpdatedDateTime", [fields.LastUpdatedDateTime.visible && fields.LastUpdatedDateTime.required ? ew.Validators.required(fields.LastUpdatedDateTime.caption) : null, ew.Validators.datetime(fields.LastUpdatedDateTime.clientFormatPattern)], fields.LastUpdatedDateTime.isInvalid],
            ["McuScheduleDate", [fields.McuScheduleDate.visible && fields.McuScheduleDate.required ? ew.Validators.required(fields.McuScheduleDate.caption) : null, ew.Validators.datetime(fields.McuScheduleDate.clientFormatPattern)], fields.McuScheduleDate.isInvalid],
            ["McuRemark", [fields.McuRemark.visible && fields.McuRemark.required ? ew.Validators.required(fields.McuRemark.caption) : null], fields.McuRemark.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@trmcuResultAdd.ShowPageHeader()
@trmcuResultAdd.ShowMessages()
<form name="fTRMCUResultadd" id="fTRMCUResultadd" class="@(trmcuResultAdd.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="insert">
<input type="hidden" name="modal" value="@ConvertToInt(trmcuResultAdd.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(trmcuResultAdd.OldKeyName)" value="@Html.Raw(trmcuResultAdd.OldKey)">
<div class="ew-add-div"><!-- page* -->
@if (trmcuResultAdd.MTCrew_ID.Visible) { // trmcuResultAdd.MTCrew_ID.Visible (begin)
    <div id="r_MTCrew_ID" @Html.Raw(trmcuResultAdd.MTCrew_ID.RowAttributes)>
        <label id="elh_TRMCUResult_MTCrew_ID" for="x_MTCrew_ID" class="@(trmcuResultAdd.LeftColumnClass)">@Html.Raw(trmcuResultAdd.MTCrew_ID.Caption)@Html.Raw(trmcuResultAdd.MTCrew_ID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trmcuResultAdd.RightColumnClass)"><div @Html.Raw(trmcuResultAdd.MTCrew_ID.CellAttributes)>
<span id="el_TRMCUResult_MTCrew_ID">
<input type="@(trmcuResultAdd.MTCrew_ID.InputTextType)" name="x_MTCrew_ID" id="x_MTCrew_ID" data-table="TRMCUResult" data-field="x_MTCrew_ID" value="@Html.Raw(trmcuResultAdd.MTCrew_ID.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(trmcuResultAdd.MTCrew_ID.PlaceHolder))" data-format-pattern="@(trmcuResultAdd.MTCrew_ID.FormatPattern)"@Html.Raw(trmcuResultAdd.MTCrew_ID.EditAttributes) aria-describedby="x_MTCrew_ID_help">
@Html.Raw(trmcuResultAdd.MTCrew_ID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trmcuResultAdd.MTCrew_ID.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* trmcuResultAdd.MTCrew_ID.Visible (end) *@
@if (trmcuResultAdd.McuDate.Visible) { // trmcuResultAdd.McuDate.Visible (begin)
    <div id="r_McuDate" @Html.Raw(trmcuResultAdd.McuDate.RowAttributes)>
        <label id="elh_TRMCUResult_McuDate" for="x_McuDate" class="@(trmcuResultAdd.LeftColumnClass)">@Html.Raw(trmcuResultAdd.McuDate.Caption)@Html.Raw(trmcuResultAdd.McuDate.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trmcuResultAdd.RightColumnClass)"><div @Html.Raw(trmcuResultAdd.McuDate.CellAttributes)>
<span id="el_TRMCUResult_McuDate">
<input type="@(trmcuResultAdd.McuDate.InputTextType)" name="x_McuDate" id="x_McuDate" data-table="TRMCUResult" data-field="x_McuDate" value="@Html.Raw(trmcuResultAdd.McuDate.EditValue)" placeholder="@Html.Raw(HtmlEncode(trmcuResultAdd.McuDate.PlaceHolder))" data-format-pattern="@(trmcuResultAdd.McuDate.FormatPattern)"@Html.Raw(trmcuResultAdd.McuDate.EditAttributes) aria-describedby="x_McuDate_help">
@Html.Raw(trmcuResultAdd.McuDate.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trmcuResultAdd.McuDate.GetErrorMessage())</div>
@if (!trmcuResultAdd.McuDate.ReadOnly && !trmcuResultAdd.McuDate.Disabled && !trmcuResultAdd.McuDate.EditAttrs.Is("readonly") && !trmcuResultAdd.McuDate.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fTRMCUResultadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fTRMCUResultadd", "x_McuDate", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* trmcuResultAdd.McuDate.Visible (end) *@
@if (trmcuResultAdd.McuExpirationDate.Visible) { // trmcuResultAdd.McuExpirationDate.Visible (begin)
    <div id="r_McuExpirationDate" @Html.Raw(trmcuResultAdd.McuExpirationDate.RowAttributes)>
        <label id="elh_TRMCUResult_McuExpirationDate" for="x_McuExpirationDate" class="@(trmcuResultAdd.LeftColumnClass)">@Html.Raw(trmcuResultAdd.McuExpirationDate.Caption)@Html.Raw(trmcuResultAdd.McuExpirationDate.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trmcuResultAdd.RightColumnClass)"><div @Html.Raw(trmcuResultAdd.McuExpirationDate.CellAttributes)>
<span id="el_TRMCUResult_McuExpirationDate">
<input type="@(trmcuResultAdd.McuExpirationDate.InputTextType)" name="x_McuExpirationDate" id="x_McuExpirationDate" data-table="TRMCUResult" data-field="x_McuExpirationDate" value="@Html.Raw(trmcuResultAdd.McuExpirationDate.EditValue)" placeholder="@Html.Raw(HtmlEncode(trmcuResultAdd.McuExpirationDate.PlaceHolder))" data-format-pattern="@(trmcuResultAdd.McuExpirationDate.FormatPattern)"@Html.Raw(trmcuResultAdd.McuExpirationDate.EditAttributes) aria-describedby="x_McuExpirationDate_help">
@Html.Raw(trmcuResultAdd.McuExpirationDate.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trmcuResultAdd.McuExpirationDate.GetErrorMessage())</div>
@if (!trmcuResultAdd.McuExpirationDate.ReadOnly && !trmcuResultAdd.McuExpirationDate.Disabled && !trmcuResultAdd.McuExpirationDate.EditAttrs.Is("readonly") && !trmcuResultAdd.McuExpirationDate.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fTRMCUResultadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fTRMCUResultadd", "x_McuExpirationDate", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* trmcuResultAdd.McuExpirationDate.Visible (end) *@
@if (trmcuResultAdd.HealthStatus.Visible) { // trmcuResultAdd.HealthStatus.Visible (begin)
    <div id="r_HealthStatus" @Html.Raw(trmcuResultAdd.HealthStatus.RowAttributes)>
        <label id="elh_TRMCUResult_HealthStatus" for="x_HealthStatus" class="@(trmcuResultAdd.LeftColumnClass)">@Html.Raw(trmcuResultAdd.HealthStatus.Caption)@Html.Raw(trmcuResultAdd.HealthStatus.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trmcuResultAdd.RightColumnClass)"><div @Html.Raw(trmcuResultAdd.HealthStatus.CellAttributes)>
<span id="el_TRMCUResult_HealthStatus">
<input type="@(trmcuResultAdd.HealthStatus.InputTextType)" name="x_HealthStatus" id="x_HealthStatus" data-table="TRMCUResult" data-field="x_HealthStatus" value="@Html.Raw(trmcuResultAdd.HealthStatus.EditValue)" size="30" maxlength="10" placeholder="@Html.Raw(HtmlEncode(trmcuResultAdd.HealthStatus.PlaceHolder))" data-format-pattern="@(trmcuResultAdd.HealthStatus.FormatPattern)"@Html.Raw(trmcuResultAdd.HealthStatus.EditAttributes) aria-describedby="x_HealthStatus_help">
@Html.Raw(trmcuResultAdd.HealthStatus.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trmcuResultAdd.HealthStatus.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* trmcuResultAdd.HealthStatus.Visible (end) *@
@if (trmcuResultAdd.McuLocation.Visible) { // trmcuResultAdd.McuLocation.Visible (begin)
    <div id="r_McuLocation" @Html.Raw(trmcuResultAdd.McuLocation.RowAttributes)>
        <label id="elh_TRMCUResult_McuLocation" for="x_McuLocation" class="@(trmcuResultAdd.LeftColumnClass)">@Html.Raw(trmcuResultAdd.McuLocation.Caption)@Html.Raw(trmcuResultAdd.McuLocation.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trmcuResultAdd.RightColumnClass)"><div @Html.Raw(trmcuResultAdd.McuLocation.CellAttributes)>
<span id="el_TRMCUResult_McuLocation">
<input type="@(trmcuResultAdd.McuLocation.InputTextType)" name="x_McuLocation" id="x_McuLocation" data-table="TRMCUResult" data-field="x_McuLocation" value="@Html.Raw(trmcuResultAdd.McuLocation.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(trmcuResultAdd.McuLocation.PlaceHolder))" data-format-pattern="@(trmcuResultAdd.McuLocation.FormatPattern)"@Html.Raw(trmcuResultAdd.McuLocation.EditAttributes) aria-describedby="x_McuLocation_help">
@Html.Raw(trmcuResultAdd.McuLocation.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trmcuResultAdd.McuLocation.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* trmcuResultAdd.McuLocation.Visible (end) *@
@if (trmcuResultAdd.McuAttachment.Visible) { // trmcuResultAdd.McuAttachment.Visible (begin)
    <div id="r_McuAttachment" @Html.Raw(trmcuResultAdd.McuAttachment.RowAttributes)>
        <label id="elh_TRMCUResult_McuAttachment" class="@(trmcuResultAdd.LeftColumnClass)">@Html.Raw(trmcuResultAdd.McuAttachment.Caption)@Html.Raw(trmcuResultAdd.McuAttachment.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trmcuResultAdd.RightColumnClass)"><div @Html.Raw(trmcuResultAdd.McuAttachment.CellAttributes)>
<span id="el_TRMCUResult_McuAttachment">
<div id="fd_x_McuAttachment" class="fileinput-button ew-file-drop-zone">
    <input
        type="file"
        id="x_McuAttachment"
        name="x_McuAttachment"
        class="form-control ew-file-input"
        title="@(trmcuResultAdd.McuAttachment.Title)"
        lang="@(CurrentLanguageID)"
        data-table="TRMCUResult"
        data-field="x_McuAttachment"
        data-size="50"
        data-accept-file-types="@(trmcuResultAdd.McuAttachment.AcceptFileTypes)"
        data-max-file-size="@(trmcuResultAdd.McuAttachment.UploadMaxFileSize)"
        data-max-number-of-files="null"
        data-disable-image-crop="@(trmcuResultAdd.McuAttachment.ImageCropper ? 0 : 1)"
        aria-describedby="x_McuAttachment_help"
        @Html.Raw((trmcuResultAdd.McuAttachment.ReadOnly || trmcuResultAdd.McuAttachment.Disabled) ? " disabled" : "")
        @Html.Raw(trmcuResultAdd.McuAttachment.EditAttributes)
    >
    <div class="text-muted ew-file-text">@Html.Raw(Language.Phrase("ChooseFile"))</div>
</div>
@Html.Raw(trmcuResultAdd.McuAttachment.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trmcuResultAdd.McuAttachment.GetErrorMessage())</div>
<input type="hidden" name="fn_x_McuAttachment" id= "fn_x_McuAttachment" value="@(trmcuResultAdd.McuAttachment.Upload.FileName)">
<input type="hidden" name="fa_x_McuAttachment" id= "fa_x_McuAttachment" value="0">
<table id="ft_x_McuAttachment" class="table table-sm float-start ew-upload-table"><tbody class="files"></tbody></table>
</span>
</div></div>
    </div>
} @* trmcuResultAdd.McuAttachment.Visible (end) *@
@if (trmcuResultAdd.CreatedByUserID.Visible) { // trmcuResultAdd.CreatedByUserID.Visible (begin)
    <div id="r_CreatedByUserID" @Html.Raw(trmcuResultAdd.CreatedByUserID.RowAttributes)>
        <label id="elh_TRMCUResult_CreatedByUserID" for="x_CreatedByUserID" class="@(trmcuResultAdd.LeftColumnClass)">@Html.Raw(trmcuResultAdd.CreatedByUserID.Caption)@Html.Raw(trmcuResultAdd.CreatedByUserID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trmcuResultAdd.RightColumnClass)"><div @Html.Raw(trmcuResultAdd.CreatedByUserID.CellAttributes)>
<span id="el_TRMCUResult_CreatedByUserID">
<input type="@(trmcuResultAdd.CreatedByUserID.InputTextType)" name="x_CreatedByUserID" id="x_CreatedByUserID" data-table="TRMCUResult" data-field="x_CreatedByUserID" value="@Html.Raw(trmcuResultAdd.CreatedByUserID.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(trmcuResultAdd.CreatedByUserID.PlaceHolder))" data-format-pattern="@(trmcuResultAdd.CreatedByUserID.FormatPattern)"@Html.Raw(trmcuResultAdd.CreatedByUserID.EditAttributes) aria-describedby="x_CreatedByUserID_help">
@Html.Raw(trmcuResultAdd.CreatedByUserID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trmcuResultAdd.CreatedByUserID.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* trmcuResultAdd.CreatedByUserID.Visible (end) *@
@if (trmcuResultAdd.CreatedDateTime.Visible) { // trmcuResultAdd.CreatedDateTime.Visible (begin)
    <div id="r_CreatedDateTime" @Html.Raw(trmcuResultAdd.CreatedDateTime.RowAttributes)>
        <label id="elh_TRMCUResult_CreatedDateTime" for="x_CreatedDateTime" class="@(trmcuResultAdd.LeftColumnClass)">@Html.Raw(trmcuResultAdd.CreatedDateTime.Caption)@Html.Raw(trmcuResultAdd.CreatedDateTime.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trmcuResultAdd.RightColumnClass)"><div @Html.Raw(trmcuResultAdd.CreatedDateTime.CellAttributes)>
<span id="el_TRMCUResult_CreatedDateTime">
<input type="@(trmcuResultAdd.CreatedDateTime.InputTextType)" name="x_CreatedDateTime" id="x_CreatedDateTime" data-table="TRMCUResult" data-field="x_CreatedDateTime" value="@Html.Raw(trmcuResultAdd.CreatedDateTime.EditValue)" placeholder="@Html.Raw(HtmlEncode(trmcuResultAdd.CreatedDateTime.PlaceHolder))" data-format-pattern="@(trmcuResultAdd.CreatedDateTime.FormatPattern)"@Html.Raw(trmcuResultAdd.CreatedDateTime.EditAttributes) aria-describedby="x_CreatedDateTime_help">
@Html.Raw(trmcuResultAdd.CreatedDateTime.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trmcuResultAdd.CreatedDateTime.GetErrorMessage())</div>
@if (!trmcuResultAdd.CreatedDateTime.ReadOnly && !trmcuResultAdd.CreatedDateTime.Disabled && !trmcuResultAdd.CreatedDateTime.EditAttrs.Is("readonly") && !trmcuResultAdd.CreatedDateTime.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fTRMCUResultadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fTRMCUResultadd", "x_CreatedDateTime", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* trmcuResultAdd.CreatedDateTime.Visible (end) *@
@if (trmcuResultAdd.LastUpdatedByUserID.Visible) { // trmcuResultAdd.LastUpdatedByUserID.Visible (begin)
    <div id="r_LastUpdatedByUserID" @Html.Raw(trmcuResultAdd.LastUpdatedByUserID.RowAttributes)>
        <label id="elh_TRMCUResult_LastUpdatedByUserID" for="x_LastUpdatedByUserID" class="@(trmcuResultAdd.LeftColumnClass)">@Html.Raw(trmcuResultAdd.LastUpdatedByUserID.Caption)@Html.Raw(trmcuResultAdd.LastUpdatedByUserID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trmcuResultAdd.RightColumnClass)"><div @Html.Raw(trmcuResultAdd.LastUpdatedByUserID.CellAttributes)>
<span id="el_TRMCUResult_LastUpdatedByUserID">
<input type="@(trmcuResultAdd.LastUpdatedByUserID.InputTextType)" name="x_LastUpdatedByUserID" id="x_LastUpdatedByUserID" data-table="TRMCUResult" data-field="x_LastUpdatedByUserID" value="@Html.Raw(trmcuResultAdd.LastUpdatedByUserID.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(trmcuResultAdd.LastUpdatedByUserID.PlaceHolder))" data-format-pattern="@(trmcuResultAdd.LastUpdatedByUserID.FormatPattern)"@Html.Raw(trmcuResultAdd.LastUpdatedByUserID.EditAttributes) aria-describedby="x_LastUpdatedByUserID_help">
@Html.Raw(trmcuResultAdd.LastUpdatedByUserID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trmcuResultAdd.LastUpdatedByUserID.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* trmcuResultAdd.LastUpdatedByUserID.Visible (end) *@
@if (trmcuResultAdd.LastUpdatedDateTime.Visible) { // trmcuResultAdd.LastUpdatedDateTime.Visible (begin)
    <div id="r_LastUpdatedDateTime" @Html.Raw(trmcuResultAdd.LastUpdatedDateTime.RowAttributes)>
        <label id="elh_TRMCUResult_LastUpdatedDateTime" for="x_LastUpdatedDateTime" class="@(trmcuResultAdd.LeftColumnClass)">@Html.Raw(trmcuResultAdd.LastUpdatedDateTime.Caption)@Html.Raw(trmcuResultAdd.LastUpdatedDateTime.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trmcuResultAdd.RightColumnClass)"><div @Html.Raw(trmcuResultAdd.LastUpdatedDateTime.CellAttributes)>
<span id="el_TRMCUResult_LastUpdatedDateTime">
<input type="@(trmcuResultAdd.LastUpdatedDateTime.InputTextType)" name="x_LastUpdatedDateTime" id="x_LastUpdatedDateTime" data-table="TRMCUResult" data-field="x_LastUpdatedDateTime" value="@Html.Raw(trmcuResultAdd.LastUpdatedDateTime.EditValue)" placeholder="@Html.Raw(HtmlEncode(trmcuResultAdd.LastUpdatedDateTime.PlaceHolder))" data-format-pattern="@(trmcuResultAdd.LastUpdatedDateTime.FormatPattern)"@Html.Raw(trmcuResultAdd.LastUpdatedDateTime.EditAttributes) aria-describedby="x_LastUpdatedDateTime_help">
@Html.Raw(trmcuResultAdd.LastUpdatedDateTime.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trmcuResultAdd.LastUpdatedDateTime.GetErrorMessage())</div>
@if (!trmcuResultAdd.LastUpdatedDateTime.ReadOnly && !trmcuResultAdd.LastUpdatedDateTime.Disabled && !trmcuResultAdd.LastUpdatedDateTime.EditAttrs.Is("readonly") && !trmcuResultAdd.LastUpdatedDateTime.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fTRMCUResultadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fTRMCUResultadd", "x_LastUpdatedDateTime", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* trmcuResultAdd.LastUpdatedDateTime.Visible (end) *@
@if (trmcuResultAdd.McuScheduleDate.Visible) { // trmcuResultAdd.McuScheduleDate.Visible (begin)
    <div id="r_McuScheduleDate" @Html.Raw(trmcuResultAdd.McuScheduleDate.RowAttributes)>
        <label id="elh_TRMCUResult_McuScheduleDate" for="x_McuScheduleDate" class="@(trmcuResultAdd.LeftColumnClass)">@Html.Raw(trmcuResultAdd.McuScheduleDate.Caption)@Html.Raw(trmcuResultAdd.McuScheduleDate.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trmcuResultAdd.RightColumnClass)"><div @Html.Raw(trmcuResultAdd.McuScheduleDate.CellAttributes)>
<span id="el_TRMCUResult_McuScheduleDate">
<input type="@(trmcuResultAdd.McuScheduleDate.InputTextType)" name="x_McuScheduleDate" id="x_McuScheduleDate" data-table="TRMCUResult" data-field="x_McuScheduleDate" value="@Html.Raw(trmcuResultAdd.McuScheduleDate.EditValue)" placeholder="@Html.Raw(HtmlEncode(trmcuResultAdd.McuScheduleDate.PlaceHolder))" data-format-pattern="@(trmcuResultAdd.McuScheduleDate.FormatPattern)"@Html.Raw(trmcuResultAdd.McuScheduleDate.EditAttributes) aria-describedby="x_McuScheduleDate_help">
@Html.Raw(trmcuResultAdd.McuScheduleDate.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trmcuResultAdd.McuScheduleDate.GetErrorMessage())</div>
@if (!trmcuResultAdd.McuScheduleDate.ReadOnly && !trmcuResultAdd.McuScheduleDate.Disabled && !trmcuResultAdd.McuScheduleDate.EditAttrs.Is("readonly") && !trmcuResultAdd.McuScheduleDate.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fTRMCUResultadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fTRMCUResultadd", "x_McuScheduleDate", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* trmcuResultAdd.McuScheduleDate.Visible (end) *@
@if (trmcuResultAdd.McuRemark.Visible) { // trmcuResultAdd.McuRemark.Visible (begin)
    <div id="r_McuRemark" @Html.Raw(trmcuResultAdd.McuRemark.RowAttributes)>
        <label id="elh_TRMCUResult_McuRemark" for="x_McuRemark" class="@(trmcuResultAdd.LeftColumnClass)">@Html.Raw(trmcuResultAdd.McuRemark.Caption)@Html.Raw(trmcuResultAdd.McuRemark.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(trmcuResultAdd.RightColumnClass)"><div @Html.Raw(trmcuResultAdd.McuRemark.CellAttributes)>
<span id="el_TRMCUResult_McuRemark">
<input type="@(trmcuResultAdd.McuRemark.InputTextType)" name="x_McuRemark" id="x_McuRemark" data-table="TRMCUResult" data-field="x_McuRemark" value="@Html.Raw(trmcuResultAdd.McuRemark.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(trmcuResultAdd.McuRemark.PlaceHolder))" data-format-pattern="@(trmcuResultAdd.McuRemark.FormatPattern)"@Html.Raw(trmcuResultAdd.McuRemark.EditAttributes) aria-describedby="x_McuRemark_help">
@Html.Raw(trmcuResultAdd.McuRemark.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(trmcuResultAdd.McuRemark.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* trmcuResultAdd.McuRemark.Visible (end) *@
</div><!-- /page* -->
@{ trmcuResultAdd.CloseRecordset(); }
@Html.Raw(trmcuResultAdd.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(trmcuResultAdd.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fTRMCUResultadd">@Html.Raw(Language.Phrase("AddBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fTRMCUResultadd" data-href="@AppPath(trmcuResultAdd.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(trmcuResultAdd.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
@trmcuResultAdd.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("TRMCUResult");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
