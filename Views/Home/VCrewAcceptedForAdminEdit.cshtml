@{
    // View
    View = this;

    // Check action result
    if (vCrewAcceptedForAdminEdit.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!vCrewAcceptedForAdminEdit.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@vCrewAcceptedForAdminEdit.ShowPageHeader()
@vCrewAcceptedForAdminEdit.ShowMessages()
<main class="edit">
<form name="fv_CrewAcceptedForAdminedit" id="fv_CrewAcceptedForAdminedit" class="@(vCrewAcceptedForAdminEdit.FormClassName)" action="@AppPath(CurrentPageName())" method="post" autocomplete="on">
<script>
var currentTable = @Html.Raw(ConvertToJson(vCrewAcceptedForAdminEdit.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { v_CrewAcceptedForAdmin: currentTable } });
var currentPageID = ew.PAGE_ID = "edit";
var currentForm;
var fv_CrewAcceptedForAdminedit;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fv_CrewAcceptedForAdminedit")
        .setPageId("edit")

        // Add fields
        .setFields([

            ["IndividualCodeNumber", [fields.IndividualCodeNumber.visible && fields.IndividualCodeNumber.required ? ew.Validators.required(fields.IndividualCodeNumber.caption) : null], fields.IndividualCodeNumber.isInvalid],
            ["EmployeeStatus", [fields.EmployeeStatus.visible && fields.EmployeeStatus.required ? ew.Validators.required(fields.EmployeeStatus.caption) : null], fields.EmployeeStatus.isInvalid],
            ["FullName", [fields.FullName.visible && fields.FullName.required ? ew.Validators.required(fields.FullName.caption) : null], fields.FullName.isInvalid],
            ["RequiredPhoto", [fields.RequiredPhoto.visible && fields.RequiredPhoto.required ? ew.Validators.required(fields.RequiredPhoto.caption) : null], fields.RequiredPhoto.isInvalid],
            ["VisaPhoto", [fields.VisaPhoto.visible && fields.VisaPhoto.required ? ew.Validators.required(fields.VisaPhoto.caption) : null], fields.VisaPhoto.isInvalid],
            ["CityOfBirth", [fields.CityOfBirth.visible && fields.CityOfBirth.required ? ew.Validators.required(fields.CityOfBirth.caption) : null], fields.CityOfBirth.isInvalid],
            ["DateOfBirth", [fields.DateOfBirth.visible && fields.DateOfBirth.required ? ew.Validators.required(fields.DateOfBirth.caption) : null, ew.Validators.datetime(fields.DateOfBirth.clientFormatPattern)], fields.DateOfBirth.isInvalid],
            ["Gender", [fields.Gender.visible && fields.Gender.required ? ew.Validators.required(fields.Gender.caption) : null], fields.Gender.isInvalid],
            ["RankAppliedFor_RankID", [fields.RankAppliedFor_RankID.visible && fields.RankAppliedFor_RankID.required ? ew.Validators.required(fields.RankAppliedFor_RankID.caption) : null, ew.Validators.integer], fields.RankAppliedFor_RankID.isInvalid],
            ["WillAcceptLowRank", [fields.WillAcceptLowRank.visible && fields.WillAcceptLowRank.required ? ew.Validators.required(fields.WillAcceptLowRank.caption) : null], fields.WillAcceptLowRank.isInvalid],
            ["AvailableFrom", [fields.AvailableFrom.visible && fields.AvailableFrom.required ? ew.Validators.required(fields.AvailableFrom.caption) : null, ew.Validators.datetime(fields.AvailableFrom.clientFormatPattern)], fields.AvailableFrom.isInvalid],
            ["AvailableUntil", [fields.AvailableUntil.visible && fields.AvailableUntil.required ? ew.Validators.required(fields.AvailableUntil.caption) : null, ew.Validators.datetime(fields.AvailableUntil.clientFormatPattern)], fields.AvailableUntil.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "RankAppliedFor_RankID": @Html.Raw(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.ToClientList(vCrewAcceptedForAdminEdit)),
            "WillAcceptLowRank": @Html.Raw(vCrewAcceptedForAdminEdit.WillAcceptLowRank.ToClientList(vCrewAcceptedForAdminEdit)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="update">
<input type="hidden" name="modal" value="@ConvertToInt(vCrewAcceptedForAdminEdit.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(vCrewAcceptedForAdminEdit.OldKeyName)" value="@Html.Raw(vCrewAcceptedForAdminEdit.OldKey)">
<div class="ew-edit-div"><!-- page* -->
@if (vCrewAcceptedForAdminEdit.IndividualCodeNumber.Visible) { // vCrewAcceptedForAdminEdit.IndividualCodeNumber.Visible (begin)
    <div id="r_IndividualCodeNumber" @Html.Raw(vCrewAcceptedForAdminEdit.IndividualCodeNumber.RowAttributes)>
        <label id="elh_v_CrewAcceptedForAdmin_IndividualCodeNumber" for="x_IndividualCodeNumber" class="@(vCrewAcceptedForAdminEdit.LeftColumnClass)">@Html.Raw(vCrewAcceptedForAdminEdit.IndividualCodeNumber.Caption)@Html.Raw(vCrewAcceptedForAdminEdit.IndividualCodeNumber.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(vCrewAcceptedForAdminEdit.RightColumnClass)"><div @Html.Raw(vCrewAcceptedForAdminEdit.IndividualCodeNumber.CellAttributes)>
<span id="el_v_CrewAcceptedForAdmin_IndividualCodeNumber">
<input type="@(vCrewAcceptedForAdminEdit.IndividualCodeNumber.InputTextType)" name="x_IndividualCodeNumber" id="x_IndividualCodeNumber" data-table="v_CrewAcceptedForAdmin" data-field="x_IndividualCodeNumber" value="@Html.Raw(vCrewAcceptedForAdminEdit.IndividualCodeNumber.EditValue)" size="30" maxlength="20" placeholder="@Html.Raw(HtmlEncode(vCrewAcceptedForAdminEdit.IndividualCodeNumber.PlaceHolder))" data-format-pattern="@(vCrewAcceptedForAdminEdit.IndividualCodeNumber.FormatPattern)"@Html.Raw(vCrewAcceptedForAdminEdit.IndividualCodeNumber.EditAttributes) aria-describedby="x_IndividualCodeNumber_help">
@Html.Raw(vCrewAcceptedForAdminEdit.IndividualCodeNumber.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(vCrewAcceptedForAdminEdit.IndividualCodeNumber.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* vCrewAcceptedForAdminEdit.IndividualCodeNumber.Visible (end) *@
@if (vCrewAcceptedForAdminEdit.EmployeeStatus.Visible) { // vCrewAcceptedForAdminEdit.EmployeeStatus.Visible (begin)
    <div id="r_EmployeeStatus" @Html.Raw(vCrewAcceptedForAdminEdit.EmployeeStatus.RowAttributes)>
        <label id="elh_v_CrewAcceptedForAdmin_EmployeeStatus" for="x_EmployeeStatus" class="@(vCrewAcceptedForAdminEdit.LeftColumnClass)">@Html.Raw(vCrewAcceptedForAdminEdit.EmployeeStatus.Caption)@Html.Raw(vCrewAcceptedForAdminEdit.EmployeeStatus.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(vCrewAcceptedForAdminEdit.RightColumnClass)"><div @Html.Raw(vCrewAcceptedForAdminEdit.EmployeeStatus.CellAttributes)>
<span id="el_v_CrewAcceptedForAdmin_EmployeeStatus">
<input type="@(vCrewAcceptedForAdminEdit.EmployeeStatus.InputTextType)" name="x_EmployeeStatus" id="x_EmployeeStatus" data-table="v_CrewAcceptedForAdmin" data-field="x_EmployeeStatus" value="@Html.Raw(vCrewAcceptedForAdminEdit.EmployeeStatus.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(vCrewAcceptedForAdminEdit.EmployeeStatus.PlaceHolder))" data-format-pattern="@(vCrewAcceptedForAdminEdit.EmployeeStatus.FormatPattern)"@Html.Raw(vCrewAcceptedForAdminEdit.EmployeeStatus.EditAttributes) aria-describedby="x_EmployeeStatus_help">
@Html.Raw(vCrewAcceptedForAdminEdit.EmployeeStatus.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(vCrewAcceptedForAdminEdit.EmployeeStatus.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* vCrewAcceptedForAdminEdit.EmployeeStatus.Visible (end) *@
@if (vCrewAcceptedForAdminEdit.FullName.Visible) { // vCrewAcceptedForAdminEdit.FullName.Visible (begin)
    <div id="r_FullName" @Html.Raw(vCrewAcceptedForAdminEdit.FullName.RowAttributes)>
        <label id="elh_v_CrewAcceptedForAdmin_FullName" for="x_FullName" class="@(vCrewAcceptedForAdminEdit.LeftColumnClass)">@Html.Raw(vCrewAcceptedForAdminEdit.FullName.Caption)@Html.Raw(vCrewAcceptedForAdminEdit.FullName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(vCrewAcceptedForAdminEdit.RightColumnClass)"><div @Html.Raw(vCrewAcceptedForAdminEdit.FullName.CellAttributes)>
<span id="el_v_CrewAcceptedForAdmin_FullName">
<input type="@(vCrewAcceptedForAdminEdit.FullName.InputTextType)" name="x_FullName" id="x_FullName" data-table="v_CrewAcceptedForAdmin" data-field="x_FullName" value="@Html.Raw(vCrewAcceptedForAdminEdit.FullName.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(vCrewAcceptedForAdminEdit.FullName.PlaceHolder))" data-format-pattern="@(vCrewAcceptedForAdminEdit.FullName.FormatPattern)"@Html.Raw(vCrewAcceptedForAdminEdit.FullName.EditAttributes) aria-describedby="x_FullName_help">
@Html.Raw(vCrewAcceptedForAdminEdit.FullName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(vCrewAcceptedForAdminEdit.FullName.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* vCrewAcceptedForAdminEdit.FullName.Visible (end) *@
@if (vCrewAcceptedForAdminEdit.RequiredPhoto.Visible) { // vCrewAcceptedForAdminEdit.RequiredPhoto.Visible (begin)
    <div id="r_RequiredPhoto" @Html.Raw(vCrewAcceptedForAdminEdit.RequiredPhoto.RowAttributes)>
        <label id="elh_v_CrewAcceptedForAdmin_RequiredPhoto" for="x_RequiredPhoto" class="@(vCrewAcceptedForAdminEdit.LeftColumnClass)">@Html.Raw(vCrewAcceptedForAdminEdit.RequiredPhoto.Caption)@Html.Raw(vCrewAcceptedForAdminEdit.RequiredPhoto.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(vCrewAcceptedForAdminEdit.RightColumnClass)"><div @Html.Raw(vCrewAcceptedForAdminEdit.RequiredPhoto.CellAttributes)>
<span id="el_v_CrewAcceptedForAdmin_RequiredPhoto">
<input type="@(vCrewAcceptedForAdminEdit.RequiredPhoto.InputTextType)" name="x_RequiredPhoto" id="x_RequiredPhoto" data-table="v_CrewAcceptedForAdmin" data-field="x_RequiredPhoto" value="@Html.Raw(vCrewAcceptedForAdminEdit.RequiredPhoto.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(vCrewAcceptedForAdminEdit.RequiredPhoto.PlaceHolder))" data-format-pattern="@(vCrewAcceptedForAdminEdit.RequiredPhoto.FormatPattern)"@Html.Raw(vCrewAcceptedForAdminEdit.RequiredPhoto.EditAttributes) aria-describedby="x_RequiredPhoto_help">
@Html.Raw(vCrewAcceptedForAdminEdit.RequiredPhoto.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(vCrewAcceptedForAdminEdit.RequiredPhoto.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* vCrewAcceptedForAdminEdit.RequiredPhoto.Visible (end) *@
@if (vCrewAcceptedForAdminEdit.VisaPhoto.Visible) { // vCrewAcceptedForAdminEdit.VisaPhoto.Visible (begin)
    <div id="r_VisaPhoto" @Html.Raw(vCrewAcceptedForAdminEdit.VisaPhoto.RowAttributes)>
        <label id="elh_v_CrewAcceptedForAdmin_VisaPhoto" for="x_VisaPhoto" class="@(vCrewAcceptedForAdminEdit.LeftColumnClass)">@Html.Raw(vCrewAcceptedForAdminEdit.VisaPhoto.Caption)@Html.Raw(vCrewAcceptedForAdminEdit.VisaPhoto.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(vCrewAcceptedForAdminEdit.RightColumnClass)"><div @Html.Raw(vCrewAcceptedForAdminEdit.VisaPhoto.CellAttributes)>
<span id="el_v_CrewAcceptedForAdmin_VisaPhoto">
<input type="@(vCrewAcceptedForAdminEdit.VisaPhoto.InputTextType)" name="x_VisaPhoto" id="x_VisaPhoto" data-table="v_CrewAcceptedForAdmin" data-field="x_VisaPhoto" value="@Html.Raw(vCrewAcceptedForAdminEdit.VisaPhoto.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(vCrewAcceptedForAdminEdit.VisaPhoto.PlaceHolder))" data-format-pattern="@(vCrewAcceptedForAdminEdit.VisaPhoto.FormatPattern)"@Html.Raw(vCrewAcceptedForAdminEdit.VisaPhoto.EditAttributes) aria-describedby="x_VisaPhoto_help">
@Html.Raw(vCrewAcceptedForAdminEdit.VisaPhoto.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(vCrewAcceptedForAdminEdit.VisaPhoto.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* vCrewAcceptedForAdminEdit.VisaPhoto.Visible (end) *@
@if (vCrewAcceptedForAdminEdit.CityOfBirth.Visible) { // vCrewAcceptedForAdminEdit.CityOfBirth.Visible (begin)
    <div id="r_CityOfBirth" @Html.Raw(vCrewAcceptedForAdminEdit.CityOfBirth.RowAttributes)>
        <label id="elh_v_CrewAcceptedForAdmin_CityOfBirth" for="x_CityOfBirth" class="@(vCrewAcceptedForAdminEdit.LeftColumnClass)">@Html.Raw(vCrewAcceptedForAdminEdit.CityOfBirth.Caption)@Html.Raw(vCrewAcceptedForAdminEdit.CityOfBirth.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(vCrewAcceptedForAdminEdit.RightColumnClass)"><div @Html.Raw(vCrewAcceptedForAdminEdit.CityOfBirth.CellAttributes)>
<span id="el_v_CrewAcceptedForAdmin_CityOfBirth">
<input type="@(vCrewAcceptedForAdminEdit.CityOfBirth.InputTextType)" name="x_CityOfBirth" id="x_CityOfBirth" data-table="v_CrewAcceptedForAdmin" data-field="x_CityOfBirth" value="@Html.Raw(vCrewAcceptedForAdminEdit.CityOfBirth.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(vCrewAcceptedForAdminEdit.CityOfBirth.PlaceHolder))" data-format-pattern="@(vCrewAcceptedForAdminEdit.CityOfBirth.FormatPattern)"@Html.Raw(vCrewAcceptedForAdminEdit.CityOfBirth.EditAttributes) aria-describedby="x_CityOfBirth_help">
@Html.Raw(vCrewAcceptedForAdminEdit.CityOfBirth.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(vCrewAcceptedForAdminEdit.CityOfBirth.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* vCrewAcceptedForAdminEdit.CityOfBirth.Visible (end) *@
@if (vCrewAcceptedForAdminEdit.DateOfBirth.Visible) { // vCrewAcceptedForAdminEdit.DateOfBirth.Visible (begin)
    <div id="r_DateOfBirth" @Html.Raw(vCrewAcceptedForAdminEdit.DateOfBirth.RowAttributes)>
        <label id="elh_v_CrewAcceptedForAdmin_DateOfBirth" for="x_DateOfBirth" class="@(vCrewAcceptedForAdminEdit.LeftColumnClass)">@Html.Raw(vCrewAcceptedForAdminEdit.DateOfBirth.Caption)@Html.Raw(vCrewAcceptedForAdminEdit.DateOfBirth.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(vCrewAcceptedForAdminEdit.RightColumnClass)"><div @Html.Raw(vCrewAcceptedForAdminEdit.DateOfBirth.CellAttributes)>
<span id="el_v_CrewAcceptedForAdmin_DateOfBirth">
<input type="@(vCrewAcceptedForAdminEdit.DateOfBirth.InputTextType)" name="x_DateOfBirth" id="x_DateOfBirth" data-table="v_CrewAcceptedForAdmin" data-field="x_DateOfBirth" value="@Html.Raw(vCrewAcceptedForAdminEdit.DateOfBirth.EditValue)" placeholder="@Html.Raw(HtmlEncode(vCrewAcceptedForAdminEdit.DateOfBirth.PlaceHolder))" data-format-pattern="@(vCrewAcceptedForAdminEdit.DateOfBirth.FormatPattern)"@Html.Raw(vCrewAcceptedForAdminEdit.DateOfBirth.EditAttributes) aria-describedby="x_DateOfBirth_help">
@Html.Raw(vCrewAcceptedForAdminEdit.DateOfBirth.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(vCrewAcceptedForAdminEdit.DateOfBirth.GetErrorMessage())</div>
@if (!vCrewAcceptedForAdminEdit.DateOfBirth.ReadOnly && !vCrewAcceptedForAdminEdit.DateOfBirth.Disabled && !vCrewAcceptedForAdminEdit.DateOfBirth.EditAttrs.Is("readonly") && !vCrewAcceptedForAdminEdit.DateOfBirth.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fv_CrewAcceptedForAdminedit", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fv_CrewAcceptedForAdminedit", "x_DateOfBirth", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* vCrewAcceptedForAdminEdit.DateOfBirth.Visible (end) *@
@if (vCrewAcceptedForAdminEdit.Gender.Visible) { // vCrewAcceptedForAdminEdit.Gender.Visible (begin)
    <div id="r_Gender" @Html.Raw(vCrewAcceptedForAdminEdit.Gender.RowAttributes)>
        <label id="elh_v_CrewAcceptedForAdmin_Gender" for="x_Gender" class="@(vCrewAcceptedForAdminEdit.LeftColumnClass)">@Html.Raw(vCrewAcceptedForAdminEdit.Gender.Caption)@Html.Raw(vCrewAcceptedForAdminEdit.Gender.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(vCrewAcceptedForAdminEdit.RightColumnClass)"><div @Html.Raw(vCrewAcceptedForAdminEdit.Gender.CellAttributes)>
<span id="el_v_CrewAcceptedForAdmin_Gender">
<input type="@(vCrewAcceptedForAdminEdit.Gender.InputTextType)" name="x_Gender" id="x_Gender" data-table="v_CrewAcceptedForAdmin" data-field="x_Gender" value="@Html.Raw(vCrewAcceptedForAdminEdit.Gender.EditValue)" size="30" maxlength="1" placeholder="@Html.Raw(HtmlEncode(vCrewAcceptedForAdminEdit.Gender.PlaceHolder))" data-format-pattern="@(vCrewAcceptedForAdminEdit.Gender.FormatPattern)"@Html.Raw(vCrewAcceptedForAdminEdit.Gender.EditAttributes) aria-describedby="x_Gender_help">
@Html.Raw(vCrewAcceptedForAdminEdit.Gender.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(vCrewAcceptedForAdminEdit.Gender.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* vCrewAcceptedForAdminEdit.Gender.Visible (end) *@
@if (vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.Visible) { // vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.Visible (begin)
    <div id="r_RankAppliedFor_RankID" @Html.Raw(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.RowAttributes)>
        <label id="elh_v_CrewAcceptedForAdmin_RankAppliedFor_RankID" class="@(vCrewAcceptedForAdminEdit.LeftColumnClass)">@Html.Raw(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.Caption)@Html.Raw(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(vCrewAcceptedForAdminEdit.RightColumnClass)"><div @Html.Raw(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.CellAttributes)>
<span id="el_v_CrewAcceptedForAdmin_RankAppliedFor_RankID">
<span>@{
    if (IsRTL) {
        vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.EditAttrs["dir"] = "rtl";
    }
}</span>
<span id="as_x_RankAppliedFor_RankID" class="ew-auto-suggest">
    <input type="text" class="form-control" name="sv_x_RankAppliedFor_RankID" id="sv_x_RankAppliedFor_RankID" value="@(RemoveHtml(ConvertToString(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.EditValue)))" autocomplete="off" size="30" placeholder="@Html.Raw(HtmlEncode(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.PlaceHolder))" data-placeholder="@Html.Raw(HtmlEncode(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.PlaceHolder))" data-format-pattern="@(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.FormatPattern)" @Html.Raw(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.EditAttributes) aria-describedby="x_RankAppliedFor_RankID_help">
</span>
<selection-list hidden class="form-control" data-table="v_CrewAcceptedForAdmin" data-field="x_RankAppliedFor_RankID" data-input="sv_x_RankAppliedFor_RankID" data-value-separator="@(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.DisplayValueSeparatorAttribute)" name="x_RankAppliedFor_RankID" id="x_RankAppliedFor_RankID" value="@(HtmlEncode(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.CurrentValue))"></selection-list>
@Html.Raw(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.GetErrorMessage())</div>
<script>
loadjs.ready(["fv_CrewAcceptedForAdminedit"], function() {
    fv_CrewAcceptedForAdminedit.createAutoSuggest(Object.assign({"id":"x_RankAppliedFor_RankID","forceSelect":false}, { lookupAllDisplayFields: @(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.Lookup.LookupAllDisplayFields ? "true" : "false") }, ew.vars.tables.v_CrewAcceptedForAdmin.fields.RankAppliedFor_RankID.autoSuggestOptions));
});
</script>
@Html.Raw(vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.Lookup.GetParamTag(vCrewAcceptedForAdminEdit, "p_x_RankAppliedFor_RankID"))
</span>
</div></div>
    </div>
} @* vCrewAcceptedForAdminEdit.RankAppliedFor_RankID.Visible (end) *@
@if (vCrewAcceptedForAdminEdit.WillAcceptLowRank.Visible) { // vCrewAcceptedForAdminEdit.WillAcceptLowRank.Visible (begin)
    <div id="r_WillAcceptLowRank" @Html.Raw(vCrewAcceptedForAdminEdit.WillAcceptLowRank.RowAttributes)>
        <label id="elh_v_CrewAcceptedForAdmin_WillAcceptLowRank" class="@(vCrewAcceptedForAdminEdit.LeftColumnClass)">@Html.Raw(vCrewAcceptedForAdminEdit.WillAcceptLowRank.Caption)@Html.Raw(vCrewAcceptedForAdminEdit.WillAcceptLowRank.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(vCrewAcceptedForAdminEdit.RightColumnClass)"><div @Html.Raw(vCrewAcceptedForAdminEdit.WillAcceptLowRank.CellAttributes)>
<span id="el_v_CrewAcceptedForAdmin_WillAcceptLowRank">
<div class="form-check d-inline-block">
    <input type="checkbox" class="form-check-input@(vCrewAcceptedForAdminEdit.WillAcceptLowRank.IsInvalidClass)" data-table="v_CrewAcceptedForAdmin" data-field="x_WillAcceptLowRank" data-boolean name="x_WillAcceptLowRank" id="x_WillAcceptLowRank" value="1" checked="@ConvertToBool(vCrewAcceptedForAdminEdit.WillAcceptLowRank.CurrentValue)" @Html.Raw(vCrewAcceptedForAdminEdit.WillAcceptLowRank.EditAttributes) aria-describedby="x_WillAcceptLowRank_help">
    <div class="invalid-feedback">@Html.Raw(vCrewAcceptedForAdminEdit.WillAcceptLowRank.GetErrorMessage())</div>
</div>
@Html.Raw(vCrewAcceptedForAdminEdit.WillAcceptLowRank.GetCustomMessage)
</span>
</div></div>
    </div>
} @* vCrewAcceptedForAdminEdit.WillAcceptLowRank.Visible (end) *@
@if (vCrewAcceptedForAdminEdit.AvailableFrom.Visible) { // vCrewAcceptedForAdminEdit.AvailableFrom.Visible (begin)
    <div id="r_AvailableFrom" @Html.Raw(vCrewAcceptedForAdminEdit.AvailableFrom.RowAttributes)>
        <label id="elh_v_CrewAcceptedForAdmin_AvailableFrom" for="x_AvailableFrom" class="@(vCrewAcceptedForAdminEdit.LeftColumnClass)">@Html.Raw(vCrewAcceptedForAdminEdit.AvailableFrom.Caption)@Html.Raw(vCrewAcceptedForAdminEdit.AvailableFrom.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(vCrewAcceptedForAdminEdit.RightColumnClass)"><div @Html.Raw(vCrewAcceptedForAdminEdit.AvailableFrom.CellAttributes)>
<span id="el_v_CrewAcceptedForAdmin_AvailableFrom">
<input type="@(vCrewAcceptedForAdminEdit.AvailableFrom.InputTextType)" name="x_AvailableFrom" id="x_AvailableFrom" data-table="v_CrewAcceptedForAdmin" data-field="x_AvailableFrom" value="@Html.Raw(vCrewAcceptedForAdminEdit.AvailableFrom.EditValue)" placeholder="@Html.Raw(HtmlEncode(vCrewAcceptedForAdminEdit.AvailableFrom.PlaceHolder))" data-format-pattern="@(vCrewAcceptedForAdminEdit.AvailableFrom.FormatPattern)"@Html.Raw(vCrewAcceptedForAdminEdit.AvailableFrom.EditAttributes) aria-describedby="x_AvailableFrom_help">
@Html.Raw(vCrewAcceptedForAdminEdit.AvailableFrom.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(vCrewAcceptedForAdminEdit.AvailableFrom.GetErrorMessage())</div>
@if (!vCrewAcceptedForAdminEdit.AvailableFrom.ReadOnly && !vCrewAcceptedForAdminEdit.AvailableFrom.Disabled && !vCrewAcceptedForAdminEdit.AvailableFrom.EditAttrs.Is("readonly") && !vCrewAcceptedForAdminEdit.AvailableFrom.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fv_CrewAcceptedForAdminedit", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fv_CrewAcceptedForAdminedit", "x_AvailableFrom", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* vCrewAcceptedForAdminEdit.AvailableFrom.Visible (end) *@
@if (vCrewAcceptedForAdminEdit.AvailableUntil.Visible) { // vCrewAcceptedForAdminEdit.AvailableUntil.Visible (begin)
    <div id="r_AvailableUntil" @Html.Raw(vCrewAcceptedForAdminEdit.AvailableUntil.RowAttributes)>
        <label id="elh_v_CrewAcceptedForAdmin_AvailableUntil" for="x_AvailableUntil" class="@(vCrewAcceptedForAdminEdit.LeftColumnClass)">@Html.Raw(vCrewAcceptedForAdminEdit.AvailableUntil.Caption)@Html.Raw(vCrewAcceptedForAdminEdit.AvailableUntil.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(vCrewAcceptedForAdminEdit.RightColumnClass)"><div @Html.Raw(vCrewAcceptedForAdminEdit.AvailableUntil.CellAttributes)>
<span id="el_v_CrewAcceptedForAdmin_AvailableUntil">
<input type="@(vCrewAcceptedForAdminEdit.AvailableUntil.InputTextType)" name="x_AvailableUntil" id="x_AvailableUntil" data-table="v_CrewAcceptedForAdmin" data-field="x_AvailableUntil" value="@Html.Raw(vCrewAcceptedForAdminEdit.AvailableUntil.EditValue)" placeholder="@Html.Raw(HtmlEncode(vCrewAcceptedForAdminEdit.AvailableUntil.PlaceHolder))" data-format-pattern="@(vCrewAcceptedForAdminEdit.AvailableUntil.FormatPattern)"@Html.Raw(vCrewAcceptedForAdminEdit.AvailableUntil.EditAttributes) aria-describedby="x_AvailableUntil_help">
@Html.Raw(vCrewAcceptedForAdminEdit.AvailableUntil.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(vCrewAcceptedForAdminEdit.AvailableUntil.GetErrorMessage())</div>
@if (!vCrewAcceptedForAdminEdit.AvailableUntil.ReadOnly && !vCrewAcceptedForAdminEdit.AvailableUntil.Disabled && !vCrewAcceptedForAdminEdit.AvailableUntil.EditAttrs.Is("readonly") && !vCrewAcceptedForAdminEdit.AvailableUntil.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fv_CrewAcceptedForAdminedit", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fv_CrewAcceptedForAdminedit", "x_AvailableUntil", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* vCrewAcceptedForAdminEdit.AvailableUntil.Visible (end) *@
</div><!-- /page* -->
    <input type="hidden" data-table="v_CrewAcceptedForAdmin" data-field="x_ID" data-hidden="1" name="x_ID" id="x_ID" value="@Html.Raw(HtmlEncode(vCrewAcceptedForAdminEdit.ID.CurrentValue))">
@{ vCrewAcceptedForAdminEdit.CloseRecordset(); }
@Html.Raw(vCrewAcceptedForAdminEdit.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(vCrewAcceptedForAdminEdit.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fv_CrewAcceptedForAdminedit">@Html.Raw(Language.Phrase("SaveBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fv_CrewAcceptedForAdminedit" data-href="@AppPath(vCrewAcceptedForAdminEdit.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(vCrewAcceptedForAdminEdit.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
</main>
@vCrewAcceptedForAdminEdit.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("v_CrewAcceptedForAdmin");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
